<?xml version="1.0" encoding="UTF-8"?>
<project name="sdr" basedir="." default="none"
         xmlns:jacoco="antlib:org.jacoco.ant">

<description>
Square Dance Revolution build file.
</description>
<property name="package" value="sdr" />
<property name="package_topdir" value="net/cscott/sdr" />
<property name="version" value="0.7+git" /> <!-- change version # here! -->

    <taskdef resource="net/sf/antcontrib/antlib.xml"
	     classpath="lib/dev/ant-contrib-1.0b3.jar" />
    <taskdef name="pack200"
             classname="org.jdesktop.deployment.ant.pack200.Pack200Task"
             classpath="lib/dev/deployment-ant-pack200-1.0beta.jar" />
    <taskdef resource="org/apache/tools/ant/antlr/antlib.xml"
             classpath="lib/dev/antlr3-ant.jar" />
    <!-- jacoco integration -->
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath path="${basedir}/lib/dev/jacoco-0.6.4/lib/jacocoant.jar"/>
    </taskdef>

    <!-- load the variable definitions from another file -->
    <property file="build.properties" />
    <!-- local copy of GAE ant macros -->
    <import file="${gae.sdk}/config/user/ant-macros.xml" optional="true" />

    <!-- define some variables for the script -->
    <target name="init">
      <!-- define other variables -->
      <property name="api_dir"            value="${basedir}/api"/>
      <property name="lib_dir"            value="${basedir}/lib"/>
      <property name="src_dir"            value="${basedir}/src"/>
      <property name="classes_dir"	value="${basedir}/bin"/>
      <property name="instrument_file"  value="${basedir}/jacoco.exec" />
      <property name="resources_dir"	value="${basedir}/resources"/>
      <if>
	<not><isset property="javadoc.access" /></not>
	<then>
	  <property name="javadoc.access" value="protected" />
	</then>
      </if>
      <!-- set the classpath -->
      <fileset id="jar.set" dir="lib">
        <include name="*.jar" />
	<include name="sphinx/*.jar" />
	<include name="jme/jme*.jar" />
	<include name="jme/jinput.jar jme/jogg*.jar jme/jorbis*.jar" />
	<include name="jme/lwjgl.jar" />
      </fileset>
      <path id="classpath.path">
        <pathelement path="${classes_dir}"/>
	<fileset refid="jar.set" />
        <fileset dir="lib/dev"> <!-- for development only -->
          <include name="*.jar" />
          <include name="jdoctest/jdoctest*.jar" />
          <include name="jdoctest/rhino*.jar" />
        </fileset>
	<pathelement path="${jdk.home}/lib/tools.jar"/>
        <!-- this version is more portable -->
	<pathelement path="${java.home}/../lib/tools.jar"/>
      </path>
      <path id="gwt.path">
	<pathelement location="${gwt.sdk}/gwt-user.jar"/>
	<fileset dir="${gwt.sdk}" includes="gwt-dev*.jar"/>
	<fileset dir="${gwt.sdk}" includes="validation-api-*.jar"/>
	<fileset dir="war/WEB-INF/lib" includes="**/*.jar"/>
      </path>
      <path id="gae.path">
	<pathelement location="${gae.sdk}/lib/appengine-tools-api.jar" />
	<fileset dir="${gae.sdk}/lib" includes="shared/**/*.jar" />
	<fileset dir="war/WEB-INF/lib" includes="**/*.jar"/>
      </path>
    </target>

    <target name="none">
            <echo>Type 'ant -projecthelp' for possible targets.</echo>
    </target>

    <!-- delete generated files -->
    <target name="clean" depends="init,clean.flf,clean.gwt,clean.package_info"
            description="Removes the generated class files and javadoc">
        <!-- version numbers -->
        <delete file="src/net/cscott/sdr/Version.java" />
        <delete file="sdr.jnlp" />
	<!-- classes and api docs -->
	<delete dir="${classes_dir}" />
	<delete dir="${api_dir}" />
	<delete dir="${src_dir}/net/cscott/sdr/calls/parser/doc-files" />
	<delete dir="${src_dir}/net/cscott/sdr/calls/lists/doc-files" />
	<delete dir="${src_dir}/net/cscott/sdr/doc-files" />
	<delete file="${basedir}/${ant.project.name}-src.jar" />
	<delete file="${basedir}/${ant.project.name}.jar" />
	<delete file="${basedir}/${ant.project.name}.jar.MD5" />
	<!-- coverage information -->
	<delete file="${instrument_file}" />
	<!-- test output -->
	<delete>
	  <fileset dir="${basedir}" includes="TEST-*.txt" />
	</delete>
	<!-- eclipse writes here, so as not to fight with ant -->
	<delete dir="war/WEB-INF/classes" />
	<!-- from dist targets -->
	<delete>
	  <fileset dir="${basedir}"
		   includes="${ant.project.name}-libs.jar*
			     ${ant.project.name}-libs-unpack.jar
			     ChangeLog" />
	</delete>
    </target>
    <target name="clean.package_info" depends="init"
            description="Remove package_info.java files generated for junit">
      <delete>
        <fileset dir="src" includes="**/package_info.java" />
      </delete>
    </target>
    <target name="maint-clean" depends="init,clean,clean.grm,clean.tex"
	    description="Removes ANTLR generated files">
        <delete>
	  <fileset dir="src/net/cscott/sdr/calls/parser/"
		   includes="CallFileBuilder.java CallFileParser.java
			     CallFileLexer.java CallFile__.g *.tokens
			     AstLexer.java AstParser.java"
		   />
	</delete>
    </target>

    <!-- make the version file -->
    <target name="version"
	    description="Generates Version.java with the correct
			 version number.">
      <!-- Generate Version.java.tmp -->
      <copy file="src/${package_topdir}/Version.java.in"
            tofile="src/${package_topdir}/Version.java.tmp" >
        <filterset>
         <filter token="VERSION" value="${version}"/>
         <filter token="PACKAGE" value="${package}"/>
        </filterset>
      </copy>
      <!-- Replace Version.java if the new file is different -->
      <if>
	<filesmatch file1="src/${package_topdir}/Version.java"
		    file2="src/${package_topdir}/Version.java.tmp" />
        <else>
	  <move file="src/${package_topdir}/Version.java.tmp"
		tofile="src/${package_topdir}/Version.java" />
        </else>
      </if>
      <!-- clean up the temp file in any case -->
      <delete file="src/${package_topdir}/Version.java.tmp" />
      <!-- put version in the jnlp file -->
      <copy file="sdr.jnlp.in"
            tofile="sdr.jnlp" >
        <filterset>
         <filter token="VERSION" value="${version}"/>
        </filterset>
      </copy>
    </target>
    <target name="echo-version" depends="init"
            description="Print the current version number." >
      <echo message="Current version is: ${version}" />
    </target>

    <!-- compile the source code -->
    <target name="compile.base" depends="init,version"
            description="Compiles the code in ${src_dir} to ${classes_dir}">
    <antlr3 target="src/net/cscott/sdr/calls/parser/Ast.g">
		<classpath refid="classpath.path" />
    </antlr3>
    <antlr3 target="src/net/cscott/sdr/calls/parser/CallFile.g">
		<classpath refid="classpath.path" />
    </antlr3>
    <antlr3 target="src/net/cscott/sdr/calls/parser/CallFileBuilder.g"
            libdirectory="src/net/cscott/sdr/calls/parser" >
		<classpath refid="classpath.path" />
    </antlr3>
    <mkdir dir="${classes_dir}" />
    <javac srcdir="${src_dir}"
		   destdir="${classes_dir}"
		   includes="net/cscott/sdr/AddDoctestRunner.java"
		   deprecation="on" source="1.7" target="1.7"
		   debug="true" includeantruntime="false">
    </javac>
    <java classname="net.cscott.sdr.AddDoctestRunner" failonerror="true">
      <classpath><path refid="classpath.path"/></classpath>
      <arg value="src/net/cscott/sdr/calls/parser/AstParser.java" />
      <arg value="src/net/cscott/sdr/calls/parser/CallFileBuilder.java" />
      <arg value="src/net/cscott/sdr/calls/parser/CallFileLexer.java" />
      <arg value="src/net/cscott/sdr/calls/parser/CallFileParser.java" />
    </java>
	    <javac srcdir="${src_dir}"
		   destdir="${classes_dir}"
		   excludes="**/package?info.java **/thunk/**/*.java **/webapp/**/*.java"
		   deprecation="on" source="1.7" target="1.7"
		   debug="true" includeantruntime="false">
                   <compilerarg value="-Xlint:unchecked"/>
		   <classpath refid="classpath.path" />
	    </javac>
	    <!-- bundle these into the jar -->
	    <copy todir="${resources_dir}/net/cscott/sdr">
	      <fileset dir="." includes="AUTHORS COPYING" />
	    </copy>
	    <!-- copy resources into the bin directory -->
            <copy todir="${classes_dir}">
              <fileset dir="${resources_dir}" />
            </copy>
    </target>

    <!-- run the javadoc tool on the source code -->
    <target name="chk-javadoc" depends="init" >
      <echo message="${javadoc.access}" file=".test-access" />
      <if>
	<and>
	  <filesmatch file1="${api_dir}/access" file2=".test-access"/>
	  <uptodate targetfile="${api_dir}/index.html">
            <srcfiles dir="${src_dir}" includes="**/*.java **/*.html" />
	  </uptodate>
	</and>
	<then>
	  <property name="javadoc.notRequired" value="true" />
	</then>
      </if>
      <delete file=".test-access" />
    </target>
    <target name="javadoc"
	    depends="compile,compile.tex,chk-javadoc,clean.package_info"
            unless="javadoc.notRequired"
            description="Generates javadoc in ${api_dir}">
        <!-- copy call file manual to doc-files -->
        <mkdir dir="${src_dir}/net/cscott/sdr/calls/parser/doc-files" />
        <copy todir="${src_dir}/net/cscott/sdr/calls/parser/doc-files">
                <fileset dir="${basedir}/doc"
                         includes="calldefs.pdf" />
        </copy>
        <!-- copy call lists to doc-files -->
        <mkdir dir="${src_dir}/net/cscott/sdr/calls/lists/doc-files" />
        <copy todir="${src_dir}/net/cscott/sdr/calls/lists/doc-files">
                <fileset dir="${resources_dir}/net/cscott/sdr/calls/lists"
                         includes="*.calls" />
        </copy>
	<!-- copy PMSD test cases to doc-files -->
        <mkdir dir="${src_dir}/net/cscott/sdr/doc-files" />
        <copy todir="${src_dir}/net/cscott/sdr/doc-files">
          <fileset dir="${resources_dir}/net/cscott/sdr/tests"
		   excludes="*~" />
        </copy>
	<!-- run javadoc -->
	<mkdir dir="${api_dir}" />
	<echo message="${javadoc.access}" file="${api_dir}/access" />
        <!-- we get an over-size method error in class file
             net/cscott/sdr/calls/lists/C4GrammarParser, so
          we'll ignore it. -->
	<jacoco:agent property="jacoco_agent"
                      destfile="${instrument_file}" append="false"
                      includes="net.cscott.sdr.*:EDU.*"
                      excludes="net.cscott.sdr.calls.lists.C4GrammarParser"
                      />
	<javadoc sourcepath="${src_dir}"
		 destdir="${api_dir}"
                 windowtitle="SDR ${version} documentation"
		 doctitle="Square Dance Revolution!"
                 header="${ant.project.name} ${version}"
		 overview="${src_dir}/overview.html"
		 source="1.7"
                 access="${javadoc.access}" nodeprecated="false"
		 failonerror="true"
                 author="true" use="true" version="true" breakiterator="true">
	  <package name="net.cscott.sdr.*" />
	  <excludepackage name="net.cscott.sdr.webapp.*" />
	  <bottom><![CDATA[
             Copyright &copy; 2006-2009 C. Scott Ananian
<script type="text/javascript">
window['JAVADOC_BASE'] = '{@docRoot}';
</script>
<script type="text/javascript" src="{@docRoot}/doc-files/loadpretty.js">
</script>
          ]]></bottom>
		<classpath refid="classpath.path" />
		<taglet name="net.cscott.jdoctest.JDoctest">
		  <path>
		    <fileset dir="lib/dev/jdoctest">
		      <include name="*.jar"/>
		    </fileset>
		    <path refid="classpath.path" />
		  </path>
		</taglet>
		<!-- write coverage info to cobertura.ser -->
		<arg value="-J${jacoco_agent}" />
		<arg value="-J-Xmx1024M" />
		<!-- write tests to api/tests -->
		<arg value="-J-Dnet.cscott.jdoctest.output=${api_dir}/tests" />
		<!-- enable assertions when evaluating doctests -->
		<arg value="-J-ea:net.cscott..." />
            <link href="http://jakarta.apache.org/commons/lang/api-release/"/>
            <link href="http://cmusphinx.sourceforge.net/sphinx4/javadoc/"/>
            <link href="http://www.jmonkeyengine.com/doc/"/>
            <link href="http://cscott.net/Projects/JUtil/jutil-latest/doc/"/>
            <!--<link href="http://java.sun.com/products/java-media/speech/forDevelopers/jsapi-doc/"/>-->
            <link href="http://java.sun.com/javase/6/docs/api"/>
	</javadoc>
	<!-- generate coverage report -->
	<jacoco:report>
          <executiondata>
            <file file="${instrument_file}"/>
          </executiondata>
          <structure name="Square Dance Revolution">
            <classfiles>
              <fileset dir="${classes_dir}"/>
            </classfiles>
            <sourcefiles encoding="utf-8">
              <fileset dir="${src_dir}"/>
            </sourcefiles>
          </structure>
          <html destdir="${api_dir}/coverage"/>
        </jacoco:report>
    </target>
    <target name="quickdoc" depends="compile,clean.package_info"
            description="Quickly runs doctests via javadoc; no code coverage">
      <tempfile property="temp_dir" destDir="${java.io.tmpdir}" prefix="doc"/>
	<mkdir dir="${temp_dir}" />
	<javadoc sourcepath="${src_dir}"
		 destdir="${temp_dir}"
                 windowtitle="INCOMPLETE QUICK DOCS DO NOT USE"
		 doctitle="INCOMPLETE QUICK DOCS DO NOT USE"
                 header="INCOMPLETE QUICK DOCS DO NOT USE"
		 overview="${src_dir}/overview.html"
		 source="1.7"
                 access="private" nodeprecated="false"
		 failonerror="true"
                 author="true" use="true" version="true" breakiterator="true">
	  <package name="net.cscott.sdr.*" />
	  <excludepackage name="net.cscott.sdr.webapp.*" />
		<classpath refid="classpath.path" />
		<taglet name="net.cscott.jdoctest.JDoctest">
		  <path>
		    <fileset dir="lib/dev/jdoctest">
		      <include name="*.jar"/>
		    </fileset>
		    <path refid="classpath.path" />
		  </path>
		</taglet>
		<arg value="-J-Xmx1024M" />
		<!-- enable assertions when evaluating doctests -->
		<arg value="-J-ea:net.cscott..." />
	</javadoc>
        <delete dir="${temp_dir}" />
    </target>

    <!-- export the project as a jar -->
    <target name="jar" depends="compile"
            description="Exports the project as a jar">
      <if>
	<issigned file="${basedir}/${ant.project.name}.jar" />
	<then>
	  <!-- using 'update' would invalidate the signature. -->
	  <delete file="${basedir}/${ant.project.name}.jar" />
	</then>
      </if>
      <jar destfile="${basedir}/${ant.project.name}.jar"
           update="true" manifest="${basedir}/${ant.project.name}.Manifest">
	<fileset dir="${classes_dir}" />
      </jar>
    </target>
    <target name="src-jar" depends="compile"
            description="Exports the project's source code as a jar">
        <!-- note that we depend on compile to ensure the grammars are
             generated -->
	<jar destfile="${basedir}/${ant.project.name}-src.jar"
             update="true">
		<fileset dir="${src_dir}" />
	</jar>
    </target>

    <!-- most ant scripts have a build target -->
    <target name="build" depends="jar" description="Alias for jar target"/>
    <!-- most ant scripts have a test target -->
    <target name="test" depends="quickdoc,run.junit"
            description="Run tests (alias for quickdoc,run.junit)"/>
    <!-- build classes and grammars -->
    <target name="compile" depends="compile.base,compile.index,compile.flf,compile.grm" />

    <!-- ********************************************************** -->
    <!-- *                                                        * -->
    <!-- * Runs the application.                                  * -->
    <!-- *                                                        * -->
    <!-- ********************************************************** -->
    <target name="run"
	    description="Runs the application."
	    depends="jar">
	    <java jar="${basedir}/${ant.project.name}.jar"
	          fork="true" failonerror="true"
		  maxmemory="512m">
		  <sysproperty key="java.library.path" value="lib/jme"/>
                  <!--<sysproperty key="frontend" value="epFrontEnd"/>-->
		  <classpath refid="classpath.path"/>
	    </java>
    </target>
    <target name="run.retest"
	    description="Reruns all doctests from the last javadoc
	    run.  This is faster than run.junit, if you know you
	    haven't changed any tests."
	    depends="compile">
      <junit>
	<formatter type="plain"/>
	<test name="net.cscott.jdoctest.RerunJDoctests" />
	<classpath refid="classpath.path" />
	<assertions>
	  <enable package="net.cscott"/>
	</assertions>
      </junit>
    </target>
    <target name="run.junit"
	    description="Runs all doctests."
	    depends="compile,compile.index">
      <!-- fork="yes" is required in order to get the classpath right -->
    <java classname="net.cscott.sdr.AddDoctestRunner" failonerror="true">
      <classpath><path refid="classpath.path"/></classpath>
      <arg value="src/net/cscott/sdr/package-info.java" />
      <arg value="src/net/cscott/sdr/calls/package-info.java" />
      <arg value="src/net/cscott/sdr/calls/transform/package-info.java" />
    </java>
    <javac srcdir="${src_dir}"
		   destdir="${classes_dir}"
		   includes="net/cscott/sdr/**/package_info.java"
		   deprecation="on" source="1.7" target="1.7"
		   debug="true" includeantruntime="false">
		   <classpath refid="classpath.path" />
    </javac>
      <junit printsummary="yes" fork="yes" forkmode="once" haltonfailure="yes">
	<formatter type="plain" usefile="false"/>
	<test name="EDU.Washington.grad.gjb.cassowary.BreatheTest" />
	<test name="EDU.Washington.grad.gjb.cassowary.ClBranchAndBound" />
	<test name="EDU.Washington.grad.gjb.cassowary.ClTests" />
	<test name="net.cscott.sdr.package_info" /> <!-- package-info -->
	<test name="net.cscott.sdr.PMSD" />
	<test name="net.cscott.sdr.calls.Breather" />
	<test name="net.cscott.sdr.calls.CallDB" />
	<test name="net.cscott.sdr.calls.DancerPath" />
	<test name="net.cscott.sdr.calls.EvalPrim" />
	<test name="net.cscott.sdr.calls.Evaluator" />
	<test name="net.cscott.sdr.calls.ExactRotation" />
	<test name="net.cscott.sdr.calls.ExprList" />
	<test name="net.cscott.sdr.calls.Formation" />
	<test name="net.cscott.sdr.calls.FormationList" />
	<test name="net.cscott.sdr.calls.FormationListFast" />
	<test name="net.cscott.sdr.calls.FormationListJS" />
	<test name="net.cscott.sdr.calls.FormationListSlow" />
	<test name="net.cscott.sdr.calls.GeneralFormationMatcher" />
	<test name="net.cscott.sdr.calls.MatcherList" />
	<test name="net.cscott.sdr.calls.NamedTaggedFormation" />
	<test name="net.cscott.sdr.calls.Permutation" />
	<test name="net.cscott.sdr.calls.Position" />
	<test name="net.cscott.sdr.calls.PredicateList" />
	<test name="net.cscott.sdr.calls.Program" />
	<test name="net.cscott.sdr.calls.Rotation" />
	<test name="net.cscott.sdr.calls.StandardDancer" />
	<test name="net.cscott.sdr.calls.TaggedFormation" />
	<test name="net.cscott.sdr.calls.package_info" />  <!-- package-info -->
	<test name="net.cscott.sdr.calls.ast.Apply" />
	<test name="net.cscott.sdr.calls.ast.AstNode" />
	<test name="net.cscott.sdr.calls.ast.Expr" />
	<test name="net.cscott.sdr.calls.ast.If" />
	<test name="net.cscott.sdr.calls.grm.CompletionEngine" />
	<test name="net.cscott.sdr.calls.grm.Grm" />
	<test name="net.cscott.sdr.calls.lists.A2List" />
	<test name="net.cscott.sdr.calls.lists.BasicList" />
	<test name="net.cscott.sdr.calls.lists.C1List" />
	<test name="net.cscott.sdr.calls.lists.C4List" />
	<test name="net.cscott.sdr.calls.parser.AstParser" />
	<test name="net.cscott.sdr.calls.parser.CallFileBuilder" />
	<test name="net.cscott.sdr.calls.parser.CallFileLexer" />
	<test name="net.cscott.sdr.calls.parser.CallFileParser" />
	<test name="net.cscott.sdr.calls.transform.BeatCounter" />
	<test name="net.cscott.sdr.calls.transform.CallFileLoader" />
	<test name="net.cscott.sdr.calls.transform.Finish" />
	<test name="net.cscott.sdr.calls.transform.Fractional" />
	<test name="net.cscott.sdr.calls.transform.PartsCounter" />
	<test name="net.cscott.sdr.calls.transform.RemoveIn" />
	<test name="net.cscott.sdr.calls.transform.package_info" />  <!-- package-info -->
	<test name="net.cscott.sdr.toolbox.DWResolver" />
	<test name="net.cscott.sdr.util.Bezier" />
	<test name="net.cscott.sdr.util.Box" />
	<test name="net.cscott.sdr.util.LL" />
	<test name="net.cscott.sdr.util.ListUtils" />
	<test name="net.cscott.sdr.util.Tools" />
	<classpath refid="classpath.path" />
	<assertions>
	  <enable package="net.cscott"/>
	</assertions>
      </junit>
    </target>

    <!-- runs a javascript shell for interactive debugging -->
    <!-- however, ant insists on redirecting stdin/out, which is unpleasant-->
    <target name="run.shell"
	    description="Runs a javascript shell, for development and debugging."
	    depends="jar">
      <java classname="org.mozilla.javascript.tools.shell.Main"
	    fork="true" failonerror="true">
        <arg value="-version" /><arg value="170" />
	<classpath>
	  <fileset dir=".">
	    <include name="sdr.jar" />
	  </fileset>
	  <!-- the jline library is optional; it just nicer line
	  editing.  It's apparently unfriendly to Eclipse's console,
	  though. -->
	  <fileset dir="lib/dev">
	    <include name="jline*.jar" />
	  </fileset>
	  <fileset dir="lib/dev/jdoctest">
	    <include name="rhino*.jar"/>
	  </fileset>
	  <path refid="classpath.path"/>
	</classpath>
      </java>
    </target>


    <!-- ********* Assemble the index of tests ********* -->
    <target name="compile.index"
	    description="Assemble the index of tests."
	    depends="compile.base">
      <java classname="net.cscott.sdr.PMSD" failonerror="true"
	    output="resources/net/cscott/sdr/tests/index~" >
	<arg value="resources/net/cscott/sdr/tests/index" />
	<classpath>
	  <path refid="classpath.path"/>
        </classpath>
      </java>
      <if>
	<filesmatch file1="resources/net/cscott/sdr/tests/index~"
		    file2="resources/net/cscott/sdr/tests/index" />
	<then>
	  <delete file="resources/net/cscott/sdr/tests/index~" />
	</then>
	<else>
	  <move file="resources/net/cscott/sdr/tests/index~"
		tofile="resources/net/cscott/sdr/tests/index" />
	  <copy todir="${classes_dir}">
            <fileset dir="${resources_dir}" />
	  </copy>
	</else>
      </if>
    </target>

    <!-- ********* Build the natural-language grammars. ********* -->
    <target name="compile.grm"
	    description="Build the natural-langauge grammars."
	    depends="compile.base">
	    <java classname="net.cscott.sdr.calls.grm.BuildGrammars"
	          fork="true" failonerror="true">
		  <!-- enable assertions when building grammars -->
		  <jvmarg value="-ea:net.cscott..." />
                  <!-- needs a decent amount of heap space -->
		  <jvmarg value="-Xmx256M"/>
                  <classpath>
		    <!-- dictionary source files are found in lib/sphinx -->
		    <pathelement location="lib/sphinx" />
		    <path refid="classpath.path"/>
                  </classpath>
	    </java>
	    <for param="grammar.file">
	      <outofdate>
		<sourcefiles>
		  <fileset dir="src/net/cscott/sdr/calls/lists/"
			   includes="*.g" />
		</sourcefiles>
		<mapper type="glob" from="*.g" to="*Parser.java" />
		<mapper type="glob" from="*.g" to="*Lexer.java" />
	      </outofdate>
	      <sequential>
		<antlr3 target="@{grammar.file}"
			conversiontimeout="10000">
		  <classpath refid="classpath.path" />
		</antlr3>
		<java classname="net.cscott.sdr.calls.grm.AntlrPostProcessor"
                      failonerror="true">
		  <arg value="@{grammar.file}" />
		  <classpath>
		    <path refid="classpath.path"/>
		  </classpath>
		</java>
	      </sequential>
	    </for>
	    <!-- build newly-generated grammars -->
	    <javac srcdir="${src_dir}"
		   destdir="${classes_dir}"
		   includes="net/cscott/sdr/calls/lists/*.java"
		   excludes="**/package?info.java"
		   deprecation="on" source="1.7" target="1.7"
		   debug="true" includeantruntime="false">
                   <compilerarg value="-Xlint:unchecked"/>
		   <classpath refid="classpath.path" />
	    </javac>
	    <copy todir="${classes_dir}">
              <fileset dir="${resources_dir}" />
	    </copy>
    </target>
    <target name="clean.grm" depends="init"
	    description="Remove generated natural language grammars">
        <delete>
	  <fileset dir="resources/net/cscott/sdr/recog/"
		   includes="*.gram" excludes="sdr.gram menu.gram" />
	  <fileset dir="resources/net/cscott/sdr/recog/"
		   includes="sdrdict" />
	  <fileset dir="src/net/cscott/sdr/calls/lists/"
		   includes="*Grammar.g *Grammar__.g *.tokens
			     *GrammarLexer.java *GrammarParser.java
                             *Grm.java" />
	</delete>
    </target>

    <!-- ********* Build the optimized FormationList. ********** -->
    <target name="compile.flf"
	    description="Build the optimized FormationList."
	    depends="compile.base">
	    <java classname="net.cscott.sdr.calls.FormationListSlow"
		  fork="true" failonerror="true">
		  <jvmarg value="-ea:net.cscott..." />
		  <arg value="src/net/cscott/sdr/calls/FormationListFast.java"/>
                  <classpath>
		    <path refid="classpath.path"/>
                  </classpath>
	    </java>
	    <!-- build newly-generated FormationListFast -->
	    <javac srcdir="${src_dir}"
		   destdir="${classes_dir}"
		   includes="net/cscott/sdr/calls/FormationListFast.java"
		   deprecation="on" source="1.7" target="1.7"
		   debug="true" includeantruntime="false">
                   <compilerarg value="-Xlint:unchecked"/>
		   <classpath refid="classpath.path" />
	    </javac>
    </target>
    <target name="clean.flf"
	    description="Remove optimized FormationList">
      <copy file="src/net/cscott/sdr/calls/FormationListFast.stub"
	    tofile="src/net/cscott/sdr/calls/FormationListFast.java"
            overwrite="true" />
    </target>

    <!-- *********  Bundle up all files for distribution ******** -->
    <target name="dist" depends="jar,javadoc">
      <!-- check various conditions to ensure we don't release with
           debugging code lying around. -->
      <!-- check javadoc access level -->
      <fail message="javadoc.access should be 'protected' for a release">
	<condition>
	  <not>
            <equals arg1="${javadoc.access}" arg2="protected" />
	  </not>
        </condition>
      </fail>
      <!-- check that repo is clean and committed -->
      <exec executable="git" resultproperty="git1.exit">
	<arg value="diff"/>
	<arg value="--shortstat"/>
	<arg value="--exit-code"/>
      </exec>
      <fail message="git repo is not clean">
	<condition>
	  <isfailure code="${git1.exit}" />
	</condition>
      </fail>
      <exec executable="git" resultproperty="git2.exit">
	<arg value="diff"/>
	<arg value="--cached"/>
	<arg value="--shortstat"/>
	<arg value="--exit-code"/>
      </exec>
      <fail message="git repo is not fully committed">
	<condition>
	  <isfailure code="${git2.exit}" />
	</condition>
      </fail>
      <!-- check dev settings -->
      <fail message="some DevSettings are true (turn off before release)">
	<condition>
	  <isfileselected file="${src_dir}/net/cscott/sdr/DevSettings.java">
	    <contains text="true" casesensitive="true" />
	  </isfileselected>
	</condition>
      </fail>

      <!-- okay! let's make the dist! -->
      <delete file="ChangeLog" />
      <exec executable="git" output="ChangeLog">
	<arg value="log" />
	<arg value="--stat" />
	<arg value="-C" /> <!-- "-C -C" is nice, but it takes 2m to run! -->
      </exec>
      <exec executable="git" failonerror="true">
	<arg value="archive"/>
	<arg value="--prefix=${package}-${version}/"/>
	<arg value="--output=${package}-${version}-git.tar"/>
	<arg value="HEAD" />
      </exec>
      <tar destfile="${package}-${version}.tar.gz"
	   compression="gzip" longfile="gnu" >
	<!-- include all git-controlled files -->
	<tarfileset src="${package}-${version}-git.tar"
                    excludes="pax_global_header" />
	<!-- include some generated files -->
        <tarfileset dir="api" prefix="${package}-${version}/api" />
        <tarfileset dir="." prefix="${package}-${version}"
		    includes="ChangeLog sdr.jar sdr.jnlp" />
        <tarfileset dir="src" prefix="${package}-${version}/src"
                    includes="net/cscott/sdr/Version.java
                              net/cscott/sdr/calls/lists/AllGrm.java
                              net/cscott/sdr/calls/lists/*.g
                              net/cscott/sdr/calls/lists/*GrammarLexer.java
                              net/cscott/sdr/calls/lists/*GrammarParser.java
                              net/cscott/sdr/calls/parser/AstLexer.java
                              net/cscott/sdr/calls/parser/AstParser.java
                              net/cscott/sdr/calls/parser/CallFileLexer.java
                              net/cscott/sdr/calls/parser/CallFileParser.java
                              net/cscott/sdr/calls/parser/CallFileBuilder.java
			      **/*.tokens" />
        <tarfileset dir="resources" prefix="${package}-${version}/resources"
                    includes="net/cscott/sdr/AUTHORS
                              net/cscott/sdr/COPYING
                              net/cscott/sdr/recog/Basic.gram
                              net/cscott/sdr/recog/Mainstream.gram
                              net/cscott/sdr/recog/Plus.gram
                              net/cscott/sdr/recog/A?.gram
                              net/cscott/sdr/recog/C?.gram
                              net/cscott/sdr/recog/C3?.gram
                              net/cscott/sdr/recog/sdrdict" />
        <tarfileset dir="doc" prefix="${package}-${version}/doc"
                    includes="calldefs.pdf" />
      </tar>
      <delete file="${package}-${version}-git.tar" />
    </target>
        
    <!-- **************** LaTex stuff ************* -->
    <target name="compile.tex"
            description="Build LaTeX documentation">
        <exec dir="${basedir}/doc" executable="pdflatex"
              output="${basedir}/doc/calldefs.run1.log">
          <arg value="calldefs"/>
        </exec>
        <exec dir="${basedir}/doc" executable="pdflatex"
              output="${basedir}/doc/calldefs.run2.log">
          <arg value="calldefs"/>
        </exec>
    </target>
    <target name="clean.tex"
            description="Remove LaTeX generated files">
        <delete>
	  <fileset dir="${basedir}/doc"
		   includes="*.pdf *.dvi *.aux *.log" />
	</delete>
    </target>

    <!-- **************** GWT/GAE web UI stuff ************* -->
    <target name="compile.jdo" depends="compile"
	    description="JDO-enhance the SDRweb web server">
      <!-- sync up war classes -->
      <copy todir="war/WEB-INF/classes">
	<fileset dir="${classes_dir}">
          <!-- save space to fit into the GAE limits -->
	  <exclude name="net/cscott/sdr/sound/**/*" />
	  <exclude name="net/cscott/sdr/recog/**/*" />
	  <!-- compress all the definition/grammar files -->
	  <exclude name="net/cscott/sdr/calls/lists/*.class" />
	</fileset>
	<fileset dir="${src_dir}" includes="META-INF/**/*" />
	<fileset dir="${src_dir}" includes="log4j.properties" />
	<fileset dir="${src_dir}" includes="**/*.gwt.xml" />
	<fileset dir="${src_dir}" includes="net/cscott/sdr/webapp/**/*.png" />
	<fileset dir="${src_dir}" includes="net/cscott/sdr/webapp/**/*.ico" />
      </copy>
      <jar destfile="war/WEB-INF/lib/sdrweb.jar" update="true"
           basedir="${classes_dir}"
	   includes="net/cscott/sdr/calls/lists/*.class" />
      <!-- move library files into war/WEB-INF/lib -->
      <copy todir="war/WEB-INF/lib">
	<fileset dir="${lib_dir}"
		 includes="antlr-runtime-*.jar commons-lang-*.jar jutil.jar"/>
	<fileset dir="${lib_dir}/dev"
		 includes="junit-*.jar" />
      </copy>
      <!-- compile GAE stuff -->
      <javac srcdir="${src_dir}" destdir="war/WEB-INF/classes"
	     includes="net/cscott/sdr/webapp/server/**/*.java"
	     deprecation="on" source="1.7" target="1.7" debug="true"
	     includeantruntime="false">
	<classpath>
	  <pathelement location="war/WEB-INF/classes" />
	  <fileset dir="war/WEB-INF/lib" includes="*.jar"/>
	  <path refid="gae.path" />
	  <path refid="gwt.path" />
	</classpath>
      </javac>
      <enhance failonerror="true">
	<classpath>
	  <pathelement location="war/WEB-INF/classes" />
	  <path refid="classpath.path" />
	  <path refid="gae.path" />
	</classpath>
	<fileset dir="war/WEB-INF/classes"
		 includes="net/cscott/sdr/webapp/**/*.class"/>
      </enhance>
    </target>

    <target name="compile.gwt" depends="compile.jdo"
	    description="Compile web UI to javascript">
      <java failonerror="true" fork="true"
	    classname="com.google.gwt.dev.Compiler">
	<classpath>
          <pathelement location="src"/>
          <pathelement location="src/net/cscott/sdr/webapp/client/thunk"/>
          <pathelement location="war/WEB-INF/classes"/>
          <path refid="classpath.path"/>
          <path refid="gwt.path"/>
	</classpath>
	<!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
	<jvmarg value="-Xmx256M"/>
	<!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
	<arg value="-strict"/>
	<arg value="net.cscott.sdr.webapp.SDRweb"/>
      </java>
    </target>
    <target name="clean.gwt"
	    description="Delete generated files from JDO/GWT compilation">
      <delete dir="war/sdrweb" />
      <delete dir="war/sdr" />
      <delete dir="war/WEB-INF/classes" />
      <delete dir="war/WEB-INF/deploy" />
    </target>

    <target name="run.devmode" depends="compile.jdo"
	    description="Run web UI development mode">
      <!-- start up dev mode -->
      <java failonerror="true" fork="true"
	    classname="com.google.gwt.dev.DevMode">
	<classpath>
	  <!-- put resources/ on the classpath for ease of
	       development: we can edit the call definitions and
	       reload without rebuilding the .jar -->
	  <pathelement location="resources"/>
	  <pathelement location="src"/> <!-- for GWT source files -->
          <pathelement location="src/net/cscott/sdr/webapp/client/thunk"/>
	  <pathelement location="war/WEB-INF/classes" /> <!-- for enhanced -->
	  <path refid="classpath.path" />
	  <path refid="gwt.path" />
	</classpath>
	<jvmarg value="-Xmx256M"/>
	<arg value="-startupUrl"/>
	<arg value="SDRweb.html"/>
	<arg value="-war"/>
	<arg value="war"/>
	<!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
	<!--
	<arg value="-logdir"/><arg value="warlog"/>
	<arg value="-logLevel"/><arg value="ALL"/>
	-->
	<arg value="net.cscott.sdr.webapp.SDRweb"/>
      </java>
    </target>

    <target name="gae.update" depends="compile.gwt"
	    description="Uploads the SDR web UI to App Engine.">
      <appcfg action="update" war="war" />
    </target>

    <!-- **************** java web start stuff ************* -->

    <!-- generate signing key; only needs to be done once -->
    <target name="sdr.keystore" depends="init" >
      <genkey alias="sdr" keystore="${basedir}/sdr.keystore"
              storepass="${keystore.password}" validity="3650" >
        <dname>
        <param name="CN" value="C. Scott Ananian"/>
        <param name="O"  value="cscott.net"/>
        <param name="L"  value="Somerville"/>
        <param name="ST"  value="Massachusetts"/>
        <param name="C"  value="US"/>
        </dname>
      </genkey>
    </target>

    <!-- combine our libraries into one huge library -->
    <target name="exported-jar" depends="init" >
      <property name="e" value="${basedir}/exported"/>
      <outofdate>
	<sourcefiles>
          <fileset refid="jar.set" />
	</sourcefiles>
	<targetfiles path="${basedir}/${ant.project.name}-libs.jar" />
	<sequential>
      <delete dir="${e}" />
      <mkdir dir="${e}" />
      <for param="jar.file">
        <fileset refid="jar.set" />
	<sequential>
	  <unjar dest="${e}" src="@{jar.file}" />
	</sequential>
      </for>
      <delete dir="${e}/META-INF" /> <!-- remove any old signatures -->
      <jar destfile="${basedir}/${ant.project.name}-libs-unpack.jar"
           update="true" basedir="${e}" />
      <delete dir="${e}" />
      <!-- repack jar, so that we can sign & pack w/o invalidating the sig -->
      <pack200 src="${basedir}/${ant.project.name}-libs-unpack.jar"
               destfile="${basedir}/${ant.project.name}-libsX.jar"
	       modificationtime="latest"
	       stripdebug="true" effort="9" gzipoutput="false"
               repack="true" />
      <delete file="${basedir}/${ant.project.name}-libs-unpack.jar" />
      <!-- workaround to:
	   http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5078608
      -->
      <sign-one-jar file="sdr-libsX.jar" />
      <pack200 src="${basedir}/${ant.project.name}-libsX.jar"
               destfile="${basedir}/${ant.project.name}-libs.jar"
	       modificationtime="latest"
	       stripdebug="true" effort="9" gzipoutput="false"
               repack="true" />
      <delete file="${basedir}/${ant.project.name}-libsX.jar" />
      <delete file="${basedir}/${ant.project.name}-libsX.jar.MD5" />
</sequential>
</outofdate>
    </target>
    <target name="sign-jars" depends="init,jar,exported-jar">
      <for param="sign.file" parallel="true">
        <fileset dir=".">
          <include name="sdr.jar" />
          <include name="sdr-libs.jar" />
	  <include name="lib/jme/jnlp/*.jar" />
        </fileset>
	<sequential>
	  <sign-one-jar file="@{sign.file}" />
	</sequential>
      </for>
    </target>
    <macrodef name="sign-one-jar">
      <attribute name="file" default="NOT SET"/>
      <sequential>
	<if>
          <checksum file="@{file}" />
          <else>
            <signjar alias="sdr" keystore="${basedir}/sdr.keystore"
		     storepass="${keystore.password}" jar="@{file}" />
            <checksum  file="@{file}" forceOverwrite="yes" />
          </else>
	</if>
      </sequential>
    </macrodef>
</project>
