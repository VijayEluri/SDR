<?xml version="1.0" encoding="UTF-8"?>
<project name="sdr" basedir="." default="none">

<description>
Square Dance Revolution build file.
</description>
<property name="package" value="sdr" />
<property name="package_topdir" value="net/cscott/sdr" />
<property name="version" value="0.5" /> <!-- change version # here! -->

    <taskdef resource="net/sf/antcontrib/antlib.xml"
	     classpath="lib/dev/ant-contrib.jar" />
    <taskdef name="pack200"
             classname="org.jdesktop.deployment.ant.pack200.Pack200Task"
             classpath="lib/dev/deployment-ant-pack200-1.0beta.jar" />
    <taskdef resource="org/apache/tools/ant/antlr/antlib.xml"
             classpath="lib/dev/antlr3-ant.jar" />
    <!-- cobertura integration -->
    <property name="cobertura.dir" value="${basedir}/lib/dev/cobertura" />
    <path id="cobertura.classpath">
      <fileset dir="${cobertura.dir}">
        <include name="**/*.jar" />
      </fileset>
    </path>
    <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

    <!-- define some variables for the script -->
    <target name="init">
      <!-- load the variable definitions from another file -->
      <property file="build.properties" />
      <!-- define other variables -->
      <property name="api_dir"            value="${basedir}/api"/>
      <property name="lib_dir"            value="${basedir}/lib"/>
      <property name="src_dir"            value="${basedir}/src"/>
      <property name="classes_dir"	value="${basedir}/bin"/>
      <property name="instrumented_dir" value="${basedir}/bin.cover" />
      <property name="resources_dir"	value="${basedir}/resources"/>
      <!-- set the classpath -->
      <fileset id="jar.set" dir="lib">
        <include name="*.jar" />
	<include name="sphinx/*.jar" />
	<include name="jme/jme*.jar" />
	<include name="jme/jinput.jar jme/jogg*.jar jme/jorbis*.jar" />
	<include name="jme/lwjgl.jar" />
      </fileset>
      <path id="classpath.path">
        <pathelement path="${classes_dir}"/>
	<fileset refid="jar.set" />
        <fileset dir="lib/dev"> <!-- for development only -->
          <include name="*.jar" />
        </fileset>
      </path>
    </target>

    <target name="none">
            <echo>Type 'ant -projecthelp' for possible targets.</echo>
    </target>

    <!-- delete generated files -->
    <target name="clean" depends="init"
            description="Removes the generated class files and javadoc">
        <!-- version numbers -->
        <delete file="src/net/cscott/sdr/Version.java" />
        <delete file="sdr.jnlp" />
	<!-- classes and api docs -->
	<delete dir="${classes_dir}" />
	<delete dir="${api_dir}" />
	<delete file="${basedir}/${ant.project.name}-src.jar" />
	<delete file="${basedir}/${ant.project.name}.jar" />
	<delete file="${basedir}/${ant.project.name}.jar.MD5" />
	<!-- coverage information -->
	<delete dir="${instrumented_dir}" />
	<!-- eclipse writes here, so as not to fight with ant -->
	<delete dir="bin.eclipse" />
	<!-- from dist targets -->
	<delete>
	  <fileset dir="${basedir}"
		   includes="${ant.project.name}-libs.jar*
			     ${ant.project.name}-libs-unpack.jar
			     ChangeLog" />
	</delete>
    </target>
    <target name="clean.cobertura" depends="init">
      <delete file="${instrumented_dir}/cobertura.ser" />
    </target>
    <target name="maint-clean" depends="init,clean,clean.grm"
	    description="Removes ANTLR generated files">
        <delete>
	  <fileset dir="src/net/cscott/sdr/calls/transform/"
		   includes="CallFileBuilder.java CallFileParser.java
			     CallFileLexer.java CallFile__.g *.tokens"
		   />
	</delete>
    </target>

    <!-- make the version file -->
    <target name="chk-version">
	    <!-- description="Generates Version.java.tmp and sets the
			 version.uptodate property to false if it should
			 be moved to replace Version.java" -->
      <copy file="src/${package_topdir}/Version.java.in"
            tofile="src/${package_topdir}/Version.java.tmp" >
        <filterset>
         <filter token="VERSION" value="${version}"/>
         <filter token="PACKAGE" value="${package}"/>
        </filterset>
      </copy>
      <condition property="version.uptodate">
	<filesmatch file1="src/${package_topdir}/Version.java"
		    file2="src/${package_topdir}/Version.java.tmp" />
      </condition>
    </target>
    <target name="move-version" depends="chk-version" unless="version.uptodate">
      <!-- Renames Version.java.tmp iff it is different from Version.java-->
      <!-- be careful only to overwrite Verson.java if there are changes -->
      <move file="src/${package_topdir}/Version.java.tmp"
	    tofile="src/${package_topdir}/Version.java" />
    </target>
    <target name="version"
	    description="Generates Version.java with the correct
			 version number."
	    depends="move-version">
      <!-- clean up the temp file in any case -->
      <delete file="src/${package_topdir}/Version.java.tmp" />
      <!-- put version in the jnlp file -->
      <copy file="sdr.jnlp.in"
            tofile="sdr.jnlp" >
        <filterset>
         <filter token="VERSION" value="${version}"/>
        </filterset>
      </copy>
    </target>
    <target name="echo-version" depends="init"
            description="Print the current version number." >
      <echo message="Current version is: ${version}" />
    </target>

    <!-- compile the source code -->
    <target name="compile.base" depends="init,version"
            description="Compiles the code in ${src_dir} to ${classes_dir}">
    <antlr3 target="src/net/cscott/sdr/calls/ast/Ast.g">
		<classpath refid="classpath.path" />
    </antlr3>
    <antlr3 target="src/net/cscott/sdr/calls/transform/CallFile.g">
		<classpath refid="classpath.path" />
    </antlr3>
    <antlr3 target="src/net/cscott/sdr/calls/transform/CallFileBuilder.g"
            libdirectory="src/net/cscott/sdr/calls/transform" >
		<classpath refid="classpath.path" />
    </antlr3>
	    <mkdir dir="${classes_dir}" />
	    <javac srcdir="${src_dir}"
		   destdir="${classes_dir}"
		   excludes="**/package-info.java"
		   deprecation="on" source="1.5" target="1.5" debug="true">
                   <compilerarg value="-Xlint:unchecked"/>
		   <classpath refid="classpath.path" />
	    </javac>
            <copy todir="${classes_dir}">
              <fileset dir="${resources_dir}" />
            </copy>
    </target>

    <!-- run the javadoc tool on the source code -->
    <target name="chk-javadoc" depends="init" >
      <uptodate property="javadoc.notRequired"
                targetfile="${api_dir}/index.html">
        <srcfiles dir="${src_dir}" includes="**/*.java **/*.html" />
      </uptodate>
    </target>
    <target name="javadoc"
	    depends="compile,instrument,chk-javadoc" unless="javadoc.notRequired"
            description="Generates javadoc in ${api_dir}">
        <!-- copy call lists to doc-files -->
        <mkdir dir="${src_dir}/net/cscott/sdr/calls/lists/doc-files" />
        <copy todir="${src_dir}/net/cscott/sdr/calls/lists/doc-files">
                <fileset dir="${resources_dir}/net/cscott/sdr/calls/lists"
                         includes="*.calls" />
        </copy>
	<mkdir dir="${api_dir}" />
	<!-- XXX: change access="private" to access="protected" for release -->
	<!-- XXX: use access="private" for testing -->
	<javadoc sourcepath="${src_dir}"
		 packagenames="net.cscott.*"
		 destdir="${api_dir}"
                 windowtitle="SDR ${version} documentation"
		 doctitle="Square Dance Revolution!"
                 header="${ant.project.name} ${version}"
		 overview="${src_dir}/overview.html"
		 source="1.5"
                 access="protected" nodeprecated="false"
		 failonerror="true"
                 author="true" use="true" version="true" breakiterator="true">
	  <bottom><![CDATA[
             Copyright &copy; 2006-2009 C. Scott Ananian
<script type="text/javascript">
window['JAVADOC_BASE'] = '{@docRoot}';
</script>
<script type="text/javascript" src="{@docRoot}/doc-files/loadpretty.js">
</script>
          ]]></bottom>
		<classpath refid="classpath.path" />
		<taglet name="net.cscott.jdoctest.JDoctest">
		  <path>
		    <fileset dir="lib/dev/jdoctest">
		      <include name="*.jar"/>
		    </fileset>
		    <pathelement path="${instrumented_dir}"/>
		    <path refid="classpath.path" />
		    <path refid="cobertura.classpath" />
		  </path>
		</taglet>
		<!-- write coverage info to cobertura.ser -->
		<arg value="-J-Dnet.sourceforge.cobertura.datafile=${instrumented_dir}/cobertura.ser" />
		<!-- write tests to api/tests -->
		<arg value="-J-Dnet.cscott.jdoctest.output=${api_dir}/tests" />
		<!-- enable assertions when evaluating doctests -->
		<arg value="-J-ea:net.cscott..." />
            <link href="http://jakarta.apache.org/commons/lang/api-release/"/>
            <link href="http://cmusphinx.sourceforge.net/sphinx4/javadoc/"/>
            <link href="http://www.jmonkeyengine.com/doc/"/>
            <link href="http://cscott.net/Projects/JUtil/jutil-latest/doc/"/>
            <!--<link href="http://java.sun.com/products/java-media/speech/forDevelopers/jsapi-doc/"/>-->
            <link href="http://java.sun.com/javase/6/docs/api"/>
            <link href="http://www.antlr2.org/javadoc/"/>
	</javadoc>
	<!-- generate coverage report -->
	<cobertura-report format="html"
			  destdir="${api_dir}/coverage"
			  srcdir="${src_dir}"
			  datafile="${instrumented_dir}/cobertura.ser" />
    </target>

    <!-- export the project as a jar -->
    <target name="jar" depends="compile"
            description="Exports the project as a jar">
	<jar destfile="${basedir}/${ant.project.name}.jar"
             update="true" manifest="${basedir}/${ant.project.name}.Manifest"> 
		<fileset dir="${classes_dir}" />
	</jar>
    </target>
    <target name="src-jar" depends="compile"
            description="Exports the project's source code as a jar">
        <!-- note that we depend on compile to ensure the grammars are
             generated -->
	<jar destfile="${basedir}/${ant.project.name}-src.jar"
             update="true">
		<fileset dir="${src_dir}" />
	</jar>
    </target>

    <!-- most ant scripts have a build target -->
    <target name="build" depends="jar" description="Alias for jar target"/>
    <!-- build classes and grammars -->
    <target name="compile" depends="compile.base,compile.grm" />

    <!-- create instrumented binaries for cobertura -->
    <target name="instrument" depends="compile,clean.cobertura"
	    description="Instrument classes for coverage tool">
      <cobertura-instrument todir="${instrumented_dir}"
			    datafile="${instrumented_dir}/cobertura.ser">
	<!-- we get an over-size method error in class file
	     net/cscott/sdr/calls/transform/CallFileLexer$DFA9, so
	     we'll ignore it. -->
	<fileset dir="${classes_dir}">
          <include name="**/*.class" />
	  <exclude name="**/CallFileLexer*.class" />
	</fileset>
      </cobertura-instrument>
    </target>

    <!-- ********************************************************** -->
    <!-- *                                                        * -->
    <!-- * Runs the application.                                  * -->
    <!-- *                                                        * -->
    <!-- ********************************************************** -->
    <target name="run"
	    description="Runs the application."
	    depends="jar">
	    <java jar="${basedir}/${ant.project.name}.jar"
	          fork="true"
		  maxmemory="256m">
		  <sysproperty key="java.library.path" value="lib/jme"/>
                  <!--<sysproperty key="frontend" value="epFrontEnd"/>-->
		  <classpath refid="classpath.path"/>
	    </java>
    </target>
    <!-- runs a self-test -->
    <target name="run.test"
	    description="Runs a self-test, for development purposes."
	    depends="jar">
	    <java classname="net.cscott.sdr.calls.Test"
	          fork="true">
                  <classpath>
                    <fileset dir=".">
                      <include name="sdr.jar"/>
                    </fileset>
		    <path refid="classpath.path"/>
                  </classpath>
	    </java>
    </target>
    <!-- runs a javascript shell for interactive debugging -->
    <!-- however, ant insists on redirecting stdin/out, which is unpleasant-->
    <target name="run.shell"
	    description="Runs a javascript shell, for development and debugging."
	    depends="jar">
      <java classname="org.mozilla.javascript.tools.shell.Main"
	    fork="true">
	<classpath>
	  <fileset dir=".">
	    <include name="sdr.jar" />
	  </fileset>
	  <!-- the jline library is optional; it just nicer line
	  editing.  It's apparently unfriendly to Eclipse's console,
	  though. -->
	  <fileset dir="lib/dev">
	    <include name="jline*.jar" />
	  </fileset>
	  <fileset dir="lib/dev/jdoctest">
	    <include name="rhino*.jar"/>
	  </fileset>
	  <path refid="classpath.path"/>
	</classpath>
      </java>
    </target>


    <!-- ********* Build the natural-language grammars. ********* -->
    <target name="compile.grm"
	    description="Build the natural-langauge grammars."
	    depends="compile.base">
	    <java classname="net.cscott.sdr.calls.grm.BuildGrammars"
	          fork="true">
		  <!-- enable assertions when building grammars -->
		  <jvmarg value="-ea:net.cscott..." />
                  <classpath>
		    <path refid="classpath.path"/>
                  </classpath>
	    </java>
      <foreach target="build-one-grammar" param="grammar.file">
        <fileset dir="src/net/cscott/sdr/calls/lists/"
		 includes="*.g" />
      </foreach>
	    <!-- build newly-generated grammars -->
	    <javac srcdir="${src_dir}"
		   destdir="${classes_dir}"
		   excludes="**/package-info.java"
		   deprecation="on" source="1.5" target="1.5" debug="true">
                   <compilerarg value="-Xlint:unchecked"/>
		   <classpath refid="classpath.path" />
	    </javac>
    </target>
    <target name="build-one-grammar" depends="init">
        <antlr3 target="${grammar.file}">
		<classpath refid="classpath.path" />
        </antlr3>
    </target>

    <target name="clean.grm" depends="init"
	    description="Remove generated natural language grammars">
        <delete>
	  <fileset dir="resources/net/cscott/sdr/recog/"
		   includes="*.gram" excludes="sdr.gram" />
	  <fileset dir="src/net/cscott/sdr/calls/lists/"
		   includes="*Grammar.g *Grammar__.g *.tokens
			     *GrammarLexer.java *GrammarParser.java
                             *Grm.java" />
	</delete>
    </target>

    <!-- bundle up all files for distribution -->
    <target name="dist" depends="jar,javadoc">
      <delete file="ChangeLog" />
      <exec executable="git" output="ChangeLog">
	<arg value="log" />
	<arg value="--stat" />
	<arg value="-C" /> <!-- "-C -C" is nice, but it takes 2m to run! -->
      </exec>
      <tar destfile="${package}-${version}.tar.gz" compression="gzip">
        <tarfileset dir="api" prefix="${package}-${version}/api" />
        <tarfileset dir="src" prefix="${package}-${version}/src"
                    includes="**/*.java **/*.html **/*.java.in **/*.g
			      **/*.js **/*.css"
                    excludes="CVS" />
        <tarfileset dir="resources" prefix="${package}-${version}/resources"
                    excludes="CVS **/*~" />
        <tarfileset dir="lib" prefix="${package}-${version}/lib"
                    excludes="CVS **/*~" />
        <tarfileset dir="." prefix="${package}-${version}"
         includes="README AUTHORS COPYING ChangeLog NEWS sdr.Manifest
                   build.xml .antlr-eclipse .classpath .project .settings/**/*
		   run-shell.sh upload.sh **/.gitignore images/*.svg
                   notes.txt sdr.jar sample.build.properties sdr.jnlp.in" />
      </tar>
    </target>
        
    <!-- **************** java web start stuff ************* -->

    <!-- generate signing key; only needs to be done once -->
    <target name="sdr.keystore" depends="init" >
      <genkey alias="sdr" keystore="${basedir}/sdr.keystore"
                     storepass="${keystore.password}" validity="3650" >
        <dname>
        <param name="CN" value="C. Scott Ananian"/>
        <param name="O"  value="cscott.net"/>
        <param name="L"  value="Somerville"/>
        <param name="ST"  value="Massachusetts"/>
        <param name="C"  value="US"/>
        </dname>
      </genkey>
    </target>

    <!-- combine our libraries into one huge library -->
    <target name="chk-exported-jar" depends="init" >
      <uptodate property="exported.notRequired"
                targetfile="${basedir}/${ant.project.name}-libs.jar">
        <srcfiles refid="jar.set" />
      </uptodate>
    </target>
    <target name="exported-jar" depends="chk-exported-jar"
            unless="exported.notRequired" >
      <property name="e" value="${basedir}/exported"/>
      <delete dir="${e}" />
      <mkdir dir="${e}" />
      <foreach target="unpack-one-jar" param="jar.file">
        <fileset refid="jar.set" />
      </foreach>
      <delete dir="${e}/META-INF" /> <!-- remove any old signatures -->
      <jar destfile="${basedir}/${ant.project.name}-libs-unpack.jar"
           update="true" basedir="${e}" />
      <delete dir="${e}" />
      <!-- repack jar, so that we can sign & pack w/o invalidating the sig -->
      <pack200 src="${basedir}/${ant.project.name}-libs-unpack.jar"
               destfile="${basedir}/${ant.project.name}-libsX.jar"
	       modificationtime="latest"
	       stripdebug="true" effort="9" gzipoutput="false"
               repack="true" />
      <delete file="${basedir}/${ant.project.name}-libs-unpack.jar" />
      <!-- workaround to:
	   http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5078608
      -->
      <antcall target="sign-one-jar">
	<param name="sign.file" value="sdr-libsX.jar" />
      </antcall>
      <pack200 src="${basedir}/${ant.project.name}-libsX.jar"
               destfile="${basedir}/${ant.project.name}-libs.jar"
	       modificationtime="latest"
	       stripdebug="true" effort="9" gzipoutput="false"
               repack="true" />
      <delete file="${basedir}/${ant.project.name}-libsX.jar" />
      <delete file="${basedir}/${ant.project.name}-libsX.jar.MD5" />
    </target>
    <target name="unpack-one-jar" depends="init" >
      <property name="e" value="${basedir}/exported"/>
      <unjar dest="${e}" src="${jar.file}" />
    </target>
    <target name="sign-jars" depends="jar,exported-jar">
      <foreach target="sign-one-jar" param="sign.file">
        <fileset dir=".">
          <include name="sdr.jar" />
          <include name="sdr-libs.jar" />
	  <include name="lib/jme/jnlp/*.jar" />
        </fileset>
      </foreach>
    </target>
    <target name="sign-one-jar">
      <property file="build.properties" />
      <if>
        <checksum file="${sign.file}" />
        <else>
          <signjar alias="sdr" keystore="${basedir}/sdr.keystore"
    	       storepass="${keystore.password}" jar="${sign.file}" />
          <checksum  file="${sign.file}" forceOverwrite="yes" />
        </else>
      </if>
    </target>

</project>
