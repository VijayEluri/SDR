/** Parser for @CLASSNAME@ calls. */
grammar @CLASSNAME@Grammar;

options {
  //backtrack=true;
  memoize=true;
  // some phrases need a lot of lookahead:
  //   'square' 'thru' 'two' 'and' 'a' 'half' 'times'
  //   'dixie' 'style' 'to' 'a' 'wave'
  //   <fraction> <fraction> <fraction> the alter and circulate
  //   INT '/' INT INT '/' INT INT '/' INT 'the' 'alter' 'and' 'circulate'
  k=13;
/*
  charVocabulary = '\0'..'\177'; // ascii only
  testLiterals=true;
  caseSensitiveLiterals=false;
*/
}
@parser::header {
package net.cscott.sdr.calls.lists;
import net.cscott.sdr.calls.ast.*;
import net.cscott.sdr.util.*;
}
@lexer::header {
package net.cscott.sdr.calls.lists;
}
@lexer::members {
  // make sure errors are reported!
  @Override
  public void reportError(RecognitionException e) {
    throw new IllegalArgumentException(e);
  }
}

start returns [Expr r]
	: a=anything_list EOF { r=a; }
	;

anything_list returns [Expr r]
@init { List<Expr> l = new ArrayList<Expr>(); }
	// semicolons are just for ease of typing (not spoken)
	: a=anything { l.add(a); } (';' b=anything { l.add(b); } )*
	  {
	    r = (l.size() > 1)
                ? new Expr("and", l.toArray(new Expr[l.size()]))
	        : a;
	  }
	;

@RULES@

parenthesized_anything returns [Expr r]
	: '(' a=anything_list ')' { r=a; }
	;

people returns [Expr r]
	: a=genders {r=a;} | a=heads_or_sides {r=a;}
	| a=all {r=a;} | a=none {r=a;}
	;
heads_or_sides returns [Expr r]
        : 'heads' { r = Expr.literal("HEAD"); }
        | 'sides' { r = Expr.literal("SIDE"); }
        ;
two_select returns [Expr r]
        : a=head_or_side b=genders { r = new Expr("and", a, b); }
        | a=center_or_end b=genders { r = new Expr("and", a, b); }
        | 'very' 'centers' { r = Expr.literal("VERY_CENTER"); }
        | 'center' 'two' { r = Expr.literal("VERY_CENTER"); }
        | 'outside' 'two' { r = Expr.literal("OUTSIDE_2"); }
        ;
six_select returns [Expr r]
        : 'center' 'six' { r = Expr.literal("CENTER_6"); }
        | 'outside' 'six' { r = Expr.literal("OUTSIDE_6"); }
        ;
center_or_end returns [Expr r]
	: 'center' { r = Expr.literal("CENTER"); }
	| 'end' { r = Expr.literal("END"); }
	;
head_or_side returns [Expr r]
        : 'head' { r = Expr.literal("HEAD"); }
        | 'side' { r = Expr.literal("SIDE"); }
        ;
genders returns [Expr r]
	: a=boys {r=a;} | a=girls {r=a;}
	;
boys returns [Expr a]
@init { a = Expr.literal("BOY"); }
	: 'boys' | 'men' ;
girls returns [Expr a]
@init { a = Expr.literal("GIRL"); }
	: 'girls' | 'ladies';
all returns [Expr a]
@init { a = Expr.literal("ALL"); }
	: 'all' | 'everyone' | 'every' 'one' | 'everybody' | 'every' 'body';
none returns [Expr a]
@init { a = Expr.literal("NONE"); }
	: 'none' | 'no' 'one' | 'nobody' | 'no' 'body';
wave_select returns [Expr a]
	: 'centers' { a = Expr.literal("CENTER"); }
	| 'ends' { a = Expr.literal("END"); }
	;
anyone returns [Expr r]
	: a=people {r=a;} | a=wave_select {r=a;}
	| a=two_select {r=a;} | a=six_select {r=a;} ;
number returns [Expr a]
	: f=a_number { a = Expr.literal(f); }
	// hacks for typing (not spoken)
	| ( INT? INT '/' INT ) =>
	    w=integer? n=integer '/' d=integer
	  { a = Expr.literal($n.f.divide($d.f).add($w.f==null?Fraction.ZERO:$w.f)); }
	| i=integer
	  { a = Expr.literal($i.f); }
	;
a_number returns [Fraction f]
	: f1=a_digit 'and' f2=a_fraction { f=f1.add(f2); }
	| f1=a_digit {f=f1;}
	| f1=a_fraction {f=f1;}
	;
a_digit returns [Fraction f]
	: 'one' { f=Fraction.valueOf(1); }
	| 'two' { f=Fraction.valueOf(2); }
	| d=a_digit_greater_than_two { f=$d.f; }
	;
a_digit_greater_than_two returns [Fraction f]
	: 'three' { f=Fraction.valueOf(3); }
	| 'four' { f=Fraction.valueOf(4); }
	| 'five' { f=Fraction.valueOf(5); }
	| 'six' { f=Fraction.valueOf(6); }
	| 'seven' { f=Fraction.valueOf(7); }
	| 'eight' { f=Fraction.valueOf(8); }
	| 'nine' { f=Fraction.valueOf(9); }
	;

fraction returns [Expr a]
	: f=a_fraction { a = Expr.literal(f); }
	// hack for typing (not spoken)
	| n=integer '/' d=integer
	{ a = Expr.literal($n.f.divide($d.f)); }
	;
a_fraction returns [Fraction f]
	: ('a'|'one') 'half' { f=Fraction.valueOf(1,2); }
	| ('a'|'one') 'third' { f=Fraction.valueOf(1,3); }
	| ('a'|'one') 'quarter' { f=Fraction.valueOf(1,4); }
	| 'two' 'thirds' { f=Fraction.valueOf(2,3); }
	| 'two' 'quarters' { f=Fraction.valueOf(2,4); }
	| 'three' 'quarters' { f=Fraction.valueOf(3,4); }
	;
fragment
integer returns [Fraction f]
	: INT { f = Fraction.valueOf(Integer.valueOf($INT.text)); }
	;
INT	: ('0'..'9')+ ;

times returns [Expr a]
	: f=one_times { a=Expr.literal(f); }
	// hacks for typing (not spoken)
	// COMMENTED OUT BECAUSE INTRODUCES AMBIGUITIES WITH
	//  "square thru 3" / "breaker 3" etc.
	/*
	| ( INT? INT '/' INT ('times'|'time') ) =>
	  w=integer? n=integer '/' d=integer ('times'|'time')
	| i=integer ('times'|'time')
	*/
	;
fragment
one_times returns [Fraction f]
	: 'once' 'and' f2=a_fraction { f=Fraction.valueOf(1); if (f2!=null) f=f.add(f2); }
	| 'twice' ('and' f2=a_fraction)? { f=Fraction.valueOf(2); if (f2!=null) f=f.add(f2); }
	| f1=a_digit_greater_than_two ('and' f2=a_fraction)? 'times' { f=f1; }
	;

WS  :   (   ' '
        |   '\t'
        |   '\r'
        |   '\n'
        )+
        { $channel=HIDDEN; }
    ;

// this is a temporary hack
// we need to tweak the grammar to extract concepts auto-magically.
// XXX in order to disambiguate "initially 1/4 stable mix" we'll
//     probably have to make "do" before "n=fraction" mandatory, same as we do
//     for the _fractional production for calls.
concept returns [Expr a]
        : 'tandem' { a = Expr.literal("tandem"); }
        | 'as' 'couples' { a = Expr.literal("as couples"); }
        | 'siamese' { a = Expr.literal("siamese"); }
        | 'concentric' { a = Expr.literal("concentric"); }
        | 'cross' 'concentric' { a = Expr.literal("cross concentric"); }
        // _curry makes a function-of-one-argument
        // (actually, a function of N arguments, where N is the number of
        //  * wildcards in the argument)
        | n=times { a = new Expr("_curry", Expr.literal("_fractional"), n, new Expr("_arg", Expr.literal("0"))); }
        | 'do'? n=fraction { a = new Expr("_curry", Expr.literal("_fractional"), n, new Expr("_arg", Expr.literal("0"))); }
        | mc=metaconcept b=concept { a = new Expr("_curry", mc, b, new Expr("_arg", Expr.literal("0"))); }
        ;
metaconcept returns [Expr a]
        : 'initially'      { a = Expr.literal("initially"); }
        | 'finally'        { a = Expr.literal("finally"); }
        | 'oddly'          { a = Expr.literal("oddly"); }
        | 'evenly'         { a = Expr.literal("evenly"); }
        | 'echo'           { a = Expr.literal("echo"); }
        | 'reverse' 'echo' { a = Expr.literal("reverse echo"); }
        ;
