grammar @CLASSNAME@Grammar;

options {
  backtrack=true;
  memoize=true;
/*
  charVocabulary = '\0'..'\177'; // ascii only
  testLiterals=true;
  caseSensitiveLiterals=false;
*/
}
@parser::header {
package net.cscott.sdr.calls.lists;
import net.cscott.sdr.calls.ast.*;
import net.cscott.sdr.util.*;
}
@lexer::header {
package net.cscott.sdr.calls.lists;
}

start 	:	anything EOF ;

@RULES@

people returns [Apply r]
	: a=genders {r=a;} | a=all {r=a;}
	;
genders returns [Apply r]
	: a=boys {r=a;} | a=girls {r=a;}
	;
boys returns [Apply a]
@init { a = Apply.makeApply("BOY"); }
	: 'boys' | 'men' ;
girls returns [Apply a]
@init { a = Apply.makeApply("GIRL"); }
	: 'girls' | 'ladies';
all returns [Apply a]
@init { a = Apply.makeApply("ALL"); }
	: 'all' | 'everyone' | 'every' 'one' | 'every' 'body';
wave_select returns [Apply a]
	: 'centers' { a = Apply.makeApply("centers"); }
	| 'ends' { a = Apply.makeApply("ends"); }
	;
anyone returns [Apply r]
	: a=people {r=a;} | a=wave_select {r=a;} ;
number returns [Apply a]
	: f=a_number { a = Apply.makeApply(f.toProperString()); }
	;
a_number returns [Fraction f]
	: f1=a_digit 'and' f2=a_fraction { f=f1.add(f2); }
	| f1=a_digit {f=f1;}
	| f1=a_fraction {f=f1;}
	// hack for typing (not spoken)
	| w=integer n=integer '/' d=integer { f=Fraction.valueOf(w, n, d); }
	;
a_digit returns [Fraction f]
	: 'one' { f=Fraction.valueOf(1); }
	| 'two' { f=Fraction.valueOf(2); }
	| 'three' { f=Fraction.valueOf(3); }
	| 'four' { f=Fraction.valueOf(4); }
	| 'five' { f=Fraction.valueOf(5); }
	| 'six' { f=Fraction.valueOf(6); }
	| 'seven' { f=Fraction.valueOf(7); }
	| 'eight' { f=Fraction.valueOf(8); }
	| 'nine' { f=Fraction.valueOf(9); }
	// hack for typing (not spoken)
	| integer { f=Fraction.valueOf($integer.r); }
	;

fraction returns [Apply a]
	: f=a_fraction { a = Apply.makeApply(f.toProperString()); }
	;
a_fraction returns [Fraction f]
	: ('a'|'one') 'half' { f=Fraction.valueOf("1/2"); }
	| ('a'|'one') 'third' { f=Fraction.valueOf("1/3"); }
	| ('a'|'one') 'quarter' { f=Fraction.valueOf("1/4"); }
	| 'two' 'thirds' { f=Fraction.valueOf("2/3"); }
	| 'three' 'quarters' { f=Fraction.valueOf("3/4"); }
	// hack for typing (not spoken)
	| n=integer '/' d=integer { f=Fraction.valueOf($n.r, $d.r); }
	;
fragment
integer returns [Integer r]
	: INT { $r = Integer.valueOf($INT.text); }
	;
INT	: ('0'..'9')+ ;

cardinal returns [Apply a]
	: f=a_cardinal { a=Apply.makeApply(f.toProperString()); }
	;
a_cardinal returns [Fraction f]
	: 'once' ('and' f2=a_fraction)? { f=Fraction.valueOf(1); if (f2!=null) f=f.add(f2); }
	| 'twice' ('and' f2=a_fraction)? { f=Fraction.valueOf(2); if (f2!=null) f=f.add(f2); }
	| f1=a_number ('times'|'time') { f=f1; }
	;

WS  :   (   ' '
        |   '\t'
        |   '\r'
        |   '\n'
        )+
        { $channel=HIDDEN; }
    ;
