program: a1

// this is alternate precedence for roll which binds looser than whatever's
// inside the anything; eg: "as couples trade and individually roll" is
// and individually roll(as couples(trade))
// put on the a1 list with "as couples" because it's not needed below this.
// must be same (or more negative) precedence as "_apply concept"
def: and individually roll(c)
  spoken: [-20] <c=anything> and individually roll
  call: _roll([c])

def: quarter right
  in: 2
  prim: 0,0,right
def: quarter left
  in: 2
  prim: 0,0,left // or call: left(quarter right)
def: quarter in
  in: 2
  from: 2x2 // into your 2x2
    prim: 0,0,in
  from: condition(equal num(NUM DANCERS(), 2))
    prim: 0,0,in

def: quarter out
  in: 2
  from: 2x2 // out of your 2x2
    prim: 0,0,out
  from: condition(equal num(NUM DANCERS(), 2))
    prim: 0,0,out

def: pair off
  in: 2
  from: ANY // center of the formation
    prim: 0,0,out

def: mix
  in: 6
  call: cross run(CENTER), _finish mix
// odd definition because it's not strictly a split call: we can
// do it from odd t-boned setups where the axis changes between the
// cross run and the mix.
// eg:
//  > ^ ^ >
//  < v v <
def: _finish mix
  in: 3
  from: GENERAL TIDAL LINE
    from: GENERAL LINE
      call: _quasi concentric(trade, _nothing preserve roll)
  from: CENTER HALF
    call: _quasi concentric(trade, _nothing preserve roll)

def: quarter thru
  option: LEFT
  call: _quarter thru(1/4)
def: grand quarter thru
  option: LEFT
  call: _grand quarter thru(1/4)
def: grand left quarter thru
  call: mirror(grand quarter thru)
def: three quarter thru
  option: LEFT
  call: _quarter thru(3/4)
def: grand three quarter thru
  option: LEFT
  call: _grand quarter thru(3/4)
def: grand left three quarter thru
  call: mirror(grand three quarter thru)

def: any hand quarter thru
  call: _any hand quarter thru(1/4)
def: any hand three quarter thru
  call: _any hand quarter thru(3/4)
// XXX this is an incomplete definition of any hand quarter thru
//      should allow unmatched dancers, magic boxes, etc.
def: _any hand quarter thru(n=1/4)
  from: mixed(RH BOX, LH BOX, INVERTED BOX)
    from: RH BOX
      call: _quarter thru([n])
    from: LH BOX
      call: left(_quarter thru([n]))
    from: INVERTED BOX
      call: cast([n]), anyone while others(CENTER, trade)

def: _those who can turn right(n)
  from: allow unmatched(RH MINIWAVE)
    call: right arm turn([n])
def: _those who can turn left(n)
  call: mirror(_those who can turn right([n]))

def: _those who can turn right not grand(n)
  from: not grand(allow unmatched(RH MINIWAVE))
    call: right arm turn([n])
def: _those who can turn left not grand(n)
  call: mirror(_those who can turn right not grand([n]))

def: _grand quarter thru(n=1/4)
  in: _add num(5, _multiply num(4, [n]))
  // XXX: check that one of these calls involves a pair of dancers
  //      spanning the centerline so that we don't allow (e.g.)
  //      a 'grand swing thru' from parallel ocean waves
  call: _those who can turn right([n])
  call: _those who can turn left(1/2)

// this definition is trickier, because we need to stay in our 4-person
// formation
// XXX from RH wave-based triangles, etc.
def: _quarter thru(n=1/4)
  in: _add num(5, _multiply num(4, [n]))
  call: _those who can turn right not grand([n])
  call: _those who can turn left not grand(1/2)

def: and cross(c)
  spoken: <c=anything> and cross
  call: [c], _cross

/* XXX: Causes grammar conflicts; rare in any case */
//def: _and fractional cross(c, n)
//  spoken: <c=anything> and <n=number> cross
//  call: [c], _fractional([n], _cross)

// keep this definition in sync with "cross back" (c2)
def: _cross
  spoken: test cross
  in: 2
    from: 2x2
      condition: or(PROGRAM AT LEAST(c1), NOT(TBONED(ALL))), \
                 "T-boned formations not allowed below C1"
      condition: MATCH(_INOUT PATTERN(), "iooi|oiio"), \
                 "Must have diagonal trailers"
      select: LEADER
        prim: 0, 1, none // make room for center miniwave (form z)
        prim: 0,-1, none
      select: TRAILER
        prim: in 2, 1, none // pull by with outside hand
        prim: 0, 1, none

// XXX: vic cedar says <anyone> cross is also on a1 list.

def: brace thru
  call: right pull by
  call: _finish brace thru
def: _finish brace thru
  from: BACK-TO-BACK COUPLES
    ends in: formation(FACING COUPLES)
    call: brace yourself

// XXX eventually add "but don't turn the star" to grammar
def: chain reaction(n=1/4)
  spoken: chain reaction (but turn the star <n=fraction>)?
  from: QUARTER TAG, GENERAL QUARTER TAG
    condition: OR(PROGRAM AT LEAST(c1), FORMATION(QUARTER TAG)), \
      "Only allowed from quarter tag below C1"
    part:
      call: _chain reaction part 1
    xpart:
      call: _chain reaction part 2
      call: _chain reaction part 3([n])
      call: _finish chain reaction
// XXX this animates oddly, we probably want to tweak it eventually
def: _chain reaction part 1
  in: 2
  from: QUARTER TAG, GENERAL QUARTER TAG
    from: allow unmatched(1x3) // ensures we're balanced after breathing
      from: allow unmatched(FACING DANCERS)
        call: pass thru
  from: GENERAL COLUMNS // this variant is used for 'make a pass but'
    call: those facing(pass thru)
def: _chain reaction part 2
  in: 2
  call: _center 6(_center 2(nothing, hinge), _counter rotate 1/4)
// this version works with unusual "those who meet" (ie, t-bones)
def: _chain reaction part 3(n)
  call: _blend last(_center 4(_turn the star([n]), _in(2, trade)),\
                    _center 6(_unsmash the star))
// an alternative for non-t-bones, doesn't do "those who meet"
def: _chain reaction part 3 simple(n)
  call: _center 4(_turn the diamond([n]), _in(2, trade))
def: _finish chain reaction
  in: 6 // same as "cast 3/4"
  call: _blend last(_center 2(nothing, _center 4(cast(3/4), nothing)),\
                    _like a coordinate)

// results in a diamond w/ the same orientation as originally, even if
// rotate is odd number of quarters.
def: _turn the diamond(n)
  from: condition(equal num([n], 0))
    call: nothing
  from: condition(greater([n], 0))
    in: _multiply num([n], 8)
    call: _from diamond(_finish turn the diamond([n]))
def: _finish turn the diamond(n)
  from: condition(equal num(_mod num([n], 1/2), 0))
    call: counter rotate([n])
  from: condition(equal num(_mod num([n], 1/2), 1/4))
    call: _blend last(counter rotate([n]), _smash diamond)
// This creates a true star, but for some calls it can be hard to
// identify dancers in the resulting star.
def: _turn the star(n)
  from: condition(equal num([n], 0))
    call: nothing
  from: condition(greater([n], 0))
    call: _from diamond(_blend first(_diamond to star,        \
                        _in(_multiply num([n], 8), counter rotate([n]))))
// this separates the three partners: the very centers, and the two
// groups who are about to cast 3/4
def: _unsmash the star
  from: GENERAL PARTNERS
    call: nothing // breathing does all the work

def: clover and(call)
  option: SUPERCALL
  spoken: clover and <call=anything>
  ipart:
    call: _maybe start clover(_center 4([call], _finish clover, _o concentric))

def: cross clover and(call)
  option: SUPERCALL
  spoken: cross clover and <call=anything>
  ipart:
    call: _maybe start clover(_center 4([call], _finish cross clover, \
                                        _o concentric))

def: _maybe start clover(c)
  from: 2x4
    condition: match(_facing pattern(not(CENTER)), "<><>"),\
               "Ends must be facing out"
    call: [c]
  from: ANY
    call: slim down, [c]

def: _finish clover
  in: 4
  from: use phantoms(COMPLETED DOUBLE PASS THRU)
    select: LEADER
      prim: out 2, 2, out
      prim: in 2, 2, roll
      prim: in 2, 2, roll
    select: OTHERS
      prim: 0,0,none
      prim: 0,0,none
      prim: 0,0,none

def: _finish cross clover
  in: 10
  from: use phantoms(COMPLETED DOUBLE PASS THRU)
    // pass left shoulders; belle in front
    select: and(LEADER, BEAU)
      prim: in 1, 0, in
      prim: 0, 3, roll
      prim: 0, 2, roll
    select: and(LEADER, BELLE)
      prim: in 1, 2, in
      prim: in 2, 3, roll
      prim: 0, 2, roll
    select: OTHERS
      prim: 0,0,none
      prim: 0,0,none
      prim: 0,0,none

// xxx test "3/4 cross trail thru" from facing couples (see ceder chest)
def: cross trail thru
  in: 4
    call: pass thru
    call: half sashay

def: double star thru
  in: 6
  // 2 parts
  call: star thru
  call: mirror(star thru)

def: ends bend
  from: 1x4
    condition: MATCH(_FACING PATTERN(), "[v^]..[v^]"), "Must be ends of lines"
    in: 4
    select: END
      prim: in 2, 2, in
    select: CENTER
      prim: 0, 0, none
  from: ANY
    call: _from diamond(_ends bend from diamond)
def: _ends bend from diamond
  in: 4
  from: GENERAL DIAMOND // xxx or diamond spots, if centers turned to face?
    select: POINT
      prim: in 1, 3, in
    select: CENTER
      prim: 0, 0, none

def: explode the line
  in: 6
  from: GENERAL LINE
    condition: not(formation(OCEAN WAVE)), "You mean 'explode the wave'"
    call: _explode and(right pull by)

def: horseshoe turn
  // Vic sez: "Consider a Squared Set after Heads Pass Thru. From this
  // formation, the call Clover And Partner Tag is legal, but Horseshoe
  // Turn is not."
  in: 6
  from: CENTER HALF
    condition: match(_inout pattern(not(CENTER)), "oooo"),\
               "Ends must be facing out"
    call: clover and(partner tag)

def: lockit
  in: 4
  from: GENERAL LINE
    call: _counter rotate 1/4
  from: ANY
    call: _from diamond(_counter rotate 1/4)

def: partner hinge
  from: MINIWAVE, COUPLE
    ends in: formation(MINIWAVE)
    call: 1/2(trade)

def: partner tag
  in: 3
  from: mixed(COUPLE, RH MINIWAVE, LH MINIWAVE)
    ends in: formation(BACK-TO-BACK DANCERS)
    call: quarter in, pass thru

def: pass in
  ends in: formation(COUPLE)
  call: pass thru, face in

def: pass out
  ends in: formation(COUPLE)
  call: pass thru, face out

def: pass the sea
  call: pass thru, quarter in, left(step to a wave)

// callerlab says timing is "4 & 2".  Let's call that "4" shall we?
def: right roll to a wave
  in: 4
  from: GENERAL TANDEM // group dancers
    ends in: formation(RH MINIWAVE)
    from: FACING DANCERS, TANDEM, BACK-TO-BACK DANCERS // apply tags
      select: LEADER
        prim: 0, 0, right
        prim: 1, 1, right // can roll
      select: TRAILER
        prim: -1, 1, none
        prim: 0, 0, none // can't roll
def: left roll to a wave
  call: mirror(right roll to a wave)

// see 'square thru' (basic) and 'square chain the top' (c1) definitions
def: square chain thru
  option: LEFT
  in: 14
  from: mixed(RH OCEAN WAVE, FACING COUPLES)
    ends in: formation(BACK-TO-BACK COUPLES)
    call: _square thru part, left(swing thru), left(turn thru)

// see "step and flip" (C1)
def: step and slide
  in: 4
  from: GENERAL LINE
    select: CENTER
      prim: 0, 2, none
    select: END
      prim: in 2, 0, none, sashay-start sashay-finish
  from: ANY
    call: _four person call(_step and slide from z)
def: _step and slide from z
  ends in: formation(GENERAL COLUMN)
  from: CENTER 2
    select: CENTER
      prim: 0, 2, none
    select: OTHERS
      prim: in 2, 0, none, sashay-start sashay-finish

def: swap around
  option: REVERSE
  in: 4
  from: FACING COUPLES, 2x2
    condition: ARE(ALL, TRAILER), "Everyone must be a trailer"
    select: BELLE
      prim: 0, 1, none
      prim: 0, 1, none
    select: BEAU
      prim: in 1, -1, right, sashay-start
      prim: in 1,  1, right, sashay-finish

def: transfer the column
  call: trans(extend)

def: triple star thru
  in: 10
  // 3 parts
  call: those facing(star thru)
  call: mirror(those facing(star thru))
  call: those facing(star thru)

def: triple trade
  from: CENTER 6
    part:
      call: _quasi concentric(trade, nothing)

// three parts, everyone can roll at the end
// (fractionalization is only legit at upper levels)
def: turn and deal
  option: LEFT
  in: 4
  from: GENERAL LINE
    ends in: formation(2x2)
    call: face in
    call: _middle part turn and deal // preserves roll
    call: roll

def: _middle part turn and deal
  // extend to 1/2 tag, but preserve roll
  in: 2
  ipart:
    from: SINGLE DOUBLE PASS THRU
      select: LEADER
        prim: -1, 1, none, preserve-roll
        prim:  0, 1, none, preserve-roll
      select: TRAILER
        prim:  0, 1, none, preserve-roll
        prim: -1, 1, none, preserve-roll
