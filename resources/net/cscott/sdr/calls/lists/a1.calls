program: a1

// this is higher precedence version of roll which binds looser than whatever's
// inside the anything; eg: "as couples trade and individually roll" is
// and individually roll(as couples(trade))
// put on the a1 list with "as couples" because it's not needed below this.
def: and individually roll(c)
  spoken: [-15] <c=anything> and individually roll
  call: _roll([c])

def: quarter right
  in: 2
  prim: 0,0,right
def: quarter left
  in: 2
  prim: 0,0,left // or call: left(quarter right)
def: quarter in
  in: 2
  from: 2x2 // into your 2x2
    prim: 0,0,in
def: quarter out
  in: 2
  from: 2x2 // out of your 2x2
    prim: 0,0,out

def: pair off
  in: 2
  from: ANY // center of the formation
    prim: 0,0,out

def: mix
  call: cross run(CENTER), _finish mix
def: _finish mix
  in: 3
  from: 1x4
    call: _quasi concentric(trade, _nothing preserve roll)

def: quarter thru
  optional: LEFT
  call: _quarter thru(1/4)
def: grand quarter thru
  optional: LEFT
  call: _grand quarter thru(1/4)
def: grand left quarter thru
  call: mirror(grand quarter thru)
def: three quarter thru
  optional: LEFT
  call: _quarter thru(3/4)
def: grand three quarter thru
  optional: LEFT
  call: _grand quarter thru(3/4)
def: grand left three quarter thru
  call: mirror(grand three quarter thru)

def: _those who can turn right(n)
  from: allow unmatched(RH MINIWAVE)
    call: right arm turn([n])
def: _those who can turn left(n)
  call: mirror(_those who can turn right([n]))

def: _those who can turn right not grand(n)
  from: not grand(allow unmatched(RH MINIWAVE))
    call: right arm turn([n])
def: _those who can turn left not grand(n)
  call: mirror(_those who can turn right not grand([n]))

def: _grand quarter thru(n=1/4)
  // XXX: check that one of these calls involves a pair of dancers
  //      spanning the centerline so that we don't allow (e.g.)
  //      a 'grand swing thru' from parallel ocean waves
  call: _those who can turn right([n])
  call: _those who can turn left(1/2)

// this definition is trickier, because we need to stay in our 4-person
// formation
// XXX from RH wave-based triangles, etc.
def: _quarter thru(n=1/4)
  call: _those who can turn right not grand([n])
  call: _those who can turn left not grand(1/2)

def: and cross(c)
  spoken: <c=anything> and cross
  call: [c], _cross

/* XXX: Causes grammar conflicts; rare in any case */
//def: _and fractional cross(c, n)
//  spoken: <c=anything> and <n=number> cross
//  call: [c], _fractional([n], _cross)

// keep this definition in sync with "cross back" (a2)
def: _cross
  in: 2
    from: BOX, 2x2 /* XXX: 2x2 doesn't define LEADERS/TRAILERS =( */
      condition: or(PROGRAM AT LEAST(c1), NOT(TBONED(ALL))), \
                 "T-boned formations not allowed below C1"
      condition: MATCH(_SELECTION PATTERN(TRAILER), "x__x|_xx_"), \
                 "Must have diagonal trailers"
      select: LEADER
        call: nothing, nothing /* two parts */
      select: TRAILER
        prim: in 2, 1, none
        prim: in 1, 1, none

// XXX: vic cedar says <anyone> cross is also on a1 list.
