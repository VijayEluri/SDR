program: a2

def: box counter rotate(n=1/4)
  spoken: box counter rotate (<n=fraction>)?
  condition: equal num(NUM DANCERS(), 4), \
             "Perhaps you mean to say CENTERS box counter rotate?"
  call: _box counter rotate([n])
def: _box counter rotate(n=1/4)
  from: 2x2 // just "counter rotate" if not in a box
    call: counter rotate([n])

def: split counter rotate(n=1/4)
  spoken: split counter rotate (<n=fraction>)?
  // really, what we should be doing is determining the long axis of the
  // formation, and splitting it in the middle of that axis.
  from: 2x4
    from: 2x2
      call: counter rotate([n])
  from: 1x8
    from: 1x4
      call: counter rotate([n])
  from: TWIN DIAMONDS, TWIN FACING DIAMONDS, \
        POINT TO POINT DIAMONDS, POINT TO POINT FACING DIAMONDS
    call: _from diamond(counter rotate([n]))

// mini busy isn't really strongly related to keep busy: the leaders part
// is very different.
def: mini busy
  // 3 parts
  call: _start mini busy
  call: _middle mini busy
  call: _finish mini busy

// XXX vic & callerlab would also like to be able to do a minibusy from
//     inverted lines (centers facing in) and vic would like to do it
//     from parallel waves as well.
def: _start mini busy
  ipart:
    from: PARALLEL TWO FACED LINES, PARALLEL WAVES
      select: TRAILER
        prim: 0, 1, none
      select: LEADER
        prim: 0, 1, in, sashay-finish
    from: ENDS OUT INVERTED LINES
      select: TRAILER
        select: BELLE
          prim: -2, 1, none
        select: BEAU
          prim: 0, 1, none
      select: LEADER
        prim: 0, 1, in, sashay-finish
/* XXX _use phantoms not yet implemented
def: _middle mini busy
  ipart:
    from: use phantoms(TRIPLE LINES) // xxx centers are center line
      call: _quasi concentric(_centers(hinge), press ahead)
*/
def: _finish mini busy
  ipart:
    from: CENTER HALF // does this include center diamond?
      call: _quasi concentric(flip the diamond, quarter in)

// XXX vic would like to define this from parallel lines of 3 as well
def: in roll circulate
  in: 4
  from: PARALLEL WAVES, PARALLEL TWO-FACED LINES, PARALLEL GENERAL LINES
    condition: equal num(NUM DANCERS(and(END,TRAILER)), 2), \
      "Exactly one end in each line must be facing in."
    from: condition(MATCH(_SELECTION PATTERN(and(END,TRAILER)), "X_+X"),\
                    PARALLEL GENERAL LINES)
      select: and(TRAILER,END)
        prim: out 1, 1, none
        prim:  in 1, 1, none
      select: TRAILER
        prim: 1, 0, right
        prim: 0, 1, roll
      select: OTHERS
        prim: -1, 0, left
        prim: 0, 1, roll
    from: condition(MATCH(_SELECTION PATTERN(and(END,TRAILER)), "_+XX_+"))
      call: mirror(in roll circulate)

// XXX vic would like to define this from parallel lines of 3 as well
def: out roll circulate
  in: 6
  from: PARALLEL WAVES, PARALLEL TWO-FACED LINES, PARALLEL GENERAL LINES
    call: _with designated(and(LEADER,END), _designees out roll circulate)
// also used for sock it to me/here comes the judge:
def: _designees out roll circulate
  from: GENERAL LINE, GENERAL LINE OF 3
    in: _multiply num(num dancers(), 2)
    condition: equal num(NUM DANCERS(DESIGNATED), 1), \
      "Exactly one end in each line must be facing out."
    from: condition(MATCH(_SELECTION PATTERN(DESIGNATED), "X__+"))
      select: and(DESIGNATED, condition(equal num(num dancers(), 4)))
        prim: in 3, 2, in
        prim: in 2, 3, roll
      select: and(DESIGNATED, condition(equal num(num dancers(), 3)))
        prim: in 2, 2, in
        prim: in 2, 2, roll
      select: MATCH(_FACING PATTERN(), "v")
        prim: 1, 0, right
        prim: 0, 1, roll
      select: OTHERS
        prim: -1, 0, left
        prim: 0, 1, roll
    from: condition(MATCH(_SELECTION PATTERN(DESIGNATED), "__+X"))
      call: mirror(_designees out roll circulate)

def: remake
  option: LEFT
  part: 2
    call: quarter thru
  part:
    from: not grand(allow unmatched(RH MINIWAVE))
      call: _in(4, right arm turn(3/4))

def: grand remake
  part: 2
    call: grand quarter thru
  part:
    call: _in(4, _those who can turn right(3/4))

def: grand left remake
  call: mirror(grand remake)

def: single wheel
  in: 4
  ipart:
    call: and roll(_hinge)

def: slide
  in: 3
  from: GENERAL LINE
    from: GENERAL PARTNERS
      condition: formation(MINIWAVE),\
        "End and adjacent center must form miniwave"
      call: _miniwave spread

def: slither
  in: 3
  from: GENERAL LINE
    call: _quasi concentric(_slither check, nothing)
  // vic sez: legal from miniwave columns (but gimmicky)
  from: 2x4
    call: _quasi concentric(_miniwave spread, nothing)
def: _slither check
  condition: formation(MINIWAVE),\
    "Centers must form miniwave"
  call: _miniwave spread

// fractionalizable into halves
def: _miniwave spread
  from: RH MINIWAVE
    prim: 1, -1, none, sashay-start sashay-finish
    prim: 1,  1, none, sashay-start sashay-finish
  from: LH MINIWAVE
    prim: -1, -1, none, sashay-start sashay-finish
    prim: -1,  1, none, sashay-start sashay-finish

def: slip
  // "from general lines with centers forming a miniwave only"
  in: 3
  from: 1x4
    call: _quasi concentric(_miniwave trade, nothing)
  // vic sez: legal from miniwave columns (but gimmicky)
  from: 2x4
    call: _quasi concentric(_miniwave trade, nothing)

/* 'swing' is defined in basic.calls */

// putting 'swing and mix' on A2 list, as per Vic Ceder
def: swing and mix // 3 part call
  part:
    call: _in(2, _maybe touch(_wave swing))
  part: 2
    call: mix

def: transfer and(c)
  spoken: transfer and <c=anything>
  call: unimplemented

def: _facing recycle
  in: 6
  // cheat so we can say "recycle has 3 parts", although facing recycle
  // is really indivisible
  ipart: 3
    from: FACING COUPLES
      select: BEAU
        prim: 0, 1, right
        prim: 0, 0, right
      select: BELLE
        prim: -2, -1, none
        prim: -2,  2, none

// a2 timing doc says peel and trail from tandem couples is 4 beats
// while peel and trail from waves or zees is 6 beats
// ...but I'm guessing from a 3/4 zee (where trailers are already holding
// hands) it should also be 4 beats
def: peel and trail
  ipart:
    from: 2x2, mixed(RH SINGLE QUARTER ZEE, LH SINGLE QUARTER ZEE, \
                     RH SINGLE THREE QUARTER ZEE, LH SINGLE THREE QUARTER ZEE)
      call: _start peel and trail  // 2 or 4 beats
      call: _finish peel and trail // 2 beats
def: _start peel and trail
  from: TANDEM COUPLES, SINGLE THREE QUARTER ZEE
    call: _in(2, _start peel and step)
  from: ANY
    call: _in(4, _start peel and step)
def: _start peel and step
  in: 2
  from: mixed(RH BOX, LH BOX, TANDEM COUPLES)
    select: LEADER
      prim: out 2, -1, out, sashay-start sashay-finish
    select: TRAILER
      prim: 0, 1, none, force-roll-none
  from: mixed(RH SINGLE QUARTER ZEE, LH SINGLE QUARTER ZEE)
    select: LEADER
      prim: out 2, 0, out, sashay-start
    select: TRAILER
      prim: 0, 2, none, force-roll-none
  from: mixed(RH SINGLE THREE QUARTER ZEE, LH SINGLE THREE QUARTER ZEE)
    select: LEADER
      prim: out 2, -2, out, sashay-start sashay-finish
    select: TRAILER
      prim: 0, 0, none, force-roll-none
  // XXX also possible from a t-bone 2x2 set up, see ceder.net
  // and probably from t-boned zees as well
  from: 2x2
    condition: TBONED(ALL), "Can't do peel off from this 2x2"
    condition: PROGRAM AT LEAST(c1), "T-boned formations not allowed below C1"
    condition: MATCH(_SELECTION PATTERN(TRAILER), "x__x|_xx_"), \
               "Trailers must step to a hand hold"
    select: LEADER
      prim: out 2, -1, out, sashay-start sashay-finish
    select: TRAILER
      prim: 0, 1, none, force-roll-none
def: _finish peel and trail
  // this should already be in the 4-dancer formation
  // (due to the 'from: 2x2' in the 'peel and trail' definition)
  condition: equal num(NUM DANCERS(), 4)
  from: CENTER HALF
    call: _quasi concentric(_in(2, trade), _in(2, roll))

// left shoulder passes
def: trail off
  in: 6
  ipart:
    from: TANDEM COUPLES
      select: LEADER
        select: BEAU
          prim: in 1, 2, in, pass-left
          prim: 3, 3, roll
        select: BELLE
          prim: in 1, 4, in, pass-left
          prim: -5, 3, roll
      select: TRAILER
        select: BEAU
          prim: in 1, 0, in, pass-left
          prim: -1, 1, roll, sashay-finish
        select: BELLE
          prim: in 1, 2, in, pass-left
          prim: -1, 1, roll
    from: mixed(RH BOX, LH BOX)
      call: 1/2(press ahead)
      call: _zee trail off
    from: mixed(RH SINGLE QUARTER ZEE, LH SINGLE QUARTER ZEE)
      call: press ahead
      call: _zee trail off
    from: mixed(RH SINGLE THREE QUARTER ZEE, LH SINGLE THREE QUARTER ZEE)
      call: _zee trail off
    // possible from a t-bone 2x2 set up, see ceder.net
    // XXX probably from t-boned zees as well
    from: 2x2
      condition: TBONED(ALL), "Can't do peel off from this 2x2"
      condition: PROGRAM AT LEAST(c1), "T-boned formations not allowed below C1"
      condition: MATCH(_SELECTION PATTERN(TRAILER), "x__x|_xx_"), \
                 "Trailers must step to a hand hold"
      select: LEADER
        prim: 0, 1, none
        prim: in 1, 1, in
        prim: in 3, 3, roll
      select: TRAILER
        prim: 0, 1, none
        prim: in 1, 1, in
        prim: in 1, 1, roll
def: _zee trail off
  from: mixed(RH SINGLE THREE QUARTER ZEE, LH SINGLE THREE QUARTER ZEE)
    select: LEADER
      prim: in 1, 1, in
      prim: in 3, 3, roll
    select: TRAILER
      prim: in 1, 1, in
      prim: in 1, 1, roll

def: _trail and step
  in: 4
  ipart:
    from: TANDEM COUPLES
      select: LEADER
        select: BEAU
          prim: in 1, 1, in, pass-left
          prim: 2, 3, roll
        select: BELLE
          prim: in 1, 3, in, pass-left
          prim: -4, 3, roll
      select: TRAILER
        prim: 0, 1, none
        prim: 0, 0, none
    from: mixed(RH BOX, LH BOX)
      call: 1/2(press ahead)
      call: _zee trail and step
    from: mixed(RH SINGLE QUARTER ZEE, LH SINGLE QUARTER ZEE)
      call: press ahead
      call: _zee trail and step
    from: mixed(RH SINGLE THREE QUARTER ZEE, LH SINGLE THREE QUARTER ZEE)
      call: _zee trail and step
    // possible from a t-bone 2x2 set up, see ceder.net
    // XXX probably from t-boned zees as well
    from: 2x2
      condition: TBONED(ALL), "Can't do peel off from this 2x2"
      condition: PROGRAM AT LEAST(c1), "T-boned formations not allowed below C1"
      condition: MATCH(_SELECTION PATTERN(TRAILER), "x__x|_xx_"), \
                 "Trailers must step to a hand hold"
      select: LEADER
        prim: 0, 1, none
        prim: in 1, 0, in
        prim: in 2, 3, roll
      select: TRAILER
        prim: 0, 1, none
        prim: 0, 0, none
        prim: 0, 0, none
def: _zee trail and step
  from: mixed(RH SINGLE THREE QUARTER ZEE, LH SINGLE THREE QUARTER ZEE)
    select: LEADER
      prim: in 1, 0, in
      prim: in 2, 3, roll
    select: TRAILER
      prim: 0, 0, none
      prim: 0, 0, none

def: hourglass circulate
  in: 4
  from: GENERAL HOURGLASS
    select: and(CENTER, POINT)
      prim: in 2, 3, in
    select: and(END, MATCH(_INOUT PATTERN(), "o")) // LEADERS
      prim: in 3, 2, in
    select: and(CENTER, VERY CENTER)
      prim: out 2, 2, none, sashay-start sashay-finish
    select: and(END, MATCH(_INOUT PATTERN(), "i")) // TRAILERS
      prim: in 2, 2, none, sashay-start sashay-finish

def: switch to a diamond
  in: 4
  from: OCEAN WAVE, GENERAL LINE
    select: CENTER
      prim: out 2, 0, out
      prim: 0, 0, roll
    select: END
      prim: in 3, 1, in
      prim: 0, 0, none

// XXX this is different spacing than FormationList.RH_HOURGLASS
// XXX use _blend and snake, etc?
def: switch to an hourglass
  in: 4
  from: PARALLEL WAVES, PARALLEL GENERAL LINES
    select: CENTER
      prim: out 2, 0, out
      prim: 0, 0, roll
    select: and(END, TRAILER)
      prim: in 2, 1, none
      prim: 0, 0, none
    select: and(END, LEADER)
      prim: in 3, 1, in
      prim: 0, 0, none

def: switch the wave
  from: OCEAN WAVE
    call: _switch the line
def: _switch the line
  in: 6
  part:
    from: OCEAN WAVE, TWO-FACED LINE, ONE-FACED LINE, GENERAL LINE
      select: CENTER
        prim: out 1, 0, out
        prim: 0, 1, roll
      select: END
        prim: in 3, 1, in
        prim: in 1, 1, roll
