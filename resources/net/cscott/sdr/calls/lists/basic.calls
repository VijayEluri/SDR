program: basic

// prim is <over,forward>; always dancer relative
def: trade
  from: COUPLE
    in: 6
    select: BEAU
      prim: 1, 3, right
      prim: -3,1, right
    select: BELLE
      prim: -1, 1, left
      prim: -1, 1, left
  from: RH MINIWAVE, LH MINIWAVE
    in: 4
    prim: in 1,1,in
    prim: in 1,1,in
  /*
  from: GENERAL LINE
    in: 4
    condition: TWO SELECTED
    condition: not(SELECTED ARE TBONED)
    call: ignore the others (trade) // this is a concept application
  */
def: couples trade
  call: as couples(trade)

def: forward and back
  in: 4
  part:
    from: FACING COUPLES
      prim: 0, 1,none
      prim: 0,-1,none

def: dosado
  in: 6
  from: FACING DANCERS
    prim: -1, 1,none
    prim:  1, 1,none
    prim:  1,-1,none
    prim: -1,-1,none

def: dosado to a wave
  in: 6
  part:
    call: 3/4 (dosado)

def: pass thru
  in: 2
  from: FACING DANCERS
    call: 1/2 (dosado) // untraditional =)

def: double pass thru
  in: 4
  condition: and(PROGRAM AT LEAST(basic), true) // for testing only
  //call: tandem(pass thru) // nicer def?
  call: centers (pass thru), pass thru

def: pull by
  call: pass thru // at least until i implement hand holds

def: half sashay
  in: 4
  from: COUPLE
    select: BEAU
      prim: 1, -1, none
      prim: 1,  1, none
    select: BELLE
      prim: -1, 1, none
      prim: -1,-1, none

def: roll away
  in: 4
  from: COUPLE
    select: BEAU
      ipart:
        prim: 1/2, 0, none
        prim: 1/2, 0, none
      ipart:
        prim: 1/2, 0, none
        prim: 1/2, 0, none
    select: BELLE
      ipart:
        prim: -1/2, 1, left
        prim:  1, 1/2, left
      ipart:
        prim:  1/2,  1, left
        prim:  1, -1/2, left

def: u turn back
  in: 2
  from: COUPLE, RH MINIWAVE, LH MINIWAVE
    prim: 0, 0, in
    prim: 0, 0, in
  // XXX: we can u-turn back from other formations, too: turn toward
  // the center in that case?
  /*
  select: ALL
    call: twice (quarter in) // is this right?
  */

// maybe alias 'two boys chain', etc?
def: two ladies chain // need breathing
  in: 6
  ipart:
    from: FACING COUPLES
      select: BELLE
        part: // for timing purposes
          prim: -1, 1/2, none
          prim: -1, 1/2, none // pull by
          prim: 1,  1/2, right
        part: // courtesy turn
          prim: -1,1,left
          prim: -1,1,left
          prim: -1,1,left
      select: BEAU
        part:
          prim: 1, -1/2, left
        part:
          prim: 1,-1,left
          prim: 1,-1,left
          prim: 1,-1,left

def: _courtesy turn 1/2
  in: 4
  call: 1/2(wheel around) // modulo hand hold
def: _courtesy turn 3/4
  in: 6
  call: 3/4(wheel around) // modulo hand hold
def: right arm turn 1/2
  in: 4
  from: RH MINIWAVE
  call: trade // modulo hand hold
def: chain down the line
  in: 8
  from: RH TWO-FACED LINE
  call: centers(right arm turn 1/2, _courtesy turn 3/4)
def: two ladies chain
  in: 8
  from: FACING COUPLES
  call: 1/4(wheel around), chain down the line
def: flutter wheel
  in: 8
  from: FACING COUPLES
  call: 1/4(wheel around), centers(right arm turn 1/2), 2(split counter rotate)
def: reverse flutter wheel
  call: mirror(flutter wheel)
def: lead right
  in: 4
  call: as couples(_single lead right)
def: lead left
  call: left(lead right)
def: _single lead right
  from: FACING DANCERS
  prim: 1, 1, right
def: right and left thru
  in: 6
  from: FACING COUPLE
  call: right pull by, _courtesy turn 1/2
def: left and right thru
  call: left(right and left thru)
def: star thru
  in: 4
  from: FACING DANCERS
  condition: not(or(ALL(BOYS), ALL(GIRLS)))
  call: slide thru // modulo styling
def: slide thru
  in: 4
  from: FACING DANCERS
  ipart:
    part:
      call: pull by
    part:
      select: BOY
        call: quarter right
      select: GIRL
        call: quarter left
def: bend the line
  in: 4
  call: as couples(_single bend)
def: _single bend
  from: COUPLE, RH MINIWAVE, LH MINIWAVE
    call: quarter in
def: california twirl
  in: 4
  from: COUPLE
    select: BEAU
      condition: ALL(BOY) // boys must be beaus
      prim: 1, 3, right // copied from partner trade
      prim: -3,1, right
    select: BELLE
      condition: ALL(GIRL) // girls must be belles
      prim: -1, 1, left // copied from partner trade
      prim: -1, 1, left
def: wheel around
  in: 4
  call: 4(_quarter wheel)
def: _quarter wheel
  from: COUPLE
    select: BEAU
      prim: 1, -1, left
    select: BELLE
      prim: -1, 1, left
def: reverse wheel around
  call: mirror(wheel around) // or left?
def: box the gnat
  in: 4
  from: FACING DANCERS
    condition: not(or(ALL(BOYS), ALL(GIRLS)))
    call: _and roll(touch 1/4) // modulo styling
def: step to a wave
  in: 2 // not official
  from: FACING DANCERS
    call: _extend // the general case
def: step thru
  in: 2 // not official
  from: RH MINIWAVE, LH MINIWAVE
    call: _extend // the general case
def: balance
  in: 4
  prim: 0, 1/2, none
  prim: 0,-1/2, none // modulo styling -- and breathing?
def: pass the ocean
  in: 4
  call: pass thru, quarter in, _extend
def: extend
  in: 2
  // XXX level/formation restrictions
  // XXX at basic/mainstream, extend is from 1/4 tag only
  call: _extend
def: _extend // the general case
  from: SINGLE DPT
    call: centers(extend)
  from: LH BOX
    call: mirror(_extend)
  from: RH BOX
    select: LEADER
      prim: 1,1, none
    select: TRAILER
      prim: 0,1, none
  from: LH MINIWAVE
    call: mirror(_extend)
  from: RH MINIWAVE
    prim: 1,1, none
  from: FACING DANCERS
    prim: -1,1,none
def: swing thru
  in: 6
  from: RH WAVE
    call: right arm turn 1/2, centers(left(right arm turn 1/2))
  from: LH WAVE
    call: centers(right arm turn 1/2), left(right arm turn 1/2)
/*

// NOTE THAT 'leads run' = 'IN YOUR BOX, leads run'
// NOTE THAT 'boys run' = 'IN YOUR COUPLES, boys run'
def: run[sel]
  in: 4
  from: GENERAL LINE, GENERAL BOX, COUPLE, RH MINIWAVE, LH MINIWAVE
    select: [sel]
      select: BEAU
        prim: 1,1,right
        prim: 1,1,right
      select: BELLE
        prim: -1,1,left
        prim: -1,1,left
    select: ALL // ie, others
      select: BEAU
        prim: 1,0,none
        prim: 1,0,none
      select: BELLE
        prim: -1,0,none
        prim: -1,0,none
def: cross run[sel]
  in: 6
  select: [sel]
    select: RIGHT OF CENTER // xxx?
      prim: -2, 1, left
      prim: -1, 2, left
    select: LEFT OF CENTER
      prim: 2,1,right
      prim: 1,2,right
  select: ALL // ie, others (same as run)
    select: BEAU
      prim: 1,0,none
      prim: 1,0,none
    select: BELLE
      prim: -1,0,none
      prim: -1,0,none
*/

def: zoom
  in: 4
  from: GENERAL BOX
    select: BEAU
      call: mirror(_right single zoom)
    select: BELLE
      call: _right single zoom
def: _right single zoom
  from: TANDEM
    select: LEADER
      ipart:
        prim: 1,1,right
        prim: 2,1,right
      ipart:
        prim: 1,2,right
        prim: 1,1,right
    select: TRAILER
      ipart:
        prim: 0,1,none
      ipart:
        prim: 0,1,none
def: veer left
  in: 2
  call: as couples(_single veer left)
def: veer right
  call: mirror(veer left)
def: _single veer left
  from: FACING DANCERS, LH MINIWAVE
  call: _extend
  
def: turn thru
  in: 4 // from mini-wave; 6 from facing?
  from: FACING DANCERS
  call: touch 1/2, extend

def: touch
  in: 2
  call: step to a wave
def: left touch
  call: mirror(touch)
/*
def: touch[n]
  call: fractional([n], _touch 4/4)
*/
def: _touch 4/4
  in: 8
  ipart:
   call: step to a wave, cast 1/4
  ipart:
   call: cast 1/4
  ipart:
   call: cast 1/4
  ipart:
   call: cast 1/4

/*
def: touch[n]
  call: touch, cast[n]
def: cast[n]
  call: [n] (_cast 4/4)
*/
def: circulate // all-8
  in: 4
  from: PARALLEL GENERAL LINES
    call: concentric(box circulate)
  from: GENERAL COLUMNS
    select: NUMBER 1
      call: _lead circ
    select: ALL // others
      call: _trail circ
def: _lead circ // leaders part of a box/column circulate
  prim: in 1, 1, in
  prim: in 1, 1, in
def: _trail circ // trailers part of a box/column circulate
  prim: 0,1,none
  prim: 0,1,none
def: box circulate
  in: 4 // not official
  from: GENERAL BOX
    select: LEADER
      call: _lead circ
    select: TRAILER
      call: _trail circ
def: couples circulate
  call: as couples(box circulate)
def: spin the top
  in: 8 // from wave
  from: RH WAVE, LH WAVE // any hand
    call: swing, fan the top
def: walk and dodge
  in: 4
  call: walk others dodge(TRAILER)
/*
def: walk others dodge[sel]
  in: 4
  from: GENERAL BOX
    select: [sel]
      prim: 0,1,none
      prim: 0,1,none
    select: ALL // others
      select: BEAU
        prim: 1,0,none
        prim: 1,0,none
      select: BELLE
        prim: -1,0,none
        prim: -1,0,none
*/
def: hinge
  in: 2
  call: 1/2(trade)
def: couples hinge
  in: 3
  call: as couples(hinge)
def: REAL recycle // xxx
  in: 4
  ipart:
    call: fold(centers), breathe
  ipart:
    call: counter rotate 1/4
  ipart:
    call: roll
def: recycle // xxx cheat definition, for the present
  in: 4
  ipart: // this definition isn't valid for fractionalization
    call: hinge, box circulate, quarter in
def: scoot back
  in: 6
  from: RH BOX, LH BOX
    select: TRAILER
      ipart:
        prim: 0,1,none
        prim: in 1,1,in
      ipart:
        prim: in 1,1,in
        prim: 0,1,none
    select: LEADER
      ipart:
        prim: in 1,1,in
      ipart:
        prim: in 1,1,in
  // XXX: scoot back from quarter tag
/*
def: tag[atc, n]
  ipart:
    call: [atc], _fractional(4*n, extend)
// or else: n=0->atc; else fractional(n, part(atc,extend), part(extend), part(extend), part(extend))
def: _atc_tag
  in: 2
  from: GENERAL LINE
    prim: 0, 0, in
        
def: tag the line
  in: 6 // xxx ?
  call: tag(_atc tag, 1)
  
def: dixie style
  in: 6
  from: FACING COUPLES
  ipart: // "girls right pull by"
    select: BEAU
      prim: 1,-1,none
      prim: 0,-1,none
    select: BELLE
      prim: -2,1,none
      prim: 1,1,none
  ipart:
    call: mirror(touch 1/4)

def: face right
  in: 2
  prim: 0,0,right
def: face left
  in: 2
  prim: 0,0,left

/*
def: fold[sel]
  in: 2
  select: [sel]
    select: BEAU
      prim: 1,3,right
      prim: 1,1,right
    select: BELLE
      prim: -1,3,left
      prim: -1,1,left
  select: ALL // others
    prim: 0,0,none
def: cross fold[sel]
  in: 4
  select: [sel]
    select: RIGHT OF CENTER
      prim: -2,3,left
      prim: -1,2,left
    select: LEFT OF CENTER
      prim: 2,3,right
      prim: 1,2,right
  select: ALL // others
    prim: 0,0,none
*/
