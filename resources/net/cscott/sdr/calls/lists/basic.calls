program: basic

// prim is <over,forward>; always dancer relative
def: nothing
 prim: 0,0,none

def: trade
  from: COUPLE
    in: 6
    select: BEAU
      prim: 1, 3, right
      prim: -3,1, right
    select: BELLE
      prim: -1, 1, left
      prim: -1, 1, left
  from: RH MINIWAVE, LH MINIWAVE
    in: 4
    prim: in 1,1,in
    prim: in 1,1,in
  /*
  from: GENERAL LINE
    in: 4
    condition: TWO SELECTED
    condition: not(SELECTED ARE TBONED)
    call: ignore the others (trade) // this is a concept application
  */
def: couples trade
  call: as couples(trade)

def: forward and back
  in: 4
  part:
    from: FACING COUPLES
      prim: 0, 1,none
      prim: 0,-1,none

def: dosado
  optional: LEFT
  in: 6
  from: FACING DANCERS
    prim: -1, 1,none
    prim:  1, 1,none
    prim:  1,-1,none
    prim: -1,-1,none

/*
def: dosado to a wave
  in: 6
  part:
    call: 3/4 (dosado)
*/ // ambiguous =(

def: pass thru
  optional: LEFT
  in: 2
  from: FACING DANCERS
    call: 1/2 (dosado) // untraditional =)

def: double pass thru
  in: 4
  condition: and(PROGRAM AT LEAST(basic), true) // for testing only
  call: tandem(pass thru)

def: pull by
  optional: LEFT
  call: pass thru // at least until i implement hand holds

def: half sashay
  optional: REVERSE
  in: 4
  from: COUPLE
    select: BEAU
      prim: 1, -1, none
      prim: 1,  1, none
    select: BELLE
      prim: -1, 1, none
      prim: -1,-1, none

def: _roll away(sel)
  optional: REVERSE
  spoken: <sel=anyone> roll away
  condition: ARE(sel,BELLE)
  call: roll away // ignore the selector

def: roll away
  optional: REVERSE
  in: 4
  from: COUPLE
    select: BEAU
      ipart:
        prim: 1/2, 0, none
        prim: 1/2, 0, none
      ipart:
        prim: 1/2, 0, none
        prim: 1/2, 0, none
    select: BELLE
      ipart:
        prim: -1/2, 1, left
        prim:  1, 1/2, left
      ipart:
        prim:  1/2,  1, left
        prim:  1, -1/2, left

def: _u turn back(sel)
  spoken: <sel=anyone> u turn back
  // get the turn direction correct if the selected
  // are parts of couples
  call: do your part([sel], u turn back) 

def: u turn back
  in: 2
  from: COUPLE, RH MINIWAVE, LH MINIWAVE
    prim: 0, 0, in
    prim: 0, 0, in
  // XXX: we can u-turn back from other formations, too: turn toward
  // the center in that case?
  /*
  from: ALL FORMATIONS
    call: quarter in, roll // is this right? fails for dancers on centerline.
  from: SINGLE DANCER
    call: quarter right, roll // if all else fails.
  */

def: courtesy turn(n)
  spoken: courtesy turn <n=number>
  call: _fractional(n, _courtesy turn 4/4)

def: _courtesy turn 4/4
  in: 8
  call: wheel around // modulo hand hold

def: _right arm turn 1/2
  in: 4
  from: RH MINIWAVE
  call: trade // modulo hand hold
def: chain down the line
  in: 8
  from: RH TWO-FACED LINE
  call: centers(right arm turn 1/2, courtesy turn(3/4))

def: two ladies chain(sel)
  spoken: two <sel=genders> chain // 'two ladies chain'
  in: 8
  from: FACING COUPLES
  condition: ARE(sel, BELLE)
  call: 1/4(wheel around), chain down the line

def: flutter wheel
  optional: REVERSE
  in: 8
  from: FACING COUPLES
  call: 1/4(wheel around), centers(right arm turn 1/2), 2(split counter rotate)

def: lead right
  in: 4
  call: as couples(_single lead right)
def: lead left
  call: left(lead right)
def: _single lead right
  from: FACING DANCERS
  prim: 1, 1, right
def: right and left thru
  in: 6
  from: FACING COUPLE
  call: right pull by, courtesy turn(1/2)
def: left and right thru
  call: left(right and left thru)
def: star thru
  in: 4
  from: FACING DANCERS
  condition: not(or(ALL(BOYS), ALL(GIRLS)))
  call: slide thru // modulo styling
def: slide thru
  in: 4
  from: FACING DANCERS
  ipart:
    part:
      call: pull by
    part:
      select: BOY
        call: quarter right
      select: GIRL
        call: quarter left
def: bend the line
  in: 4
  call: as couples(_single bend)
def: _single bend
  from: COUPLE, RH MINIWAVE, LH MINIWAVE
    call: quarter in
def: california twirl
  in: 4
  from: COUPLE
    select: BEAU
      condition: ALL(BOY) // boys must be beaus
      prim: 1, 3, right // copied from partner trade
      prim: -3,1, right
    select: BELLE
      condition: ALL(GIRL) // girls must be belles
      prim: -1, 1, left // copied from partner trade
      prim: -1, 1, left
def: wheel around
  optional: REVERSE
  in: 4
  call: 4(_quarter wheel)
def: _quarter wheel
  from: COUPLE
    select: BEAU
      prim: 1, -1, left
    select: BELLE
      prim: -1, 1, left

def: box the gnat
  in: 4
  from: FACING DANCERS
    condition: not(or(ALL(BOYS), ALL(GIRLS)))
    call: _and roll(touch 1/4) // modulo styling

def: step to a wave
  in: 2 // not official
  from: FACING DANCERS
    call: _extend // the general case

def: step thru
  in: 2 // not official
  from: RH MINIWAVE, LH MINIWAVE
    call: _extend // the general case

def: balance
  in: 4
  prim: 0, 1/2, none
  prim: 0,-1/2, none // modulo styling -- and breathing?
def: pass the ocean
  in: 4
  call: pass thru, quarter in, _extend
def: extend
  optional: LEFT
  in: 2
  // XXX level/formation restrictions
  // XXX at basic/mainstream, extend is from 1/4 tag only
  call: _extend
def: _extend // the general case
  from: SINGLE DPT
    call: centers(extend)
  from: LH BOX
    call: mirror(_extend)
  from: RH BOX
    select: LEADER
      prim: 1,1, none
    select: TRAILER
      prim: 0,1, none
  from: LH MINIWAVE
    call: mirror(_extend)
  from: RH MINIWAVE
    prim: 1,1, none
  from: FACING DANCERS
    prim: -1,1,none
def: swing thru
  optional: LEFT
  in: 6
  from: RH WAVE
    call: right arm turn 1/2, centers(left(right arm turn 1/2))
  from: LH WAVE
    call: centers(right arm turn 1/2), left(right arm turn 1/2)

// NOTE THAT 'leads run' = 'IN YOUR BOX, leads run'
// NOTE THAT 'boys run' = 'IN YOUR COUPLES, boys run'
// ie, we need to select a formation to get dancers tagged first.
def: run(sel)
  spoken: <sel=anyone> run
  in: 4
  // XXX: this definition doesn't currently apply to T-boned formations.
  from: GENERAL LINE, GENERAL BOX, COUPLE, RH MINIWAVE, LH MINIWAVE
    // we can't use in/out in primitives here because (1) centers of waves
    // run out, while ends of waves run in, and (2) the "run-around" dancer
    // stands on the centerline of the formation at one point.
    select: [sel]
      select: BEAU
        prim: 1,1,right
        prim: 1,1,right
      select: BELLE
        prim: -1,1,left
        prim: -1,1,left
    select: ALL // ie, others
      select: BEAU
        prim: 1,0,none
        prim: 1,0,none
      select: BELLE
        prim: -1,0,none
        prim: -1,0,none

def: cross run(sel)
  spoken: <sel=anyone> cross run
  in: 6
  // XXX: from other formations (t-bones, etc)
  from: GENERAL LINE
    select: [sel]
      prim: in 2, 1, in
      prim: in 1, 2, in
    select: ALL // ie, others (same as run)
      select: BEAU
        prim: 1,0,none
        prim: 1,0,none
      select: BELLE
        prim: -1,0,none
        prim: -1,0,none

def: zoom
  in: 4
  from: GENERAL BOX
    select: BEAU
      call: mirror(_right single zoom)
    select: BELLE
      call: _right single zoom

def: _right single zoom
  from: TANDEM
    select: LEADER
      ipart:
        prim: 1,1,right
        prim: 2,1,right
      ipart:
        prim: 1,2,right
        prim: 1,1,right
    select: TRAILER
      ipart:
        prim: 0,1,none
      ipart:
        prim: 0,1,none

def: veer left
  in: 2
  call: as couples(_single veer left)
def: veer right
  call: mirror(veer left)
def: _single veer left
  from: FACING DANCERS, LH MINIWAVE
  call: _extend
  
def: turn thru
  optional: LEFT
  in: 4 // from mini-wave; 6 from facing?
  from: FACING DANCERS
  call: touch 1/2, extend

def: touch
  optional: LEFT
  in: 2
  call: step to a wave

def: _touch(n) // XXX: touch 3/4 is definitely mainstream, not basic
  spoken: touch <n=number>
  call: touch, cast([n])

def: circulate // all-8
  spoken: (all eight)? circulate
  in: 4
  from: PARALLEL GENERAL LINES
    call: concentric(box circulate)
  from: GENERAL COLUMNS
    call: column circulate
def: column circulate
  from: GENERAL COLUMNS
    select: NUMBER 1
      call: _lead circ
    select: ALL // others
      call: _trail circ

def: _lead circ // leaders part of a box/column circulate
  prim: in 1, 1, in
  prim: in 1, 1, in
def: _trail circ // trailers part of a box/column circulate
  prim: 0,1,none
  prim: 0,1,none

def: box circulate
  in: 4 // not official
  from: GENERAL BOX
    select: LEADER
      call: _lead circ
    select: TRAILER
      call: _trail circ

def: couples circulate
  call: as couples(box circulate)

def: spin the top
  optional: LEFT
  in: 8 // from wave
  from: RH WAVE, LH WAVE // any hand
    call: swing, fan the top

def: walk and dodge
  in: 4
  call: walk others dodge(TRAILER)

def: walk others dodge(sel)
  spoken: <sel=anyone> walk (others|<anyone>) dodge
  in: 4
  from: GENERAL BOX
    select: [sel]
      condition: SELECTED ARE(TRAILER)
      prim: 0,1,none
      prim: 0,1,none
    select: ALL // others
      select: BEAU
        prim: 1,0,none
        prim: 1,0,none
      select: BELLE
        prim: -1,0,none
        prim: -1,0,none

def: hinge
  optional: LEFT
  in: 2
  call: 1/2(trade)
def: couples hinge
  in: 3
  call: as couples(hinge)
def: couples left hinge
  call: left(couples hinge)
def: _REAL recycle // xxx
  in: 4
  ipart:
    call: fold(centers), breathe
  ipart:
    call: counter rotate 1/4
  ipart:
    call: roll
def: recycle // xxx cheat definition, for the present
  in: 4
  ipart: // this definition isn't valid for fractionalization
    call: hinge, box circulate, quarter in
def: scoot back
  optional: LEFT
  in: 6
  from: RH BOX, LH BOX
    select: TRAILER
      ipart:
        prim: 0,1,none
        prim: in 1,1,in
      ipart:
        prim: in 1,1,in
        prim: 0,1,none
    select: LEADER
      ipart:
        prim: in 1,1,in
      ipart:
        prim: in 1,1,in
  // XXX: scoot back from quarter tag

def: _tag(atc, n)
  ipart:
    call: [atc], _finish_tag([n])
def: _finish_tag(n)
  from: FACING_TANDEMS
    condition: EQUAL([n], 0)
    call: nothing
  from: FACING_TANDEMS
    condition: GREATER([n], 0)
    call: _fractional(_multiply_num(4,[n]), extend)
// or else: n=0->atc; else fractional(n, part(atc,extend), part(extend), part(extend), part(extend))

def: _atc_tag
  in: 2
  from: GENERAL LINE
    prim: 0, 0, in
        
def: tag the line
  optional: LEFT
  spoken: tag the line (all the way (through)?)?
  in: 6 // xxx ?
  call: _tag(_atc tag, 1)
def: _tag the line(n)
  optional: LEFT
  spoken: tag the line <n=number>
  condition: GREATER(1, n)
  call: _tag(_atc tag, n)
  
def: dixie style
  spoken: dixie style (to a wave)?
  in: 6
  from: FACING COUPLES
  ipart: // "girls right pull by"
    select: BEAU
      prim: 1,-1,none
      prim: 0,-1,none
    select: BELLE
      prim: -2,1,none
      prim: 1,1,none
  ipart:
    call: mirror(touch 1/4)

def: face right
  in: 2
  prim: 0,0,right
def: face left
  in: 2
  prim: 0,0,left

def: fold(sel)
  spoken: <sel=anyone> fold
  in: 2
  select: [sel]
    select: BEAU
      prim: 1,3,right
      prim: 1,1,right
    select: BELLE
      prim: -1,3,left
      prim: -1,1,left
  select: ALL // others
    prim: 0,0,none

def: cross fold(sel)
  spoken: <sel=anyone> cross fold
  in: 4
  from: GENERAL LINE
    select: [sel]
      prim: in 2, 3, in
      prim: in 1, 2, in
    select: ALL // others
      prim: 0,0,none

def: square thru(n)
  optional: LEFT
  spoken: square thru <n=number> (hands (around|round)?)?
  from: FACING COUPLES
    condition: and(greater([n],0),not(greater([n],1)))
    in: 2
    call: _fractional([n], pull by)
  from: FACING COUPLES
    condition: greater([n], 0)
    in: 2
    ipart: // actually, square thru N probably has N distinct parts.
      call: pull by, quarter in, left(square thru(_subtract_num(n,1)))
