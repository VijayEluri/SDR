program: basic

// prim is <over,forward>; always dancer relative
def: nothing
 prim: 0,0,none

def: face right
  in: 2
  prim: 0,0,right

def: face left
  in: 2
  prim: 0,0,left

def: face in
  in: 2
  prim: 0,0,in

def: face out
  in: 2
  prim: 0,0,out

// work out grammar implications
def: anyone while others(sel, c1, c2=nothing)
  /* default to 'nothing' if the 'while...' isn't present */
  spoken: [-15] <sel=anyone> <c1=anything> \
                 (while the (others|<anyone>) <c2=anything>)?
  // special case HEADS and SIDES from static square
  from: STATIC SQUARE
    call: _anyone while others static square([sel],[c1],[c2])
  // recognize cases where this really means something like 'concentric'
  from: CENTER HALF
    // the selected must be centers, and no centers can be unselected.
    condition: ARE([sel], CENTER), "Not all selected are centers"
    condition: ARE(CENTER, [sel]), "Not all centers are selected"
    call: _quasi concentric([c1],[c2]) // like concentric, but no adjust after
  from: CENTER HALF // other way 'round
    condition: NOT(ARE([sel], CENTER)), "Some selected are centers"
    condition: NOT(ARE(CENTER, [sel])), "Some centers are selected"
    call: _quasi concentric([c2],[c1])
  from: CENTER HALF
    // same as above, but special cased because END and OUTSIDE tags aren't
    // applied by the CENTER HALF selector.
    condition: OR(CALL IS([sel], END), CALL IS([sel], OUTSIDE))
    call: _quasi concentric([c2],[c1])
  from: ANY // ugly hack to support "boys trade" == "boys trade down the line"
    condition: CALL IS([c1], trade), "Not a trade"
    condition: CALL IS([c2], nothing), "Not just a trade"
    call: trade down the line([sel])
  from: ANY
    call: _anyone while others([sel],[c1],[c2])

// break static square cases out into a special call for efficiency
def: _anyone while others static square(sel, c1, c2)
  // special case 'heads promenade half way while the sides...'
  from: STATIC SQUARE
    condition: AND(CALL IS([sel], HEAD), CALL IS([c1], promenade half way))
    //call: _anyone while others([sel],[c1],and(sides start, [c2]))
    select: HEAD
      call: [c1]
    select: SIDE
      call: sides start, _centers([c2])
  from: STATIC SQUARE
    condition: AND(CALL IS([sel], SIDE), CALL IS([c1], promenade half way))
    //call: _anyone while others([sel],[c1],and(heads start, [c2]))
    select: SIDE
      call: [c1]
    select: HEAD
      call: heads start, _centers([c2])
  // special case 'heads square thru...' from static square
  from: STATIC SQUARE
    condition: CALL IS([sel], HEAD)
    call: heads start, anyone while others([sel],[c1],[c2])
  from: STATIC SQUARE
    condition: CALL IS([sel], SIDE)
    call: sides start, anyone while others([sel],[c1],[c2])

// local helpers
def: _anyone(sel, c1)
  call: anyone while others([sel], [c1], nothing)
def: _centers(c)
  from: CENTER_HALF
    call: _anyone(CENTER, [c])
def: _ends(c)
  from: CENTER HALF
    call: _anyone(END, [c])

def: heads start
 from: STATIC SQUARE
  in: 2
  select: HEAD
   prim: 0, 2, none // "press ahead"
  select: OTHERS
   prim: 0, 0, none // stay where they are

def: sides start
 from: STATIC SQUARE
  in: 2
  select: SIDE
   prim: 0, 2, none // "press ahead"
  select: OTHERS
   prim: 0, 0, none // stay where they are

// callerlab #2: CIRCLE FAMILY
def: circle left(n)
  spoken: circle left <n=fraction>
  call: _fractional(_multiply_num([n],4), _circle left 1/4)
def: circle right(n)
  spoken: circle right <n=fraction>
  call: mirror(circle left([n]))

def: _circle left 1/4
 from: STATIC SQUARE
   in: 4
   part:
     select: BEAU
       prim: -2,2,right,sashay-start sashay-finish
       prim: -2,0,none,sashay-start sashay-finish force-roll-right
     select: BELLE
       prim: -2,0,none,sashay-start sashay-finish force-roll-right
       prim: -2,2,right,sashay-start sashay-finish
 from: FACING COUPLES
   in: 2
   ipart:
     select: BEAU
       prim: 0,2,right,sashay-start sashay-finish
     select: BELLE
       prim: -2,0,right,sashay-start sashay-finish
 from: FACING DANCERS
   in: 2 // not well specified
     prim: -1,1,right,sashay-start sashay-finish

// callerlab #3: FORWARD AND BACK
def: forward and back
  in: 8
  from: FACING COUPLES, STATIC SQUARE // XXX: SUPPRESS BREATHING
    call: _forward 1, _pause, _back 1, _pause
def: _forward 1
  in: 3
  prim: 0, 1, none
def: _back 1
  in: 3
  prim: 0,-1, none
def: _pause
  in: 1
  prim: 0, 0, none

// callerlab #4: DOSADO (see BMS addendum)
def: dosado
  optional: LEFT
  in: 6
  from: FACING DANCERS
    prim: -1, 1,none,sashay-start
    prim:  1, 1,none,sashay-finish
    prim:  1,-1,none,sashay-start
    prim: -1,-1,none,sashay-finish

/*
def: dosado to a wave
  in: 6
  part:
    call: 3/4 (dosado)
*/ // ambiguous =(
// XXX add <anything> to a wave production here, and enforce that
//     <anything> is dosado below the true level of 'to a wave'

// callerlab #5: SWING
// XXX: ambiguity with A2 swing, we'll try to tell by program
//      level and starting formation which is meant.
// XXX: what direction should we face at end?
def: swing
  from: GENERAL LINE
    condition: PROGRAM AT LEAST(A2), "Only partner swing allowed below A2"
    condition: AND(NOT(TBONED(ALL)), \
                   OR(SELECTION PATTERN(BEAU, ____), \
                      SELECTION PATTERN(BEAU, __xx), \
                      SELECTION PATTERN(BEAU, xx__), \
                      SELECTION PATTERN(BEAU, xxxx))), \
               "End and adjacent center must be in mini-wave"
    in: 3
    call: trade
  from: FACING DANCERS, RH MINIWAVE
    call: partner swing

def: partner swing
  spoken: (partner swing) | (swing your partner) | (swing (the|your) corner)
  in: 6
  ipart:
    from: FACING DANCERS
      call: touch, partner swing
    from: RH MINIWAVE
      // XXX: want "_cast_to_promenade", but that requires matching in the
      //      whole formation (so we can still tell where promenade
      //      direction is)
      call: cast(6/4), _break out from swing
def: _break out from swing
  in: 2
  from: RH MINIWAVE
    condition: OR(SELECTION PATTERN(BOY, x_), \
                  SELECTION PATTERN(BOY, _x)), "Same sex swing!"
    select: GIRL
      prim: 0, 0, right
      prim: 0, 0, right
    select: BOY
      prim: 0, 0, none

// callerlab #6: PROMENADE FAMILY

// this is the four-person call.
def: _single promenade 1/4
  in: 4
  from: LH SINGLE PROMENADE
    prim: -2, 2, left
  from: LH DIAMOND
    select: POINT
      prim: -2, 2, left
    select: CENTER
      prim: -1, 2, left
  // all other formations ought to end in LH SINGLE PROMENADE
  // all roll directions should be left
  // XXX: enforce with IfAfter?
  from: LH STAR
    prim: -1, 2, left
  from: LH BOX
    select: LEADER
      prim: -1, 1, left
    select: TRAILER
      prim:  1, 1, none, sashay-start force-roll-left
  from: LH SINGLE QUARTER TAG
    select: CENTER
      prim: -1, 2, left
    select: END
      prim:  2, 2, none, sashay-start force-roll-left
  from: LH SINGLE THREE QUARTER TAG
    ipart:
      select: CENTER
        prim: 1, 0, none, sashay-start sashay-finish force-roll-left
        prim: -2, 2, left
      select: END
        prim: 0, 0, left
        prim: -2, 2, left
  from: LH SINGLE QUARTER ZEE
    select: LEADER
      prim: -1, 2, left
    select: TRAILER
      prim:  1, 2, none, force-roll-left
  from: LH SINGLE THREE QUARTER ZEE
    ipart:
      select: LEADER
        prim: -1, 0, left, sashay-start
        prim: -2, 2, left
      select: TRAILER
        prim: 1, 0, none, sashay-start sashay-finish force-roll-left
        prim: -2, 2, left

// another 4-person promenade
def: _single star promenade 1/4
  in: 4
  from: LH STAR
    prim: -1, 1, left
  // all other formations ought to end in LH STAR
  // all roll directions should be left
  // XXX: enforce with IfAfter?
  from: LH SINGLE PROMENADE
    prim: -2, 1, left
  from: LH DIAMOND
    select: POINT
      prim: -2, 1, left
    select: CENTER
      prim: -1, 1, left

// this is the eight-person call.
def: _single file promenade 1/8
  in: 2
  from: SINGLE FILE PROMENADE
    select: LEADER /* a little bogus, but we'll live */
      prim: -2, 2, left
    select: TRAILER
      prim:  0, 2, none, force-roll-left
  // all other formations ought to end in SINGLE FILE PROMENADE
  // all roll directions should be left
  // XXX: enforce with IfAfter?
  from: LH COLUMN
    select: NUMBER 1
      prim: -2, 0, left, sashay-start
    select: NUMBER 2
      prim:  0, 2, left, sashay-finish
    select: NUMBER 3, NUMBER 4
      prim:  2, 2, none, force-roll-left

def: _single promenade(n)
  call: _fractional(_multiply_num([n], 4), _single promenade 1/4)
def: _single star promenade(n)
  call: _fractional(_multiply_num([n], 4), _single star promenade 1/4)
def: _single file promenade(n)
  call: _fractional(_multiply_num([n], 8), _single file promenade 1/8)

def: _promenade(n)
  from: STATIC SQUARE
    call: 1/2(reverse(wheel around)), _promenade([n])
  from: ANY
    call: _start promenade from facing, as couples(_single promenade([n]))
  // XXX same thing from 1/8 rotated version of this (darn circle choreo)
  from: ANY // PROMENADE, STAR PROMENADE, as couples diamonds, etc.
    call: as couples(_single promenade([n]))
// this is used for 'dosado, promenade': the dosado leaves you facing
def: _start promenade from facing
  in: 2
  from: FACING DANCERS
    condition: and(not(ALL(BOY)), not(ALL(GIRL))), "Same sex promenade"
    select: BOY
      prim: -1, 1, none
      prim:  0, 0, none
    select: GIRL
      prim: -1, 1, right
      prim:  0, 0, right

// as basic defs say, we always go at least 1/4
def: promenade home
  ipart:
    from: ANY // use ANY to guarantee no rotation
      // we're going to the head beau's home.
      condition: OR(SELECTION PATTERN(DANCER 1, ___x____), \
                    SELECTION PATTERN(DANCER 2, ___x____))
      from: PROMENADE, STAR PROMENADE
        in: 4
        call: as couples(_and roll(_single promenade 1/4))
    from: ANY // no rotation
      condition: OR(SELECTION PATTERN(DANCER 1, _____x__), \
                    SELECTION PATTERN(DANCER 2, _____x__))
      from: PARALLEL LH TWO-FACED LINES
        in: 4
        call: as couples(_and roll(_single promenade 1/4))
    // XXX: might need to add extra patterns here to prevent overshoot
    //      if promenading home from exactly 1/4 away from other starting
    //      formations -- or use IfAfter?
    from: ANY
      call: _promenade(1/4), _promenade check

// Continue to 'promenade home' after checking to ensure dancer 1 or 2
// is a beau.  This ensures that our recursion will terminate!
def: _promenade check
  from: PROMENADE
    condition: OR(ARE(DANCER 1, BEAU), ARE(DANCER 2, BEAU)), "Whose home?"
    call: promenade home

def: promenade half way
  in: 8
  ipart:
    call: _promenade(1/2), 1/2(wheel around)

def: wrong way promenade
  call: mirror(promenade home)

def: _star promenade(n)
  spoken: star promenade <n=fraction>
  call: as couples(_single star promenade([n]))

// we always go at least 1/4, like for promenade home
def: star promenade home
  ipart:
    from: ANY // use ANY to guarantee no rotation
      // we're going to the head beau's home.
      condition: OR(SELECTION PATTERN(DANCER 1, ___x____), \
                    SELECTION PATTERN(DANCER 2, ___x____))
      from: PROMENADE, STAR PROMENADE
        in: 4
        call: as couples(_and roll(_single star promenade 1/4))
    from: ANY
      call: _star promenade(1/4), star promenade home

// we always go at least 1/4, like for promenade home
def: single file promenade home
  optional: REVERSE
  spoken: single file promenade (home)?
  ipart:
    from: ANY // use ANY to guarantee no rotation
      condition: SELECTION PATTERN(DANCER 1, __x_____)
      from: SINGLE FILE PROMENADE, LH COLUMN
        in: 4
        call: _and roll(_single file promenade(1/4))
    from: ANY
      call: _single file promenade 1/8, single file promenade home

def: promenade inside(sel)
  // what formation does this end in?
  spoken: four <sel=genders> promenade inside
  ipart: // 8 beats total
    call: _in(1, _start promenade inside([sel])), \
          _in(5, _centers(_single promenade(3/4))), \
          _in(2, _centers(_finish promenade inside))
def: _start promenade inside(sel)
  in: 2
  from: STATIC SQUARE
    select: [sel]
      prim: in 1, 1, right, sashay-finish
    select: OTHERS
      prim: in 1, -1, none, sashay-start sashay-finish
def: _finish promenade inside
  in: 4
  from: LH SINGLE PROMENADE
    prim: -2, 2, none, force-roll-left

// callerlab #7: ALLEMANDE FAMILY
// XXX in circle choreo, boys prefer turning to the left, girls to the right
// XXX DEFINE ME

// callerlab #8: ARM TURNS
def: _right arm turn 1/2
  in: 4
  from: RH MINIWAVE
  call: trade // modulo hand hold

def: _left arm turn 1/2
  call: left(_right arm turn 1/2)

// callerlab #9: RIGHT AND LEFT GRAND FAMILY
// XXX DEFINE ME

// callerlab #10: STAR FAMILY
// XXX DEFINE ME

// callerlab #11: PASS THRU
def: pass thru
  optional: LEFT
  in: 2
  from: FACING DANCERS
    prim: 0, 1, none
    prim: 0, 1, none

def: pull by
  optional: LEFT
  call: pass thru // at least until i implement hand holds


// callerlab #12: SPLIT THE OUTSIDE COUPLE/SPLIT TWO (see BMS addendum)
// XXX DEFINE ME

// callerlab #13: HALF SASHAY FAMILY
def: half sashay
  optional: REVERSE
  in: 4
  from: COUPLE
    select: BEAU
      prim: 1, -1, none, sashay-start sashay-finish
      prim: 1,  1, none, sashay-start sashay-finish
    select: BELLE
      prim: -1, 1, none, sashay-start sashay-finish
      prim: -1,-1, none, sashay-start sashay-finish

// semi-legal alternatives to "roll away" to make it clearer who's
// doing what -- usually called when it's (unusually) the boys rolling
// away.  Note that we get a grammar conflict if this is just
// <anyone> roll away: consider for instance "boys roll away" with the
// boys the centers of right-hand two-faced lines.  Do you mean "centers
// roll away (each other)" or "ends roll away the centers".  So we don't
// allow that form, preferring the "<anyone> roll away the <anyone>" where
// the ambiguity is resolved.
def: _roll away(sel1,sel2)
  // Not reversable: the call would be "boys reverse roll away", not
  //                 "reverse boys roll away"
  // (also "reversable" messes with the precedence level)
  spoken: <sel1=anyone> roll away the <sel2=anyone>
  from: COUPLE, TWO-FACED LINE /* allows "ends roll away the centers" */
    condition: ARE([sel1],BEAU), [1] "Those doing the rolling must be beaus"
    condition: ARE([sel2],BELLE), [1] "Those rolling away must be belles"
    call: roll away // ignore the selectors

def: _reverse roll away(sel1,sel2)
  spoken: <sel1=anyone> reverse roll away the <sel2=anyone>
  from: COUPLE, TWO-FACED LINE /* allows "centers reverse roll away the ends" */
    condition: ARE([sel1],BELLE), [1] "Those doing the rolling must be belles"
    condition: ARE([sel2],BEAU), [1] "Those rolling away must be beaus"
    call: reverse(roll away) // ignore the selectors

def: roll away
  optional: REVERSE
  in: 4
  from: COUPLE
    select: BEAU
      ipart:
        prim: 1, 0, none, sashay-start sashay-finish
        prim: 0, 0, none
      ipart:
        prim: 1, 0, none, sashay-start sashay-finish
        prim: 0, 0, none
    select: BELLE
      ipart:
        prim: -1, 2, left
        prim:  0, 0, left
      ipart:
        prim:  1, 2, left, sashay-start sashay-finish
        prim:  0, 0, left
  // old definition, doesn't animate well =(
  from: COUPLE
    select: BEAU
      ipart:
        prim: 1/2, 0, none, sashay-start sashay-finish
        prim: 1/2, 0, none, sashay-start sashay-finish
      ipart:
        prim: 1/2, 0, none, sashay-start sashay-finish
        prim: 1/2, 0, none, sashay-start sashay-finish
    select: BELLE
      ipart:
        prim: -1/2, 1, left
        prim:  1, 1/2, left, sashay-finish
      ipart:
        prim:  1/2,  1, left, sashay-start sashay-finish
        prim:  1, -1/2, left, sashay-start

// XXX DEFINE ME ladies in, men sashay

// callerlab #14: TURN BACK FAMILY

// XXX: from a single quarter tag, currently no one can roll
//      what should happen is that the miniwave rolls toward the
//      handhold, and only the ends have an undefined roll
// XXX: same general idea holds for t-boned formations.
def: u turn back
  in: 2
  from: 2x2, 1x2
    select: BEAU
      prim: 0, 0, right
      prim: 0, 0, right
    select: BELLE
      prim: 0, 0, left
      prim: 0, 0, left
  // we can u-turn back from other formations, too: turn toward
  // the center in that case.
  from: ANY
      prim: 0, 0, in // fails for dancers on centerline.
      call: _in(1, roll) // ie, continue in the same direction
  from: SINGLE DANCER // if all else fails
    prim: 0, 0, right, force-roll-none
    prim: 0, 0, right, force-roll-none

// XXX DEFINE ME: "gents or ladies backtrack"

// callerlab #15: SEPARATE (see BMS addendum)
// XXX DEFINE ME

// callerlab #16: COURTESY TURN
// XXX definition says that 'courtesy turn' without a fraction means
//    "turn to the center of the formation in which it is working"
//    use a pattern predicate for in/out?
def: courtesy turn(n=3/4)
  spoken: courtesy turn (<n=fraction>)?
  from: FACING DANCERS
    call: _in(_multiply_num([n],8), \
              and(_start courtesy turn, courtesy turn([n])))
  from: COUPLE
    call: _fractional([n], _courtesy turn 4/4)

def: _start courtesy turn
  in: 1
  from: FACING DANCERS
    select: BOY
      prim: 0, 0, left
    select: GIRL
      prim: 0, 0, right

def: _courtesy turn 4/4
  in: 8
  call: 2(wheel around) // modulo hand hold

// callerlab #17: LADIES CHAIN FAMILY
def: two ladies chain(sel)
  spoken: two <sel=genders> chain // 'two ladies chain'
  in: 8
  from: FACING COUPLES
    condition: ARE([sel], BELLE), "Named dancers must be belles"
    call: 1/2(wheel around), chain down the line

def: four ladies chain(sel,n=1/2)
  spoken: four <sel=genders> chain (<n=fraction>)?
  // timing = 6 + 2 per 1/4
  ipart:
    from: STATIC SQUARE // XXX or circle (adjust?)
      condition: ARE([sel], BELLE), "Named dancers must be belles"
      condition: NOT(GREATER(1/4, [n])), "Must chain at least 1/4"
      call: _start belles chain
      call: _in(_multiply_num(8,[n]),\
                _centers(reverse(_single star promenade([n]))))
      call: _finish belles chain, _in(4, courtesy turn(3/4))
def: _start belles chain
  in: 1
  from: STATIC SQUARE
    select: BELLE
      prim: in 1, 2, left
    select: BEAU
      prim: in 1, 0, none, sashay-start sashay-finish
def: _finish belles chain
  in: 1
  from: CENTER HALF
    select: CENTER
      prim: -1, 0, none, sashay-start sashay-finish
    select: OTHERS
      prim: 0, -1, left, sashay-finish

def: chain down the line
  in: 8
  from: RH TWO-FACED LINE
    call: _centers(_right arm turn 1/2), courtesy turn(3/4)
  from: LH OCEAN WAVE
    call: _quasi concentric(_right arm turn 1/2, u turn back)
    call: courtesy turn(3/4)

// callerlab #18: DO PASO
// XXX DEFINE ME

// callerlab #19: LEAD RIGHT
def: lead right
  in: 4
  call: as couples(_single lead right)

def: lead left
  call: mirror(lead right)

def: _single lead right
  from: FACING DANCERS
    prim:    1,  0, right 1/8
    prim: -1/2,1/2, right 1/8

// callerlab #20: RIGHT AND LEFT THRU
def: right and left thru
  in: 6
  from: FACING COUPLES
  call: right pull by, courtesy turn(1/2)

def: left and right thru
  call: left(right and left thru)

// callerlab #21: GRAND SQUARE
def: grand square
  from: STATIC SQUARE
    condition: FALSE(), "Who should face in?"
    call: nothing
  from: O DOUBLE PASS THRU
    call: _grand square(nothing, nothing)

def: _grand square(first, last)
  ipart:
    call: _in(4, and([first], _grand square 1/4(face in)))
  ipart:
    call: _grand square 1/4(face in)
  ipart:
    call: _grand square 1/4(face in)
  ipart:
    call: _grand square 1/4(nothing)
  ipart:
    call: _grand square 1/4(face in)
  ipart:
    call: _grand square 1/4(face in)
  ipart:
    call: _grand square 1/4(face in)
  ipart:
    call: _grand square 1/4([last])

def: _grand square 1/4(face)
  in: 4
  ipart:
    from: O DOUBLE PASS THRU, BUTTERFLY DOUBLE PASS THRU
      select: CENTER
        call: _in(3, _back 2), _in(1, [face])
      select: END
        call: _in(3, _forward 2), _in(1, [face])

def: _forward 2
  in: 3
  prim: 0, 2, none
def: _back 2
  in: 3
  prim: 0, -2, none
def: _grand square face(sel)
  in: 1
  select: [sel]
    prim: 0, 0, in
  select: OTHERS
    prim: 0, 0, none

def: face grand square(sel, n=32)
  // XXX boys face grand square, etc?
  spoken: <sel=heads_or_sides> face grand square ( <n=number> steps )?
    call: _fractional(_multiply_num([n],1/32), \
          _grand square(_grand square face([sel]), _grand square face([sel])))

// callerlab #22: STAR THRU
def: star thru
  in: 4
  from: FACING DANCERS
    condition: not(or(ALL(BOY), ALL(GIRL))), "Same sex star thru!"
    call: slide thru // modulo styling

// callerlab #23: CIRCLE TO A LINE
// XXX DEFINE ME

// callerlab #24: BEND THE LINE
def: bend the line
  in: 4
  call: as couples(_single bend)

def: _single bend
  from: COUPLE, MINIWAVE
    prim: 0, 0, in

// callerlab #25: ALL AROUND THE CORNER
// XXX DEFINE ME

// callerlab #26: SEE SAW
def: see saw
  spoken: see saw (your own)?
  in: 8
  call: mirror(all around the corner)

// callerlab #27: SQUARE THRU FAMILY

// timing of square thru is "2 beats per hand"
def: square thru(n)
  optional: LEFT
  spoken: square thru <n=number> (hands (around|round)?)?
  from: FACING COUPLES
    condition: and(greater([n],0),not(greater([n],1)))
    call: _fractional([n], _in(2, pull by))
  from: FACING COUPLES
    condition: greater([n], 1)
    ipart: // does square thru N have N distinct parts?
      call: _in(2, _sq_thru_part), left(square thru(_subtract_num([n],1)))

def: _sq_thru_part
  ipart:
    // definition is:
    //  call: pull by, quarter in
    // but looks better if we blend the quarter in
    prim: 0, 1, none
    prim: 0, 1, in

def: _full_square_thru
  optional: LEFT
  spoken: square thru
  call: square thru(4)

// callerlab #28: CALIFORNIA TWIRL
def: california twirl
  in: 4
  from: COUPLE
    condition: ARE(BEAU, BOY), "Boys must be beaus"
    condition: ARE(BELLE, GIRL), "Girls must be belles"
    call: partner trade // apart from styling, that is.

// callerlab #29: DIVE THRU
// XXX: callerlab says, "the couple whose back is to the center of the square
//      (unless a specific couple is directed) makes an arch..."
//      Are there other formations this can be done from?  Should we support
//      <anyone> dive thru?
def: dive thru
  from: EIGHT CHAIN THRU
    // total 6 beats, but only 2 for the couple diving.
    // (how can we express the overlap?)
    call: _in(2, pass thru), _in(4, _ends(california twirl))

// callerlab #30: WHEEL AROUND
def: wheel around
  optional: REVERSE
  in: 4
  call: 2(_quarter wheel)
def: _quarter wheel
  in: 2
  from: COUPLE
    select: BEAU
      prim: 1, -1, left
    select: BELLE
      prim: -1, 1, left

// callerlab #31: THAR FAMILY (see BMS addendum)
// XXX DEFINE ME

// callerlab #32: SHOOT THE STAR
// XXX DEFINE ME

// callerlab #33: SLIP THE CLUTCH
// XXX DEFINE ME

// callerlab #34: BOX THE GNAT
def: box the gnat
  in: 4
  from: FACING DANCERS
    condition: not(or(ALL(BOY), ALL(GIRL))), "Same sex boxing!"
    call: _and roll(_touch(1/4)) // modulo styling

// callerlab #35: OCEAN WAVE FAMILY (see BMS addendum)

def: step to a wave
  in: 2 // not official
  from: FACING DANCERS
    call: _extend // the general case

def: step thru
  in: 2 // not official
  from: MINIWAVE
    call: _extend // the general case

def: balance
  in: 4
  prim: 0, 1/2, none
  prim: 0,-1/2, none // modulo styling -- and breathing?

// callerlab #36: ALAMO RING FORMATION (see BMS addendum)
// XXX DEFINE ME

// callerlab #37: PASS THE OCEAN
def: pass the ocean
  in: 4
  call: pass thru, quarter in, _extend

// callerlab #38: EXTEND
def: extend
  optional: LEFT
    // at basic/mainstream, extend is from 1/4 tag only
    from: QUARTER TAG
      call: _extend
    from: ANY
      condition: PROGRAM AT LEAST(PLUS), "Not allowed below Plus"
      call: _extend

def: _extend // the general case
  in: 2
  from: SINGLE DOUBLE PASS THRU
    select: LEADER
      prim: -1,1, none
    select: TRAILER
      prim: 0,1, none
  from: LH BOX, LH MINIWAVE, LH SINGLE QUARTER TAG, LH SINGLE THREE QUARTER TAG
    call: mirror(_extend)
  from: RH BOX
    select: LEADER
      prim: 1,1, none
    select: TRAILER
      prim: 0,1, none
  from: RH MINIWAVE
    prim: 1,1, none
  from: FACING DANCERS
    prim: -1,1,none
  from: RH SINGLE QUARTER TAG
    select: CENTER
      prim: 0, 1, none
    select: END
      prim: -1, 1, none
  from: RH SINGLE THREE QUARTER TAG
    select: CENTER
      prim: 1, 1, none
    select: END
      prim: 0, 1, none

// callerlab #39: SWING THRU FAMILY

def: swing thru
  optional: LEFT
  in: 6
  // XXX DEFINE ME: also from alamo ring
  from: RH OCEAN WAVE
    call: _right arm turn 1/2, _centers(_left arm turn 1/2)
  from: LH OCEAN WAVE
    call: _centers(_right arm turn 1/2), _left arm turn 1/2

// callerlab #40: RUN FAMILY

// NOTE THAT 'leads run' = 'IN YOUR BOX, leads run'
// NOTE THAT 'boys run' = 'IN YOUR COUPLES, boys run'
// ie, we need to select a formation to get dancers tagged first.
def: run(sel)
  spoken: <sel=anyone> run
  in: 4
  from: 1x4, BOX, COUPLE, MINIWAVE, 1x2
    // do the select from the line so that 'centers' works right
    call: _with designated([sel], _designees run)

def: _designees run
  // we can't use in/out in primitives here because (1) centers of waves
  // run out, while ends of waves run in, and (2) the "run-around" dancer
  // stands on the centerline of the formation at one point.
  from: 1x2
    condition: not(or(ARE(DESIGNATED, TRAILER), ARE(DESIGNATED, LEADER))),\
               "Designated dancers must be in lines"
    select: DESIGNATED
    // designated must be "in lines" (ie EW) so must match BEAU or BELLE
        select: BEAU
          prim: 1,1,right
          prim: 1,1,right
        select: BELLE
          prim: -1,1,left
          prim: -1,1,left
        select: OTHERS
          // because select does not delete other dancers, need to
          // provide an OTHERS case here.
          prim: 0, 0, none
    select: OTHERS
        select: BEAU
          prim: 1,0,none,sashay-start sashay-finish
          prim: 1,0,none,sashay-start sashay-finish
        select: BELLE
          prim: -1,0,none,sashay-start sashay-finish
          prim: -1,0,none,sashay-start sashay-finish
        select: LEADER
          prim:  0,-1,none
          prim:  0,-1,none
        select: TRAILER
          prim:  0,1,none
          prim:  0,1,none

def: cross run(sel)
  spoken: <sel=anyone> cross run
  in: 6
  // XXX: from other formations (t-bones, etc)
  from: 1x4
    call: _with designated([sel], _designees cross run)

def: _designees cross run
  from: 1x4
    condition: not(or(ARE(DESIGNATED, TRAILER), ARE(DESIGNATED, LEADER))),\
               "Designated dancers must be in lines"
    select: DESIGNATED
      // in order for "do half of everyone cross run" to end in a tidal wave
      // (as JYAW says it should), we do a big step/small step thing, with
      // centers taking the small step first and ends taking the big step 1st
      select: CENTER
        prim: in 1, 1, in
        prim: in 1, 3, in
      select: END
        prim: in 3, 1, in
        prim: in 1, 1, in
      // XXX: with t-boned cross run, the 'in' breaks. gah.
    select: OTHERS
      call: _designees run

// callerlab #41: TRADE FAMILY

def: trade down the line(sel)
  spoken: <sel=anyone> trade down the line
  in: 4
  from: 1x4
    condition: AND(OR(SELECTION PATTERN([sel], _x_x), \
                      SELECTION PATTERN([sel], x_x_)), \
                   NOT(TBONED([sel])))
    select: [sel]
      prim: in 2, 2, in
      prim: in 2, 2, in
    select: OTHERS
      prim: 0, 0, none
      prim: 0, 0, none
  from: 1x4
    condition: AND(SELECTION PATTERN([sel], x__x), NOT(TBONED([sel])))
    select: [sel]
      prim: in 3, 3, in
      prim: in 3, 3, in
    select: OTHERS
      prim: 0, 0, none
      prim: 0, 0, none
  // these cases should really be "trade" not "trade down the line"
  from: 1x4
    condition: AND(OR(SELECTION PATTERN([sel], xx__), \
                      SELECTION PATTERN([sel], __xx), \
                      SELECTION PATTERN([sel], _xx_)), \
                   NOT(TBONED([sel])))
    select: [sel]
      prim: in 1, 1, in
      prim: in 1, 1, in
    select: OTHERS
      prim: 0, 0, none
      prim: 0, 0, none

def: trade
  from: COUPLE
    in: 4
    prim: in 1,1,in
    prim: in 1,1,in
  from: MINIWAVE
    in: 4
    prim: in 1,1,in
    prim: in 1,1,in

def: couples trade
  in: 6
  call: as couples(trade)

def: partner trade
  from: COUPLE
    call: trade

// callerlab #42: WHEEL AND DEAL FAMILY
def: wheel and deal
  in: 4
  call: as couples(single wheel)

// callerlab #43: DOUBLE PASS THRU
def: double pass thru
  in: 4
  call: tandem(pass thru)

// callerlab #44: FIRST COUPLE GO LEFT/RIGHT (see BMS addendum)
def: first couple go left next couple go left
  // ends in promenade
  in: 6 // XXX no callerlab timing given
  from: COMPLETED DOUBLE PASS THRU
    call: as couples(_single go left left)
def: first couple go left next couple go right
  // ends in facing lines
  in: 6 // XXX no callerlab timing given
  from: COMPLETED DOUBLE PASS THRU
    call: as couples(_single go left right)
def: first couple go right next couple go right
  call: mirror(first couple go left next couple go left)
def: first couple go right next couple go left
  call: mirror(first couple go left next couple go right)

def: _single go left left
  ipart:
    from: COMPLETED SINGLE DOUBLE PASS THRU
      // ends in: single promenade
      select: END    // starts at 0, 3 ; ends at -2,0
        prim: -1, 1, left // to -1, 4
        prim: -2, 1, left // to -2, 2
        prim:  0, 2, none, force-roll-left
      select: CENTER // starts at 0, 1 ; ends at  0,2
        prim:  0, 1/2, none // to 0, 1 1/2
        prim:  0, 1/2, none // to 0, 2
        prim:  0, 0, left   // to 0,2
def: _single go left right
  ipart:
    from: COMPLETED SINGLE DOUBLE PASS THRU
      // ends in: facing couple
      select: END    // starts at 0, 3 ; ends at -1, 1
        prim: -1, 1, left // to -1, 4
        prim: -2, 1, left // to -2, 2
        prim: -1, 1, none, force-roll-left
      select: CENTER // starts at 0, 1 ; ends at  1, 1
        prim:  1, 1, right // to 1, 2
        prim:  1, 1, right // to 2, 1
        prim:  1, 0, none, force-roll-right sashay-start sashay-finish

// callerlab #45: ZOOM
def: zoom
  in: 4
  from: BOX, TANDEM COUPLES
    select: BEAU
      call: mirror(_right single zoom)
    select: BELLE
      call: _right single zoom

// XXX redefine using in/out?
def: _right single zoom
  from: TANDEM
    select: LEADER
      ipart:
        prim: 1,1,right
        prim: 2,1,right
      ipart:
        prim: 1,2,right
        prim: 1,1,right
    select: TRAILER
      ipart:
        prim: 0,1,none
      ipart:
        prim: 0,1,none

// callerlab #46: FLUTTERWHEEL FAMILY
def: flutter wheel
  optional: REVERSE
  in: 8
  from: FACING COUPLES
    ipart:
      call: 1/2(wheel around)
      call: _centers(_right arm turn 1/2)
      call: 2(split counter rotate)
      call: 1/2(wheel around)

// callerlab #47: SWEEP A QUARTER
// XXX DEFINE ME

// callerlab #48: VEER FAMILY
def: veer left
  in: 2
  call: as couples(_single veer left)

def: veer right
  call: mirror(veer left)

def: _single veer left
  from: FACING DANCERS, LH MINIWAVE
  call: _extend
  
// callerlab #49: TRADE BY
// XXX DEFINE ME

// callerlab #50: TOUCH 1/4
def: touch
  optional: LEFT
  in: 2
  call: step to a wave

def: _touch(n) // touch 3/4 is mainstream, not basic
  // timing: 2 per quarter
  spoken: touch <n=fraction>
  condition: or(equal([n],1/4), program at least(MAINSTREAM)), \
             "Only touch 1/4 is allowed at Basic"
  call: _in(_multiply_num([n], 8), \
            and(touch, _fractional([n], _cast 4/4)))

// callerlab #51: CIRCULATE FAMILY (see BMS addendum)

// XXX from t-boned columns, the #3 dancer split circs instead of column cir.
//     definition should be FROM: 2x4
def: circulate // all-8
  spoken: (all eight)? circulate
  in: 4
  from: PARALLEL GENERAL LINES
    call: concentric(_box circulate)
  from: GENERAL COLUMNS
    call: column circulate
  from: 2x2
    call: _box circulate

def: column circulate
  from: GENERAL COLUMNS
    select: NUMBER 1
      call: _lead circ
    select: OTHERS
      call: _trail circ
def: single file circulate
  call: column circulate

def: _lead circ // leaders part of a box/column circulate
  prim: in 1, 1, in
  prim: in 1, 1, in
def: _trail circ // trailers part of a box/column circulate
  prim: 0,1,none
  prim: 0,1,none

def: split circulate
  from: PARALLEL GENERAL LINES, GENERAL COLUMNS, ANY
    call: _box circulate // on each side.

def: box circulate
  call: _centers(_box circulate)

def: _box circulate
  // for internal use: this is the 2x2 version of circulate
  in: 4 // not official
  from: 2x2
    select: LEADER
      call: _lead circ
    select: TRAILER
      call: _trail circ

def: couples circulate
  call: as couples(circulate)

// callerlab #52: FERRIS WHEEL

// ferris wheel should be: call: ferris(wheel and deal)
// but ferris is a hard concept to program, and c3b and/or c4 to boot.
// XXX: we'll use the simpler stretch definition for now.
def: ferris wheel
  call: stretch(wheel and deal)
  example: ferris wheel
    before:
    !  ^ ^
    !  A a c C
    !  ^ ^ v v
    !  B b d D
    !      v v
    after:
    !  a A
    !  v v
    !  b B
    !  v v
    !  ^ ^
    !  C c
    !  ^ ^
    !  D d

///////////////////  end of basic list   ///////////////////////
