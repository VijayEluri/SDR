program: basic

// prim is <over,forward>; always dancer relative
def: nothing
 prim: 0,0,none

// work out grammar implications
def: anyone_others(sel, c1, c2=nothing)
  /* default to 'nothing' if the 'while...' isn't present */
  spoken: [-15] <sel=anyone> <c1=anything> \
                 (while the (others|<anyone>) <c2=anything>)?
  // special case 'heads promenade half way while the sides...'
  from: STATIC SQUARE
    condition: AND(CALL IS([sel], HEAD), CALL IS([c1], promenade half way))
    call: anyone_others([sel],[c1],and(sides start, [c2]))
  from: STATIC SQUARE
    condition: AND(CALL IS([sel], SIDE), CALL IS([c1], promenade half way))
    call: anyone_others([sel],[c1],and(heads start, [c2]))
  // special case 'heads square thru...' from static square
  from: STATIC SQUARE
    condition: CALL IS([sel], HEAD)
    call: heads start, anyone_others([sel],[c1],[c2])
  from: STATIC SQUARE
    condition: CALL IS([sel], SIDE)
    call: sides start, anyone_others([sel],[c1],[c2])
  // recognize cases where this really means something like 'concentric'
  from: CENTER HALF
    // the selected must be centers, and no centers can be unselected.
    condition: ARE([sel], CENTER), "Not all selected are centers"
    condition: ARE(CENTER, [sel]), "Not all centers are selected"
    call: _quasi concentric([c1],[c2]) // like concentric, but no adjust after
  from: CENTER HALF // other way 'round
    condition: NOT(ARE([sel], CENTER)), "Some selected are centers"
    condition: NOT(ARE(CENTER, [sel])), "Some centers are selected"
    call: _quasi concentric([c2],[c1])
  from: CENTER HALF
    // same as above, but special cased because END and OUTSIDE tags aren't
    // applied by the CENTER HALF selector.
    condition: OR(CALL IS([sel], END), CALL IS([sel], OUTSIDE))
    call: _quasi concentric([c2],[c1])
  from: ANY // ugly hack to support "boys trade" == "boys trade down the line"
    condition: CALL IS([c1], trade), "Not a trade"
    condition: CALL IS([c2], nothing), "Not just a trade"
    call: trade down the line([sel])
  from: ANY
    call: _anyone_others([sel],[c1],[c2])

// local helpers
def: _anyone(sel, c1)
  call: anyone_others([sel], [c1], nothing)
def: _centers(c)
  call: _anyone(CENTER, [c])

// callerlab #2: CIRCLE FAMILY
def: circle left(n)
  spoken: circle left <n=fraction>
  call: _fractional(_multiply_num([n],4), _circle left 1/4)
def: circle right(n)
  spoken: circle right <n=fraction>
  call: mirror(circle left([n]))

def: _circle left 1/4
 from: STATIC SQUARE
   in: 4
   ipart:
     select: BEAU
       prim: -2,2,right,sashay-start sashay-finish
       prim: -2,0,none,sashay-start sashay-finish force-roll-right
     select: BELLE
       prim: -2,0,none,sashay-start sashay-finish force-roll-right
       prim: -2,2,right,sashay-start sashay-finish
 from: FACING COUPLES
   in: 2
   ipart:
     select: BEAU
       prim: 0,2,right,sashay-start sashay-finish
     select: BELLE
       prim: -2,0,right,sashay-start sashay-finish
 from: FACING DANCERS
   in: 2 // not well specified
     prim: -1,1,right,sashay-start sashay-finish

// callerlab #3: FORWARD AND BACK
def: forward and back
  in: 8
  from: FACING COUPLES, STATIC SQUARE // XXX: SUPPRESS BREATHING
    call: _forward, _pause, _back, _pause
def: _forward
  in: 3
  prim: 0, 1, none
def: _back
  in: 3
  prim: 0,-1, none
def: _pause
  in: 1
  prim: 0, 0, none

// callerlab #4: DOSADO
def: dosado
  optional: LEFT
  in: 6
  from: FACING DANCERS
    prim: -1, 1,none,sashay-start
    prim:  1, 1,none,sashay-finish
    prim:  1,-1,none,sashay-start
    prim: -1,-1,none,sashay-finish

/*
def: dosado to a wave
  in: 6
  part:
    call: 3/4 (dosado)
*/ // ambiguous =(

// callerlab #5: SWING
// XXX: ambiguity with A2 swing, we'll try to tell by program
//      level and starting formation which is meant.
// XXX: what direction should we face at end?
def: swing
  from: GENERAL LINE
    condition: PROGRAM AT LEAST(A2), "Only partner swing allowed below A2"
    condition: AND(NOT(TBONED(ALL)), \
                   OR(SELECTION PATTERN(BEAU, ____), \
                      SELECTION PATTERN(BEAU, __xx), \
                      SELECTION PATTERN(BEAU, xx__), \
                      SELECTION PATTERN(BEAU, xxxx))), \
               "End and adjacent center must be in mini-wave"
    in: 3
    call: trade
  from: FACING DANCERS, RH MINIWAVE
    call: partner swing

def: partner swing
  spoken: (partner swing) | (swing your partner) | (swing (the|your) corner)
  in: 6
  ipart:
    from: FACING DANCERS
      call: touch, partner swing
    from: RH MINIWAVE
      // XXX: want "_cast_to_promenade", but that requires matching in the
      //      whole formation (so we can still tell where promenade
      //      direction is)
      call: cast(6/4), _break out from swing
def: _break out from swing
  in: 2
  from: RH MINIWAVE
    condition: OR(SELECTION PATTERN(BOY, x_), \
                  SELECTION PATTERN(BOY, _x)), "Same sex swing!"
    select: GIRL
      prim: 0, 0, right
      prim: 0, 0, right
    select: BOY
      prim: 0, 0, none

// callerlab #6: PROMENADE FAMILY

// this is the four-person call.
def: _single promenade 1/4
  in: 4
  from: LH SINGLE PROMENADE
    prim: -2, 2, left
  from: LH DIAMOND
    select: POINT
      prim: -2, 2, left
    select: CENTER
      prim: -1, 2, left
  // all other formations ought to end in LH SINGLE PROMENADE
  // all roll directions should be left
  // XXX: enforce with IfAfter?
  from: LH STAR
    prim: -1, 2, left
  from: LH BOX
    select: LEADER
      prim: -1, 1, left
    select: TRAILER
      prim:  1, 1, none, sashay-start force-roll-left
  from: LH SINGLE QUARTER TAG
    select: CENTER
      prim: -1, 2, left
    select: END
      prim:  2, 2, none, sashay-start force-roll-left
  from: LH SINGLE THREE QUARTER TAG
    ipart:
      select: CENTER
        prim: 1, 0, none, sashay-start sashay-finish force-roll-left
        prim: -2, 2, left
      select: END
        prim: 0, 0, left
        prim: -2, 2, left
  from: LH SINGLE QUARTER ZEE
    select: LEADER
      prim: -1, 2, left
    select: TRAILER
      prim:  1, 2, none, force-roll-left
  from: LH SINGLE THREE QUARTER ZEE
    ipart:
      select: LEADER
        prim: -1, 0, left, sashay-start
        prim: -2, 2, left
      select: TRAILER
        prim: 1, 0, none, sashay-start sashay-finish force-roll-left
        prim: -2, 2, left

// another 4-person promenade
def: _single star promenade 1/4
  in: 4
  from: LH STAR
    prim: -1, 1, left
  // all other formations ought to end in LH STAR
  // all roll directions should be left
  // XXX: enforce with IfAfter?
  from: LH SINGLE PROMENADE
    prim: -2, 1, left
  from: LH DIAMOND
    select: POINT
      prim: -2, 1, left
    select: CENTER
      prim: -1, 1, left

// this is the eight-person call.
def: _single file promenade 1/8
  in: 2
  from: SINGLE FILE PROMENADE
    select: LEADER /* a little bogus, but we'll live */
      prim: -2, 2, left
    select: TRAILER
      prim:  0, 2, none, force-roll-left
  // all other formations ought to end in SINGLE FILE PROMENADE
  // all roll directions should be left
  // XXX: enforce with IfAfter?
  from: LH COLUMN
    select: NUMBER 1
      prim: -2, 0, left, sashay-start
    select: NUMBER 2
      prim:  0, 2, left, sashay-finish
    select: NUMBER 3, NUMBER 4
      prim:  2, 2, none, force-roll-left

def: _single promenade(n)
  call: _fractional(_multiply_num([n], 4), _single promenade 1/4)
def: _single star promenade(n)
  call: _fractional(_multiply_num([n], 4), _single star promenade 1/4)
def: _single file promenade(n)
  call: _fractional(_multiply_num([n], 8), _single file promenade 1/8)

def: _promenade(n)
  from: STATIC SQUARE
    call: _fractional(1/2, reverse(wheel around)), _promenade([n])
  from: ANY // PROMENADE, STAR PROMENADE, as couples diamonds, etc.
    call: as couples(_single promenade([n]))

// as basic defs say, we always go at least 1/4
def: promenade home
  optional: REVERSE
  ipart:
    from: ANY // use ANY to guarantee no rotation
      // we're going to the head beau's home.
      condition: OR(SELECTION PATTERN(DANCER 1, ___x____), \
                    SELECTION PATTERN(DANCER 2, ___x____))
      from: PROMENADE, STAR PROMENADE
        in: 4
        call: as couples(_and roll(_single promenade 1/4))
    from: ANY // no rotation
      condition: OR(SELECTION PATTERN(DANCER 1, _____x__), \
                    SELECTION PATTERN(DANCER 2, _____x__))
      from: PARALLEL LH TWO-FACED LINES
        in: 4
        call: as couples(_and roll(_single promenade 1/4))
    // XXX: might need to add extra patterns here to prevent overshoot
    //      if promenading home from exactly 1/4 away from other starting
    //      formations -- or use IfAfter?
    from: ANY
      call: _promenade(1/4), promenade home

def: promenade half way
  optional: REVERSE
  in: 8
  call: _promenade(1/2)

def: _star promenade(n)
  optional: REVERSE
  spoken: star promenade <n=fraction>
  call: as couples(_single star promenade([n]))

// we always go at least 1/4, like for promenade home
def: star promenade home
  optional: REVERSE
  ipart:
    from: ANY // use ANY to guarantee no rotation
      // we're going to the head beau's home.
      condition: OR(SELECTION PATTERN(DANCER 1, ___x____), \
                    SELECTION PATTERN(DANCER 2, ___x____))
      from: PROMENADE, STAR PROMENADE
        in: 4
        call: as couples(_and roll(_single star promenade 1/4))
    from: ANY
      call: _star promenade(1/4), star promenade home

// we always go at least 1/4, like for promenade home
def: single file promenade home
  optional: REVERSE
  spoken: single file promenade (home)?
  ipart:
    from: ANY // use ANY to guarantee no rotation
      condition: SELECTION PATTERN(DANCER 1, __x_____)
      from: SINGLE FILE PROMENADE, LH COLUMN
        in: 4
        call: _and roll(_single file promenade(1/4))
    from: ANY
      call: _single file promenade 1/8, single file promenade home

def: promenade inside(sel)
  // what formation does this end in?
  spoken: four <sel=genders> promenade inside
  ipart: // 8 beats total
    call: _in(1, _start promenade inside([sel])), \
          _in(5, _centers(_single promenade(3/4))), \
          _in(2, _centers(_finish promenade inside))
def: _start promenade inside(sel)
  in: 2
  from: STATIC SQUARE
    select: [sel]
      prim: in 1, 1, right, sashay-finish
    select: OTHERS
      prim: in 1, -1, none, sashay-start sashay-finish
def: _finish promenade inside
  in: 4
  from: LH SINGLE PROMENADE
    prim: -2, 2, none, force-roll-left

// callerlab #7: ALLEMANDE FAMILY

/* we could (should?) define heads start this way.  We'd have to jiggle
 * the grammar to make 'heads start' low enough priority.  Better would
 * be to define a formation adjustment from squared set to 2x4, so you
 * could just say 'heads lead right' at the top of a tip. */
/*
def: _press ahead in 2
  in: 2
    prim: 0, 2, none
def: _heads start(c)
 spoken: heads start <c=anything>
 from: STATIC SQUARE
  select: HEAD
    call: _press ahead in 2
    call: [c]
  select: OTHERS
    call: nothing
*/

def: heads start
 from: STATIC SQUARE
  in: 2
  select: HEAD
   prim: 0, 2, none // "press ahead"
  select: OTHERS
   prim: 0, 0, none // stay where they are

def: sides start
 from: STATIC SQUARE
  in: 2
  select: SIDE
   prim: 0, 2, none // "press ahead"
  select: OTHERS
   prim: 0, 0, none // stay where they are

// XXX this is not actually on the basic list, but it gets us out of
//     the squared set -- which is otherwise hard to do w/o centers/ends!
def: heads pair off
  from: STATIC SQUARE
    in: 4
    select: HEAD
      prim: 0, 2, out
    select: OTHERS
      prim: 0, 0, none
def: sides pair off
  from: STATIC SQUARE
    in: 4
    select: SIDE
      prim: 0, 2, out
    select: OTHERS
      prim: 0, 0, none
// end pair off hack

def: trade down the line(sel)
  spoken: <sel=anyone> trade down the line
  in: 4
  from: 1x4
    condition: AND(OR(SELECTION PATTERN([sel], _x_x), \
                      SELECTION PATTERN([sel], x_x_)), \
                   NOT(TBONED([sel])))
    select: [sel]
      prim: in 2, 2, in
      prim: in 2, 2, in
    select: OTHERS
      prim: 0, 0, none
      prim: 0, 0, none
  from: 1x4
    condition: AND(SELECTION PATTERN([sel], x__x), NOT(TBONED([sel])))
    select: [sel]
      prim: in 3, 3, in
      prim: in 3, 3, in
    select: OTHERS
      prim: 0, 0, none
      prim: 0, 0, none
  // these cases should really be "trade" not "trade down the line"
  from: 1x4
    condition: AND(OR(SELECTION PATTERN([sel], xx__), \
                      SELECTION PATTERN([sel], __xx), \
                      SELECTION PATTERN([sel], _xx_)), \
                   NOT(TBONED([sel])))
    select: [sel]
      prim: in 1, 1, in
      prim: in 1, 1, in
    select: OTHERS
      prim: 0, 0, none
      prim: 0, 0, none

def: trade
  from: COUPLE
    in: 4
    prim: in 1,1,in
    prim: in 1,1,in
  from: MINIWAVE
    in: 4
    prim: in 1,1,in
    prim: in 1,1,in

def: couples trade
  in: 6
  call: as couples(trade)

def: pass thru
  optional: LEFT
  in: 2
  from: FACING DANCERS
    prim: 0, 1, none
    prim: 0, 1, none

def: double pass thru
  in: 4
  call: tandem(pass thru)

def: pull by
  optional: LEFT
  call: pass thru // at least until i implement hand holds

def: half sashay
  optional: REVERSE
  in: 4
  from: COUPLE
    select: BEAU
      prim: 1, -1, none, sashay-start sashay-finish
      prim: 1,  1, none, sashay-start sashay-finish
    select: BELLE
      prim: -1, 1, none, sashay-start sashay-finish
      prim: -1,-1, none, sashay-start sashay-finish

// semi-legal alternatives to "roll away" to make it clearer who's
// doing what -- usually called when it's (unusually) the boys rolling
// away.  Note that we get a grammar conflict if this is just
// <anyone> roll away: consider for instance "boys roll away" with the
// boys the centers of right-hand two-faced lines.  Do you mean "centers
// roll away (each other)" or "ends roll away the centers".  So we don't
// allow that form, preferring the "<anyone> roll away the <anyone>" where
// the ambiguity is resolved.
def: _roll away(sel1,sel2)
  // Not reversable: the call would be "boys reverse roll away", not
  //                 "reverse boys roll away"
  // (also "reversable" messes with the precedence level)
  spoken: <sel1=anyone> roll away the <sel2=anyone>
  from: COUPLE, TWO-FACED LINE /* allows "ends roll away the centers" */
    condition: ARE([sel1],BEAU), [1] "Those doing the rolling must be beaus"
    condition: ARE([sel2],BELLE), [1] "Those rolling away must be belles"
    call: roll away // ignore the selectors

def: _reverse roll away(sel1,sel2)
  spoken: <sel1=anyone> reverse roll away the <sel2=anyone>
  from: COUPLE, TWO-FACED LINE /* allows "centers reverse roll away the ends" */
    condition: ARE([sel1],BELLE), [1] "Those doing the rolling must be belles"
    condition: ARE([sel2],BEAU), [1] "Those rolling away must be beaus"
    call: reverse(roll away) // ignore the selectors

def: roll away
  optional: REVERSE
  in: 4
  from: COUPLE
    select: BEAU
      ipart:
        prim: 1/2, 0, none, sashay-start sashay-finish
        prim: 1/2, 0, none, sashay-start sashay-finish
      ipart:
        prim: 1/2, 0, none, sashay-start sashay-finish
        prim: 1/2, 0, none, sashay-start sashay-finish
    select: BELLE
      ipart:
        prim: -1/2, 1, left
        prim:  1, 1/2, left, sashay-finish
      ipart:
        prim:  1/2,  1, left, sashay-start sashay-finish
        prim:  1, -1/2, left, sashay-start

// XXX: from a single quarter tag, currently no one can roll
//      what should happen is that the miniwave rolls toward the
//      handhold, and only the ends have an undefined roll
// XXX: same general idea holds for t-boned formations.
def: u turn back
  in: 2
  from: GENERAL PARTNERS
    from: COUPLE, MINIWAVE
      prim: 0, 0, in
      call: _in(1, roll) // ie, continue in the same direction
  // we can u-turn back from other formations, too: turn toward
  // the center in that case.
  from: ANY
    call: quarter in, roll // is this right? fails for dancers on centerline.
  from: SINGLE DANCER // if all else fails
    prim: 0, 0, right, force-roll-none
    prim: 0, 0, right, force-roll-none

def: courtesy turn(n)
  spoken: courtesy turn <n=fraction>
  call: _fractional(n, _courtesy turn 4/4)

def: _courtesy turn 4/4
  in: 8
  call: 2(wheel around) // modulo hand hold

def: _right arm turn 1/2
  in: 4
  from: RH MINIWAVE
  call: trade // modulo hand hold

def: chain down the line
  in: 8
  from: RH TWO-FACED LINE
  call: _centers(and(_right arm turn 1/2, courtesy turn(3/4)))

def: two ladies chain(sel)
  spoken: two <sel=genders> chain // 'two ladies chain'
  in: 8
  from: FACING COUPLES
    condition: ARE([sel], BELLE), "Named dancers must be belles"
    call: 1/4(wheel around), chain down the line

def: four ladies chain(sel,n=1/2)
  spoken: four <sel=genders> chain (<n=fraction>)?
  ipart:
    from: STATIC SQUARE
      condition: ARE([sel], BELLE), "Named dancers must be belles"
      condition: NOT(GREATER(1/4, [n])), "Must chain at least 1/4"
      call: _start belles chain, \
            _centers(reverse(_single star promenade([n]))), \
            _finish belles chain, courtesy_turn(3/4)
def: _start belles chain
  from: STATIC SQUARE
    select: BELLE
      prim: in 1, 2, left
    select: BEAU
      prim: in 1, 0, none, sashay-start sashay-finish
def: _finish belles chain
  from: CENTER HALF
    select: CENTER
      prim: 1, 0, none, sashay-start sashay-finish
    select: END
      prim: 0, -1, left, sashay-finish

def: flutter wheel
  optional: REVERSE
  in: 8
  from: FACING COUPLES
  call: 1/4(wheel around), _centers(_right arm turn 1/2), 2(split counter rotate)

def: lead right
  in: 4
  call: as couples(_single lead right)

def: lead left
  call: mirror(lead right)

def: _single lead right
  from: FACING DANCERS
    // XXX: we should be able to do half of this
    prim: 1, 1, right, pass-left

// XXX: hack until we have heads/sides selectors working right
//      or the static square -> 2x4 adjustment
def: heads lead right
  from: STATIC SQUARE
    in: 6
    select: HEAD
      // use a definition which lets us do half a lead right
      // this also ensures we don't animate a wheel thru!
      select: BEAU
        //prim: 2, 4, right
        prim: 2, 2, right 1/8
        prim: -1, 1, right 1/8
      select: BELLE
        //prim: 0, 2, right
        prim:  2, 0, right 1/8
        prim: -2, 0, right 1/8
    select: OTHERS
      prim: 0, 0, none
def: heads lead left
  call: mirror(heads lead right)
def: sides lead right
  from: STATIC SQUARE
    in: 6
    select: SIDE
      // use a definition which lets us do half a lead right
      // this also ensures we don't animate a wheel thru!
      select: BEAU
        //prim: 2, 4, right
        prim: 2, 2, right 1/8
        prim: -1, 1, right 1/8
      select: BELLE
        //prim: 0, 2, right
        prim:  2, 0, right 1/8
        prim: -2, 0, right 1/8
    select: OTHERS
      prim: 0, 0, none
def: sides lead left
  call: mirror(side lead right)
// --- end heads/sides hack ---

def: right and left thru
  in: 6
  from: FACING COUPLES
  call: right pull by, courtesy turn(1/2)

def: left and right thru
  call: left(right and left thru)

def: star thru
  in: 4
  from: FACING DANCERS
    condition: not(or(ALL(BOYS), ALL(GIRLS))), "Same sex star thru!"
    call: slide thru // modulo styling

// I've seen 1/2 slide thru, and 'finish a slide thru' called, so
// pretend that slide thru has two parts.
def: slide thru
  in: 4
  from: FACING DANCERS
  part: 
    call: pass thru
  part:
    select: BOY
      call: quarter right
    select: GIRL
      call: quarter left

def: bend the line
  in: 4
  call: as couples(_single bend)

def: _single bend
  from: COUPLE, MINIWAVE
    call: quarter in

def: california twirl
  in: 4
  from: COUPLE
    select: BEAU
      condition: ALL(BOY), "Boys must be beaus"
      prim: 1, 3, right // copied from partner trade
      prim: -3,1, right
    select: BELLE
      condition: ALL(GIRL), "Girls must be belles"
      prim: -1, 1, left // copied from partner trade
      prim: -1, 1, left

def: wheel around
  optional: REVERSE
  in: 4
  call: 2(_quarter wheel)
def: _quarter wheel
  in: 2
  from: COUPLE
    select: BEAU
      prim: 1, -1, left
    select: BELLE
      prim: -1, 1, left

def: box the gnat
  in: 4
  from: FACING DANCERS
    condition: not(or(ALL(BOYS), ALL(GIRLS))), "Same sex boxing!"
    call: _and roll(_touch(1/4)) // modulo styling

def: step to a wave
  in: 2 // not official
  from: FACING DANCERS
    call: _extend // the general case

def: step thru
  in: 2 // not official
  from: MINIWAVE
    call: _extend // the general case

def: balance
  in: 4
  prim: 0, 1/2, none
  prim: 0,-1/2, none // modulo styling -- and breathing?

def: pass the ocean
  in: 4
  call: pass thru, quarter in, _extend

def: extend
  optional: LEFT
    // at basic/mainstream, extend is from 1/4 tag only
    from: QUARTER TAG
      call: _extend
    from: ANY
      condition: PROGRAM AT LEAST(PLUS), "Not allowed below Plus"
      call: _extend

def: _extend // the general case
  in: 2
  from: SINGLE DOUBLE PASS THRU
    select: LEADER
      prim: -1,1, none
    select: TRAILER
      prim: 0,1, none
  from: LH BOX, LH MINIWAVE, LH SINGLE QUARTER TAG, LH SINGLE THREE QUARTER TAG
    call: mirror(_extend)
  from: RH BOX
    select: LEADER
      prim: 1,1, none
    select: TRAILER
      prim: 0,1, none
  from: RH MINIWAVE
    prim: 1,1, none
  from: FACING DANCERS
    prim: -1,1,none
  from: RH SINGLE QUARTER TAG
    select: CENTER
      prim: 0, 1, none
    select: END
      prim: -1, 1, none
  from: RH SINGLE THREE QUARTER TAG
    select: CENTER
      prim: 1, 1, none
    select: END
      prim: 0, 1, none

def: swing thru
  optional: LEFT
  in: 6
  from: RH OCEAN WAVE
    call: _right arm turn 1/2, _centers(left(_right arm turn 1/2))
  from: LH OCEAN WAVE
    call: _centers(_right arm turn 1/2), left(_right arm turn 1/2)

// NOTE THAT 'leads run' = 'IN YOUR BOX, leads run'
// NOTE THAT 'boys run' = 'IN YOUR COUPLES, boys run'
// ie, we need to select a formation to get dancers tagged first.
def: run(sel)
  spoken: <sel=anyone> run
  in: 4
  // XXX: this definition doesn't currently apply to T-boned formations.
  from: GENERAL LINE, BOX, COUPLE, MINIWAVE
    // do the select from the line so that 'centers' works right
    call: _with designated([sel], _designees run)

def: _designees run
  // we can't use in/out in primitives here because (1) centers of waves
  // run out, while ends of waves run in, and (2) the "run-around" dancer
  // stands on the centerline of the formation at one point.
  from: COUPLE, MINIWAVE
    select: DESIGNATED
        select: BEAU
          prim: 1,1,right
          prim: 1,1,right
        select: BELLE
          prim: -1,1,left
          prim: -1,1,left
    select: OTHERS
        select: BEAU
          prim: 1,0,none,sashay-start sashay-finish
          prim: 1,0,none,sashay-start sashay-finish
        select: BELLE
          prim: -1,0,none,sashay-start sashay-finish
          prim: -1,0,none,sashay-start sashay-finish

def: cross run(sel)
  spoken: <sel=anyone> cross run
  in: 6
  // XXX: from other formations (t-bones, etc)
  from: GENERAL LINE
    call: _with designated([sel], _designees cross run)

def: _designees cross run
  from: GENERAL LINE
    select: DESIGNATED
      // in order for "do half of everyone cross run" to end in a tidal wave
      // (as JYAW says it should), we do a big step/small step thing, with
      // centers taking the small step first and ends taking the big step 1st
      select: CENTER
        prim: in 1, 1, in
        prim: in 1, 3, in
      select: END
        prim: in 3, 1, in
        prim: in 1, 1, in
    select: OTHERS
      call: _designees run

def: zoom
  in: 4
  from: BOX, TANDEM COUPLES
    select: BEAU
      call: mirror(_right single zoom)
    select: BELLE
      call: _right single zoom

def: _right single zoom
  from: TANDEM
    select: LEADER
      ipart:
        prim: 1,1,right
        prim: 2,1,right
      ipart:
        prim: 1,2,right
        prim: 1,1,right
    select: TRAILER
      ipart:
        prim: 0,1,none
      ipart:
        prim: 0,1,none

def: veer left
  in: 2
  call: as couples(_single veer left)

def: veer right
  call: mirror(veer left)

def: _single veer left
  from: FACING DANCERS, LH MINIWAVE
  call: _extend
  
def: turn thru
  optional: LEFT
  in: 4 // from mini-wave; 6 from facing?
  from: FACING DANCERS
  call: touch, trade, _extend

def: touch
  optional: LEFT
  in: 2
  call: step to a wave

def: _touch(n) // touch 3/4 is mainstream, not basic
  spoken: touch <n=fraction>
  condition: or(equal([n],1/4), program at least(MAINSTREAM)), \
             "Only touch 1/4 is allowed at Basic"
  call: touch, _fractional([n], _cast 4/4)

def: circulate // all-8
  spoken: (all eight)? circulate
  in: 4
  from: PARALLEL GENERAL LINES
    call: concentric(split circulate)
  from: GENERAL COLUMNS
    call: column circulate
def: column circulate
  from: GENERAL COLUMNS
    select: NUMBER 1
      call: _lead circ
    select: OTHERS
      call: _trail circ

def: _lead circ // leaders part of a box/column circulate
  prim: in 1, 1, in
  prim: in 1, 1, in
def: _trail circ // trailers part of a box/column circulate
  prim: 0,1,none
  prim: 0,1,none

def: split circulate
  from: PARALLEL GENERAL LINES
    call: _box circulate // on each side.

def: box circulate
  call: _centers(_box circulate)

def: _box circulate
  // for internal use: this is the 2x2 version of circulate
  in: 4 // not official
  from: 2x2
    select: LEADER
      call: _lead circ
    select: TRAILER
      call: _trail circ

def: couples circulate
  call: as couples(_box circulate)

def: spin the top
  optional: LEFT
  in: 8 // from wave
  from: RH OCEAN WAVE, LH OCEAN WAVE // any hand
    call: swing, fan the top

def: walk and dodge
  in: 4
  call: walk others dodge(TRAILER)

def: walk others dodge(sel)
  spoken: <sel=anyone> walk (others|<anyone>) dodge
  in: 4
  from: BOX, FACING COUPLES
    select: [sel]
      condition: SELECTED ARE(TRAILER), "Named dancers can't walk!"
      prim: 0,1,none
      prim: 0,1,none
    select: OTHERS
      select: BEAU
        prim: 1,0,none,sashay-start sashay-finish
        prim: 1,0,none,sashay-start sashay-finish
      select: BELLE
        prim: -1,0,none,sashay-start sashay-finish
        prim: -1,0,none,sashay-start sashay-finish

def: _hinge
  optional: LEFT
  in: 2
  call: 1/2(trade)
def: hinge
  from: MINIWAVE
    call: _hinge
  from: COUPLE
    condition: PROGRAM AT LEAST(A1), "Partner hinge not allowed below A1"
    call: _hinge

def: couples hinge
  in: 3
  call: as couples(_hinge)

def: couples left hinge
  call: left(couples hinge)

def: _REAL recycle // xxx
  in: 4
  ipart:
    call: fold(CENTER), breathe
  ipart:
    call: counter rotate 1/4
  ipart:
    call: roll
def: recycle // xxx cheat definition, for the present
  in: 4
  ipart: // this definition isn't valid for fractionalization
    call: hinge, _box circulate, quarter in

def: scoot back
  optional: LEFT
  in: 6
  from: BOX
    select: TRAILER
      ipart:
        prim: 0,1,none
        prim: in 1,1,in
      ipart:
        prim: in 1,1,in
        prim: 0,1,none
    select: LEADER
      ipart:
        prim: in 1,2,in
      ipart:
        prim: in 2,1,in
  from: SINGLE QUARTER TAG, QUARTER TAG
    call: _extend, trade, _extend

def: _tag(atc, n)
  ipart:
    call: [atc], _finish_tag([n])
def: _finish_tag(n)
  from: SINGLE DOUBLE PASS THRU
    condition: EQUAL([n], 0)
    call: nothing
  from: SINGLE DOUBLE PASS THRU
    condition: GREATER([n], 0)
    call: _fractional(_multiply_num(4,[n]), _extend)
// or else: n=0->atc; else fractional(n, part(atc,extend), part(extend), part(extend), part(extend))

def: _atc tag
  in: 2
  from: GENERAL LINE
    prim: 0, 0, in
        
// half tag = mainstream
// 3/4 tag = plus
def: tag the line
  optional: LEFT
  spoken: tag the line (all the way (through)?)?
  in: 6 // xxx ?
  call: _tag(_atc tag, 1)
def: _tag the line(n)
  optional: LEFT
  spoken: tag the line <n=fraction>
  condition: GREATER(1, [n])
  call: _tag(_atc tag, [n])
  
def: dixie style
  spoken: dixie style (to a wave)?
  in: 6
  from: FACING COUPLES
  ipart: // "girls right pull by"
    select: BEAU
      prim: 1,-1,none
      prim: 0,-1,none
    select: BELLE
      prim: -2,1,none
      prim: 1,1,none
  ipart:
    call: mirror(_touch(1/4))

def: face right
  in: 2
  prim: 0,0,right
def: face left
  in: 2
  prim: 0,0,left

// timing of square thru is "2 beats per hand"
def: square thru(n)
  optional: LEFT
  spoken: square thru <n=number> (hands (around|round)?)?
  from: FACING COUPLES
    condition: and(greater([n],0),not(greater([n],1)))
    call: _fractional([n], _in(2, pull by))
  from: FACING COUPLES
    condition: greater([n], 1)
    ipart: // does square thru N have N distinct parts?
      call: _in(2, _sq_thru_part), left(square thru(_subtract_num([n],1)))

def: _sq_thru_part
  ipart:
    // definition is:
    //  call: pull by, quarter in
    // but looks better if we blend the quarter in
    prim: 0, 1, none
    prim: 0, 1, in

def: _full_square_thru
  optional: LEFT
  spoken: square thru
  call: square thru(4)
