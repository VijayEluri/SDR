program: c1

def: press ahead
  // XXX: no top-level breathing should be done
  // XXX: we ought to ensure that collisions don't occur
  prim: 0, 1, none
  prim: 0, 1, none

def: press back
  // XXX: no top-level breathing should be done
  // XXX: we ought to ensure that collisions don't occur
  prim: 0, -1, none
  prim: 0, -1, none

def: alter the wave
  call: quarter the alter(1/2, 3/4, 1/2)

def: concentric(c)
  spoken: concentric <c=anything>
  option: CONCEPT
  // try "center wave" as centers
  from: GENERAL QUARTER TAG, TWIN GENERAL DIAMONDS
    call: _concentric([c], [c])
  from: CENTER HALF
    call: _concentric([c], [c])

def: counter rotate(n=1/4)
  spoken: counter rotate (<n=fraction>)?
  from: ANY
    // 4 dancer version, 4 beats per quarter
    condition: equal num(NUM DANCERS(), 4)
    call: _fractional(_multiply num([n], 4), _in(4, _counter rotate 1/4))
  from: ANY
    // 8 dancer version, no official timing.  we'll say 6 beats
    call: _fractional(_multiply num([n], 4), _in(6, _counter rotate 1/4))

/*
def: cross roll to a wave
  ends in: WAVE
  call: cross roll
def: cross roll to a line
  ends in: LINE // XXX really, "does not end in wave")
  call: cross roll
def: cross roll
  // XXX: centers cross run while ends run; centers pass outside of ends
def: switch the line
  from: LINE OF 4
  // XXX: centers run while ends cross run
  // XXX: look at bill's book under "run wild" for 1/2 way point
  //      centers take the outside track
*/

def: dixie diamond
  call: dixie style, _finish dixie diamond
def: _finish dixie diamond
  in: 2
  from: 1x4
    call: _quasi concentric(hinge, u turn back)

def: galaxy circulate
  in: 4
  from: GENERAL GALAXY
    select: and(CENTER, MATCH(_INOUT PATTERN(), "o")) // leaders in box
      prim: in 1, 2, in
    select: and(CENTER, MATCH(_INOUT PATTERN(), "i")) // trailers in box
      prim: out 2, 2, none, sashay-start sashay-finish
    select: and(OUTSIDE 4, MATCH(_FACING PATTERN(), "[v^]"))
      prim: in 2, 2, none, sashay-start sashay-finish
    select: OUTSIDE 4 // point on axis
      prim: in 2, 1, in

def: butterfly(c)
  spoken: butterfly <c=anything>
  option: CONCEPT
  call: _butterfly([c])
def: o(c)
  spoken: o <c=anything>
  option: CONCEPT
  call: _o([c])

def: _start butterfly
  from: GENERAL BUTTERFLY
    select: CENTER
      prim: 0, 0, none, preserve-roll
    select: OTHERS
      prim: in 2, 0, none, sashay-start sashay-finish preserve-roll
def: _finish butterfly
  from: GENERAL COLUMNS
    select: CENTER
      prim: 0, 0, none, preserve-roll
    select: OTHERS
      prim: out 2, 0, none, sashay-start sashay-finish preserve-roll
  from: PARALLEL GENERAL LINES
    select: CENTER
      prim: 0, 0, none, preserve-roll
    select: OTHERS
      prim: 0, out 2, none, preserve-roll
  from: ANY // can't put back the distortion
    prim: 0, 0, none, preserve-roll

def: _start o
  from: GENERAL O
    select: CENTER
      prim: in 2, 0, none, sashay-start sashay-finish preserve-roll
    select: OTHERS
      prim: 0, 0, none, preserve-roll
def: _finish o
  from: GENERAL COLUMNS
    select: CENTER
      prim: out 2, 0, none, sashay-start sashay-finish preserve-roll
    select: OTHERS
      prim: 0, 0, none, preserve-roll
  from: PARALLEL GENERAL LINES
    select: CENTER
      prim: 0, out 2, none, preserve-roll
    select: OTHERS
      prim: 0, 0, none, preserve-roll
  from: ANY // can't put back the distortion
    prim: 0, 0, none, preserve-roll

// XXX: square chain thru to a wave ... general 'to a wave' suffix?
// see 'square thru' (basic) and 'square chain thru' (a1) definitions
def: square chain the top
  option: LEFT
  from: mixed(RH OCEAN WAVE, FACING COUPLES)
    ends in: formation(BACK TO BACK COUPLES)
    call: _square thru part, left(spin the top), left(turn thru)

def: swing the fractions
  option: LEFT
  call: _those who can turn right(1/4)
  call: _those who can turn left(1/2)
  call: _those who can turn right(3/4)
  call: _those who can turn left(1/2)
  call: _those who can turn right(1/4)
