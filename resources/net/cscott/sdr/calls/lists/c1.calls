program: c1

def: press ahead
  // XXX: no top-level breathing should be done
  // XXX: we ought to ensure that collisions don't occur
  prim: 0, 1, none
  prim: 0, 1, none

def: press back
  // XXX: no top-level breathing should be done
  // XXX: we ought to ensure that collisions don't occur
  prim: 0, -1, none
  prim: 0, -1, none

def: ah so
  in: 4
  ipart:
    from: OCEAN WAVE, GENERAL LINE
      // vic sez: "many callers believe Ah So can only be done from a Wave."
      from: OCEAN WAVE
        call: hinge, _box counter rotate(1/4)
      from: TWO-FACED LINE, ONE-FACED LINE
        call: wheel and deal
      from: SINGLE INVERTED LINE
        call: _ah so part 1, hinge
      from: LH THREE-AND-ONE LINE
        call: mirror(ah so)
      from: RH THREE-AND-ONE LINE
        call: _ah so part 1, _ah so part 2
      from: GENERAL LINE
        // designate the centers who are not part of a couple
        // (use COUPLE NO TAGS so that any BEAU or BELLE are part of miniwave)
        call: _with designated(\
                  AND(CENTER, \
                      formation(mixed(RH MINIWAVE,LH MINIWAVE,COUPLE NO TAGS),\
                                OR(BEAU,BELLE))), \
                  _designated ah so)
def: _ah so part 1
  from: SINGLE INVERTED LINE
    select: BEAU
      select: END
        prim: in 3, 3, in
      select: CENTER
        prim: in 1, -1, out
    select: BELLE
      select: END
        prim: in 3, -1, in, sashay-start
      select: CENTER
        prim: in 1, 3, out
  from: RH THREE-AND-ONE LINE
    select: END
      prim: in 3, 3, in
    select: CENTER
      select: BEAU
        prim: in 1, -1, out
      select: BELLE
        prim: in 1, 1, in
def: _ah so part 2
  from: RH THREE-AND-ONE LINE
    select: END
      prim: in 2, 1, in
    select: CENTER
      select: BELLE
        prim: 0, -1, in, sashay-finish
      select: BEAU
        prim: 0, 1, out, sashay-finish
// catch-all definition, for weird 3-and-1 lines, etc.
// designate the centers who are not part of a couple
def: _designated ah so
  call: _anyone(DESIGNATED, u turn back)
  call: wheel and deal
  call: _finish designated ah so
def: _finish designated ah so
  select: DESIGNATED // ensure that the final roll direction is correct
    prim: 0, 0, out
    prim: 0, 0, roll
  select: OTHERS
    prim: 0, 0, none, preserve-roll preserve-sweep
    prim: 0, 0, none, preserve-roll preserve-sweep

def: alter the wave
  call: quarter the alter(1/2, 3/4, 1/2)

def: box recycle
  from: ANY
    condition: not(formation(2x4)), \
      "For clarity, use 'split recycle' or 'centers box recycle'"
    call: split recycle

def: circle by(n,m)
  spoken: circle by <n=fraction> by <m=fraction>
  call: circle by but([n], cast([m]))
def: circle by but(n,c)
  option: SUPERCALL
  spoken: circle by <n=fraction> by <c=anything>
  call: _start circle by([n])
  call: [c] // note that this could be an 8-personal call
def: _start circle by(n)
  ipart:
    from: FACING COUPLES
      call: circle left([n])
      call: step to a wave

def: concentric(c)
  spoken: concentric <c=anything>
  option: CONCEPT
  // try "center wave" as centers
  from: GENERAL QUARTER TAG, TWIN GENERAL DIAMONDS, CONCENTRIC GENERAL DIAMONDS
    call: _concentric([c], [c])
  from: ANY
    call: _blend first(_diamond adjust then(                              \
            _from(or(TWIN GENERAL DIAMONDS, CONCENTRIC GENERAL DIAMONDS), \
                  _concentric([c],[c]))))
  from: CENTER HALF
    call: _concentric([c], [c])

def: counter rotate(n=1/4)
  spoken: counter rotate (<n=fraction>)?
  from: condition(equal num(NUM DANCERS(), 4))
    // 4 dancer version, 4 beats per quarter
    call: _fractional(_multiply num([n], 4), _in(4, _counter rotate 1/4))
  from: ANY
    // 8 dancer version, no official timing.  we'll say 6 beats
    call: _fractional(_multiply num([n], 4), _in(6, _counter rotate 1/4))

// as per vic cedar, from parallel waves ends in a thar, not in a
// "wave between vertical miniwaves"
def: cross by
  from: PARALLEL WAVES
    select: CENTER
      select: LEADER
        prim: in 1, 2, in
      select: TRAILER
        prim: out 2, 1, none
    select: END
      select: LEADER
        prim: in 3, 0, in
      select: TRAILER
        prim: in 2, 1, none
  from: THAR, WRONG WAY THAR
    select: CENTER
      prim: out 2, 3, in 1/8
    select: END
      prim: in 2, 1, in 1/8

def: cross chain and roll(n=1/2)
  spoken: cross chain and roll (but turn the star <n=fraction>)?
  part: 2
    call: cross chain thru([n])
  part:
    call: roll

def: cross chain thru(n=1/2)
  spoken: cross chain thru (but turn the star <n=fraction>)?
  part:
    call: right pull by
  ipart:
    call: _finish cross chain thru([n])
def: _finish cross chain thru(n)
  condition: not(less([n], 1/4)), "Can't turn the star less than 1/4"
  from: TRADE BY
    call: _center 4(_centers finish cross chain thru([n]), _courtesy turn(1/2))
def: _centers finish cross chain thru(n)
  call: 1/2(swap around)
  call: _turn the diamond(_subtract num([n], 1/4))
  call: _lh diamond to couple roll left
def: _lh diamond to couple roll left
  in: 2
  from: LH DIAMOND
    select: POINT
      prim: in 1, 1, out, force-roll-left
    select: CENTER
      prim: 0, 1, none, force-roll-left

def: cross extend
  ipart:
    call: _blend last(extend, _finish cross extend)
def: _finish cross extend
  from: allow unmatched(RH MINIWAVE, LH MINIWAVE)
    prim: in 2, 0, none

/*
def: cross roll to a wave
  ends in: WAVE
  call: cross roll
def: cross roll to a line
  ends in: LINE // XXX really, "does not end in wave")
  call: cross roll
def: cross roll
  // XXX: centers cross run while ends run; centers pass outside of ends
  // XXX: look at bill's book under "run wild" for 1/2 way point
  //      centers take the outside track
*/

def: switch the line
  from: GENERAL LINE
    condition: not(formation(OCEAN WAVE)), "Don't you mean: switch the wave?"
    call: _switch the line // defined in a2.calls by 'switch the wave'

def: dixie diamond
  call: dixie style, _finish dixie diamond
def: _finish dixie diamond
  in: 2
  from: 1x4
    call: _quasi concentric(hinge, u turn back)

def: galaxy circulate
  in: 4
  from: GENERAL GALAXY
    select: and(CENTER, MATCH(_INOUT PATTERN(), "o")) // leaders in box
      prim: in 1, 2, in
    select: and(CENTER, MATCH(_INOUT PATTERN(), "i")) // trailers in box
      prim: out 2, 2, none, sashay-start sashay-finish
    select: and(END, MATCH(_FACING PATTERN(), "[v^]"))
      prim: in 2, 2, none, sashay-start sashay-finish
    select: END // point on axis
      prim: in 2, 1, in

def: _interlocked(c)
  call: _from two diamonds(_blend first(_very centers sashay, [c]))
def: interlocked diamond circulate
  call: _interlocked(_blend last(diamond circulate, _very centers sashay))
def: interlocked cut the diamond
  call: _interlocked(cut the diamond)
def: interlocked flip the diamond
  call: _interlocked(flip the diamond)
def: interlocked diamond chain thru
  call: _interlocked(diamond chain thru)
def: switch to an interlocked diamond
  call: _blend last(switch to a diamond, _very centers sashay)


// see definition of 'explode' (plus)
def: reverse explode
  from: OCEAN WAVE, SINGLE INVERTED LINE
    call: _reverse explode
  from: GENERAL LINE
    condition: PROGRAM AT LEAST(C4), \
               "Reverse explode from general line not allowed below C4"
      call: _reverse explode
def: _reverse explode
  in: 2
  from: GENERAL LINE
    select: formation(mixed(RH MINIWAVE,LH MINIWAVE,COUPLE NO TAGS), \
                      OR(BEAU,BELLE))
      select: CENTER // "centers of miniwaves"
        prim: 0, 1, out
      select: END // select "ends of miniwaves"
        prim: in 2, 1, out
    select: OTHERS
      select: CENTER // "centers of couples"
        prim: 0, -1, out
      select: END // "ends of couples"
        prim: in 2, 1, out

def: butterfly(c)
  spoken: butterfly <c=anything>
  option: CONCEPT
  call: _blend first(_start butterfly, _blend last([c], _finish butterfly))

def: o(c)
  spoken: o <c=anything>
  option: CONCEPT
  call: _blend first(_start o, _blend last([c], _finish o))

def: _start butterfly
  from: GENERAL BUTTERFLY
    select: CENTER
      prim: 0, 0, none, preserve-roll
    select: OTHERS
      prim: in 2, 0, none, sashay-start sashay-finish preserve-roll
def: _finish butterfly
  from: GENERAL COLUMNS
    select: CENTER
      prim: 0, 0, none, preserve-roll
    select: OTHERS
      prim: out 2, 0, none, sashay-start sashay-finish preserve-roll
  from: PARALLEL GENERAL LINES
    select: CENTER
      prim: 0, 0, none, preserve-roll
    select: OTHERS
      prim: 0, out 2, none, preserve-roll
  from: ANY // can't put back the distortion
    condition: false(), "Can't do this shape-changing call with this concept."
    prim: 0, 0, none, preserve-roll

def: _start o
  from: GENERAL O
    select: CENTER
      prim: in 2, 0, none, sashay-start sashay-finish preserve-roll
    select: OTHERS
      prim: 0, 0, none, preserve-roll
def: _finish o
  from: GENERAL COLUMNS
    select: CENTER
      prim: out 2, 0, none, sashay-start sashay-finish preserve-roll
    select: OTHERS
      prim: 0, 0, none, preserve-roll
  from: PARALLEL GENERAL LINES
    select: CENTER
      prim: 0, out 2, none, preserve-roll
    select: OTHERS
      prim: 0, 0, none, preserve-roll
  from: ANY // can't put back the distortion
    condition: false(), "Can't do this shape-changing call with this concept."
    prim: 0, 0, none, preserve-roll

def: shakedown
  option: LEFT
  from: BACK-TO-BACK COUPLES, 2x2
    condition: ARE(ALL, LEADER)
      call: shake and rattle

// when called from facing couples this is an A2 "facing recycle"
def: split recycle
  in: 6
  // cheat so we can say "recycle has 3 parts", although facing recycle
  // is really indivisible
  ipart: 3
    from: BOX, FACING COUPLES, 2x2
      condition: formation(or(BOX, mixed(RH MINIWAVE, COUPLE))), \
        "T-bones or a mix of LH miniwaves and couples are not legal"
      select: formation(allow unmatched(COUPLE), BEAU)
        // 1/2 box circ & right-face u-turn back
        prim: 0, 1, right, sashay-finish
        prim: 0, 0, roll
      select: formation(allow unmatched(COUPLE), BELLE)
        // left dodge and veer left
        prim: -2, -1, none, sashay-start sashay-finish
        prim: -2, 2, none, sashay-start sashay-finish
      select: and(TRAILER, \
                  formation(allow unmatched(RH MINIWAVE, LH MINIWAVE), ALL))
        // 1/2 box circ & inward u-turn back
        prim: 0, 1, in, sashay-finish
        prim: 0, 0, roll
      select: and(LEADER, \
                  formation(allow unmatched(RH MINIWAVE, LH MINIWAVE), ALL))
        // leaders trail off
        prim: in 2, 1, in
        prim: in 2, 2, roll

// XXX: square chain thru to a wave ... general 'to a wave' suffix?
// see 'square thru' (basic) and 'square chain thru' (a1) definitions
def: square chain the top
  option: LEFT
  from: mixed(RH OCEAN WAVE, FACING COUPLES)
    ends in: formation(BACK-TO-BACK COUPLES)
    call: _square thru part, left(spin the top), left(turn thru)

def: stretch(c)
  option: CONCEPT
  spoken: stretch <c=anything>
  call: _blend last([c], _stretch)

def: swing the fractions
  option: LEFT
  call: _those who can turn right(1/4)
  call: _those who can turn left(1/2)
  call: _those who can turn right(3/4)
  call: _those who can turn left(1/2)
  call: _those who can turn right(1/4)

def: triple box(c)
  spoken: triple box <c=anything>
  option: CONCEPT
  from: use phantoms(2x6)
    from: 2x2
      call: [c]
def: triple column(c)
  spoken: triple column <c=anything>
  option: CONCEPT
  from: use phantoms(3x4), use phantoms(1x12), \
        use phantoms(TRIPLE GENERAL H), use phantoms(TRIPLE GENERAL PLUS)
    from: GENERAL COLUMN // 1x4
      call: [c]
def: triple line(c)
  spoken: triple line <c=anything>
  option: CONCEPT
  from: use phantoms(3x4), use phantoms(1x12), \
        use phantoms(TRIPLE GENERAL H), use phantoms(TRIPLE GENERAL PLUS)
    from: GENERAL LINE // 1x4
      call: [c]
def: triple wave(c)
  spoken: triple wave <c=anything>
  option: CONCEPT
  from: use phantoms(3x4), use phantoms(1x12), \
        use phantoms(TRIPLE GENERAL H), use phantoms(TRIPLE GENERAL PLUS)
    from: RH OCEAN WAVE, LH OCEAN WAVE // 1x4
      call: [c]

def: zing
  in: 4 // same as zoom?
  ipart:
    from: 2x2
      select: LEADER
        prim: 0, 0, out
        prim: in 1, 2, roll
        prim: in 2, 1, roll
      select: TRAILER
        prim: 0, 0, none
        prim: 0, 1, none
        prim: 0, 1, in
