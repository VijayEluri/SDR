program: c2

def: _catch(n)
  spoken: catch <n=number>
  call: square thru(_subtract num([n],1/2))
  call: slip
  call: step and fold

// XXX: should suppress top-level breathing
// XXX: should check for collisions
def: press in
  prim: in 1, 1, none
  prim: in 1, 1, none
def: press out
  prim: out 1, 1, none
  prim: out 1, 1, none
def: press right
  prim: 1, 1, none
  prim: 1, 1, none
def: press left
  prim: -1, 1, none
  prim: -1, 1, none

def: cross concentric(c)
  spoken: cross concentric <c=anything>
  option: CONCEPT
  // try "center wave" as centers
  from: GENERAL QUARTER TAG, TWIN GENERAL DIAMONDS
    call: _cross concentric([c], [c])
  from: CENTER HALF
    call: _cross concentric([c], [c])

def: alter and circulate
  call: quarter the alter and circulate(1/2, 3/4, 1/2)

def: bounce(who)
  spoken: bounce the <who=anyone>
  from: CENTER HALF
    call: _with designated([who], _bounce designees)

def: _bounce nobody
  spoken: bounce ((no one)| nobody)
  call: bounce(NONE)

def: _bounce everyone
  spoken: bounce (everyone | (every body))
  call: bounce(ALL)

def: _bounce designees
  call: as couples(step thru)
  call: _designees u turn back in flow direction

def: _designees u turn back in flow direction
  in: 2
  from: ANY
    select: and(DESIGNATED, match(_SWEEP PATTERN(), "L"))
      prim: 0, 0, right
      prim: 0, 0, right
    select: and(DESIGNATED, match(_SWEEP PATTERN(), "R"))
      prim: 0, 0, left
      prim: 0, 0, left
    select: DESIGNATED // XXX just to cover the bases
      prim: 0, 0, right, force-roll-none
      prim: 0, 0, right, force-roll-none
    select: OTHERS
      prim: 0, 0, none
      prim: 0, 0, none

def: chisel thru
  call: concentric(pass in)
  call: _center 4(pass out, pass in)
  call: pass in

// keep this def in sync with 'and cross' (a1)
def: cross back
  in: 2
    from: 2x2
      condition: or(PROGRAM AT LEAST(c1), NOT(TBONED(ALL))), \
                 "T-boned formations not allowed below C1"
      condition: MATCH(_INOUT PATTERN(), "iooi|oiio"), \
                 "Must have diagonal trailers"
      select: LEADER
        prim: 0, 1, in, sashay-finish // make room for center miniwave (form z)
        prim: in 1, 0, roll, sashay-start
      select: TRAILER
        prim: in 2, 1, none // pull by with outside hand
        prim: 0, 1, none

// XXX: grand cross back, from columns (keep in sync with triple cross (c1))

def: _drop(c)
  // XXX adjust 1/4 tag to single quarter tags
  in: 2
  ipart:
    call: _from diamond or tag(_quasi concentric(nothing, [c])), _finish drop in

def: drop in
  call: _drop(face in)
def: drop out
  call: _drop(face out)
def: drop back
  call: _drop(u turn back)
def: drop right
  call: _drop(face right)
def: drop left
  call: _drop(face left)

def: _finish drop in
  in: 2
  // centers must be in a miniwave
  from: LH DIAMOND, LH FACING DIAMOND,\
        LH SINGLE QUARTER TAG, LH SINGLE THREE QUARTER TAG
    call: mirror(_finish drop in)
  from: RH DIAMOND
    select: CENTER
      prim: 0, 1, none
    select: POINT
      prim: in 1, 1, none, sashay-finish
  from: RH FACING DIAMOND
    select: CENTER
      prim: 0, 1, none
    select: POINT
      prim: in 1, -1, none, sashay-finish
  from: RH SINGLE QUARTER TAG
    select: CENTER
      prim: 0, 1, none
    select: END
      prim: -1, in 1, none, sashay-start
  from: RH SINGLE THREE QUARTER TAG
    select: CENTER
      prim: 0, 1, none
    select: END
      prim: 1, in 1, none, sashay-start

def: exchange the diamond
  spoken: exchange the ( diamond | diamonds )
  call: _from two diamonds(_exchange the diamond after adjust, 4)
def: _exchange the diamond after adjust
  from: RH TWIN DIAMONDS, RH POINT-TO-POINT DIAMONDS
    part: 4 // control recursion when counting parts
      call: mirror(_exchange the diamond after adjust)
  // defined using LH diamonds to make 'collide to right hands' put the
  // dancers on the outside
  from: LH TWIN DIAMONDS
    select: VERY CENTER
      prim: 3, 2, right
      prim: 2, 1, right
      prim: 1, 2, right
      prim: 2, 1, right
    select: and(TRAILER,POINT)
      prim: -2, 1, left
      prim: 3, 2, right
      prim: 2, 1, right
      prim: 1, 2, right
    select: CENTER
      prim: -1, 2, left
      prim: -2, 1, left
      prim: 3, 2, right
      prim: 2, 1, right
    select: POINT
      prim: -2, 1, left
      prim: -1, 2, left
      prim: -2, 1, left
      prim: 3, 2, right

def: here comes the judge
  from: LINES FACING OUT, ENDS OUT INVERTED LINES, PARALLEL GENERAL LINES
    condition: equal num(NUM DANCERS(and(END,LEADER)), 4), \
      "Both ends in each line must be facing out."
    call: _with designated(and(LEADER,END,BELLE), _designees out roll circulate)
  // vic thinks you can do this from a general line of 4, as long as the
  // ends are facing the same way
  from: GENERAL LINE, GENERAL LINE OF 3
    condition: MATCH(_FACING PATTERN(END), "vv|^^")
    call: _with designated(MATCH GROUPS(_FACING PATTERN(), "(v).+v|^.+(^)"),\
                           _designees out roll circulate)

def: lines thru(c)
  // XXX GRAMMAR CONFLICT boo: can't parse 'lines swing thru' or 'lines
  // slide thru' because it can't decide whether the 'thru' goes with the
  // concept or the call.  That's lame.
  // See the ANTLR book chapter 11 p 278 regarding the difference between
  // LL grammars and SLL grammars.  The solution is to split/clone the
  // 'anything' production (or at least those members of <anything> with
  // the suffix 'thru') to provide the necessary context.
  //spoken: [-10] lines <c=anything> thru
  option: CONCEPT
  spoken: lines thru <c=anything> // XXX
  call: _center 4([c], circulate)

// "little more" has a controversial division into parts.  Are the
// two parts "little" and "centers circulate" (as the callerlab definition
// would seem to imply) or is the first part "centers step and fold while
// ends quarter right" and the second part "centers circulate while ends
// counter rotate 1/4"? (this definition times out better)
def: little more
  xpart: 2
    call: little, anyone while others(CENTER, circulate, nothing)

def: outlet
  option: LEFT
  ipart:
    from: RH QUARTER TAG, RH QUARTER LINE, GENERAL QUARTER TAG
      condition: MATCH(_FACING PATTERN(), ".v\\^..v\\^."), \
        "Did you mean 'left outlet'?"
      call: _center 4(_outlet veer)
      call: split recycle
def: _outlet veer
  from: GENERAL LINE
    select: END,\
            MATCH GROUPS(_FACING PATTERN(), "v(v)..|\\^(\\^).."),\
            MATCH GROUPS(_FACING PATTERN(), "..(v)v|..(\\^)\\^")
      prim: in 2, 1, none, sashay-start sashay-finish
    select: OTHERS // centers who are miniwaves with their end
      prim: in 2, -1, none, sashay-start sashay-finish

def: relocate
  call: _center 2(cast(3/4), _counter rotate 1/4)
def: relocate the diamond
  call: _from two diamonds(relocate)

def: shazam
  call: _maybe touch(_from(MINIWAVE, cast(1/4)))
  call: u turn back

def: sock it to me
  call: mirror(here comes the judge)

def: split swap
  option: REVERSE
  from: FACING COUPLES, 2x2
    condition: ARE(ALL, TRAILER)
    call: mirror(shake and rattle)

def: stretched box(c)
  option: CONCEPT
  spoken: stretched box <c=anything>
  call: _blend first(_from(2x4, _stretch), _from(2x2, [c]))
def: stretched column(c)
  option: CONCEPT
  spoken: stretched (column (or line)? | line or column) <c=anything>
  call: _blend first(_from(1x8, _stretch), _from(1x4, [c]))
def: stretched line(c)
  option: CONCEPT
  spoken: stretched line <c=anything>
  call: _blend first(_from(GENERAL TIDAL LINE, _stretch), _from(GENERAL LINE, [c]))
def: stretched wave(c)
  option: CONCEPT
  spoken: stretched wave <c=anything>
  call: _blend first(_from(TIDAL WAVE, _stretch), _from(OCEAN WAVE, [c]))
def: _stretch
  in: 2
  from: 2x4
    select: and(CENTER, match(_facing pattern(), "[v^]"))
      prim: in 2, 0, none, sashay-start sashay-finish preserve-roll preserve-sweep
    select: and(CENTER, match(_facing pattern(), "[<>]"))
      prim: 0, in 2, none, preserve-roll preserve-sweep
    select: OTHERS
      prim: 0, 0, none, preserve-roll preserve-sweep
  from: 1x8
    from: CENTER 4
      select: and(CENTER, match(_facing pattern(), "[v^]"))
        prim: in 4, 0, none, sashay-start sashay-finish preserve-roll preserve-sweep
      select: and(CENTER, match(_facing pattern(), "[<>]"))
        prim: 0, in 4, none, preserve-roll preserve-sweep
      select: OTHERS
        prim: 0, 0, none, preserve-roll preserve-sweep

// vic sez: "The end result of Swap The Wave is as if everyone took a step
// backward (to form Facing Couples) and then did a Swap Around."
// in particular this definition has the centers *not* take hands; vic
// believes the centers part is *not* an arm turn.
def: swap the wave
  ipart:
    call: _blend first(_swap the wave adjust, swap around)
def: _swap the wave adjust
  from: OCEAN WAVE
    select: CENTER
      prim: 0, -1, none
    select: END
      prim: in 2, -1, none

def: turn to a line
  ipart:
    call: zig zag
    call: _blend last(tandem(_step thru preserve roll), roll)
def: _step thru preserve roll
  in: 2
  from: MINIWAVE
    prim: in 1, 1, none, preserve-roll

// XXX: can be done from promenade
def: wheel the ocean
  call: _start wheel the, _finish wheel the ocean
def: wheel the sea
  call: _start wheel the, _finish wheel the sea

def: _start wheel the
  from: BACK-TO-BACK COUPLES
    call: wheel around
  from: TANDEM COUPLES
    select: LEADER
      call: wheel around
    select: TRAILER
      call: nothing

def: _finish wheel the ocean
  from: FACING COUPLES
    select: BELLE
      prim: in 2, 1, none
      prim: 0, 1, none
    select: BEAU
      prim: 0, 0, none
      prim: 0, 0, none

def: _finish wheel the sea
  call: walk others dodge(BELLE)

// "trailers stingy trail off", more or less
def: trail to a diamond
  in: 4
  ipart:
    from: TANDEM COUPLES
      select: LEADER
        select: BEAU
          prim: in 1, 2, in, pass-left
          prim: 3, 3, roll
        select: BELLE
          prim: in 1, 4, in, pass-left
          prim: -5, 3, roll
      // right hinge and right shoulder passes for trailers
      select: TRAILER
        select: BEAU
          prim: in 1, 2, in
          prim: 0, 0, none
        select: BELLE
          prim: in 1, 0, in
          prim: 0, 0, none
    from: BOX
      call: 1/2(press ahead)
      call: _zee trail to a diamond
    from: SINGLE QUARTER ZEE
      call: press ahead
      call: _zee trail to a diamond
    from: SINGLE THREE QUARTER ZEE
      call: _zee trail to a diamond
    // possible from a t-bone 2x2 set up, see ceder.net
    // XXX probably from t-boned zees as well
    from: 2x2
      condition: TBONED(ALL), "Can't do trail to a diamond from this 2x2"
      condition: PROGRAM AT LEAST(c1), "T-boned formations not allowed below C1"
      condition: MATCH(_SELECTION PATTERN(TRAILER), "x__x|_xx_"), \
                 "Trailers must step to a hand hold"
      select: LEADER
        prim: 0, 1, none
        prim: in 1, 1, in
        prim: in 3, 3, roll
      select: TRAILER
        prim: 0, 1, none
        prim: in 1, 1, in
        prim: 0, 0, none
def: _zee trail to a diamond
  from: SINGLE THREE QUARTER ZEE
    select: LEADER
      prim: in 1, 1, in
      prim: in 3, 3, roll
    select: TRAILER
      prim: in 1, 1, in
      prim: 0, 0, none
