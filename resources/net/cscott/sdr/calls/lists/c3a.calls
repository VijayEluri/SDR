program: c3a

def: keep busy
  call: busy(and(_centers(hinge), flip the diamond, step and fold))
  example: keep busy
    before:
    ! ^ ^
    ! A a d D
    ! ^ ^ v v
    ! B b c C
    !     v v
    after:
    ! ^   ^
    ! C d D a
    ! ^ v ^ v
    ! c B b A
    !   v   v

def: _quarter mix(n)
  part:
    call: _those who can turn right not grand([n])
  part: 2
    call: mix
def: _grand quarter mix(n)
  part:
    call: _those who can turn right([n])
  part: 2
    call: grand mix

def: quarter mix
  option: LEFT
  call: _quarter mix(1/4)
def: three quarter mix
  option: LEFT
  call: _quarter mix(3/4)
def: grand quarter mix
  option: LEFT
  call: _grand quarter mix(1/4)
def: grand three quarter mix
  option: LEFT
  call: _grand quarter mix(3/4)

def: grand mix
  in: 6 // ought to have same timing as mix
  // this definition is a cheat
  // in theory grand mix could be done from 6-dancer tidal lines as well.
  from: GENERAL TIDAL LINE
    ipart:
      // "grand (working as centers) cross run"
      call: and spread(triple trade)
    part:
      // "grand slip"
      call: triple trade

def: grand swing and mix
  option: LEFT
  call: _maybe touch(_grand quarter mix(1/2), 3)
def: grand left swing and mix
  call: mirror(grand swing and mix)

def: quarter wheel the ocean
  from: LH TWO FACED LINE
    call: 1/2(wheel around), _finish wheel the ocean
def: quarter wheel the sea
  from: LH TWO FACED LINE
    call: 1/2(wheel around), _finish wheel the sea
def: three quarter wheel the ocean
  from: RH TWO FACED LINE
    call: 1 1/2(wheel around), _finish wheel the ocean
def: three quarter wheel the sea
  from: RH TWO FACED LINE
    call: 1 1/2(wheel around), _finish wheel the sea

def: couple up
  call: _box circulate
  call: _like a couple up
def: _like a couple up
  in: 2
  from: 2x2
    select: TRAILER
      prim: 0, 0, none
      prim: 0, 0, none
    select: LEADER
      prim: 0, 0, in
      prim: 0, 0, roll

def: cross chain reaction(n=1/4)
  spoken: cross chain reaction (but turn the star <n=fraction>)?
  from: QUARTER TAG, GENERAL QUARTER TAG
    part:
      call: _cross chain reaction part 1
    xpart:
      call: _chain reaction part 2
      call: _chain reaction part 3([n])
      call: _finish chain reaction
def: _cross chain reaction part 1
  call: _blend first(_very centers sashay, \
                     _blend last(_chain reaction part 1, _very centers sashay))
def: _very centers sashay
  from: GENERAL QUARTER TAG, \
        TWIN GENERAL DIAMONDS, POINT-TO-POINT GENERAL DIAMONDS
    select: VERY CENTER
      prim: in 2, 0, none, sashay-start sashay-finish
    select: OTHERS
      prim: 0, 0, none
  from: GENERAL COLUMNS // this variant is used for 'make a pass but' from 2x4s
    select: CENTER
      prim: in 2, 0, none, sashay-start sashay-finish
    select: OTHERS
      prim: 0, 0, none

def: hop(sel)
  spoken: <sel=anyone> hop
  call: walk others dodge([sel])
  call: hinge

def: latch on(n=1/4)
  spoken: latch on <n=fraction>?
  from: GENERAL TANDEM
    ends in: formation(RH MINIWAVE)
    call: right roll to a wave, right arm turn([n])

def: finally(concept,call)
  option: METACONCEPT
  spoken: finally <0=concept> <1=anything>
  part: _subtract num(num parts([call]), 1)
    call: _all but last part([call])
  part:
    call: _apply([concept], like a([call]))

def: initially(concept,call)
  option: METACONCEPT
  spoken: initially <0=concept> <1=anything>
  part:
    call: _apply([concept], _first part([call]))
  part: _subtract num(num parts([call]), 1)
    call: finish([call])

def: mini chase
  option: LEFT
  from: 2x2
    condition: ARE(ALL, LEADER), "All must be leaders"
      call: short and sweet

def: open up the column
  call: open up and(cast(3/4)), extend

def: open up and(c)
  spoken: open up and <c=anything>
  call: _transfer([c], _start trans trail and peel, \
                       _finish trans trail and peel)

def: quarter the deucey
  call: _quarter the deucey(1,1,1,1)
def: three quarter the deucey
  call: _quarter the deucey(3,3,3,3)

def: release(c)
  option: CONCEPT
  spoken: release <c=anything>
  ipart:
    call: _start release // end of the center 4 press ahead
    call: _finish release(c)
def: _start release
  call: not yet implemented
// Vic sez: "Phantoms that end between the Outside dancers and the
// Center are removed at the end of the call unless the anything call
// involves a concept which specifically includes phantoms (e.g., Release
// Triple Wave Ah So retains the Phantoms whereas Release Ah So
// doesn't)."
// So we try to do the call without a concept first, and if that fails
// we use the TRIPLE LINE concept *but squash phantoms*
def: _finish release(c)
  from: ANY
    call: [c]
  from: ANY
    ends in: no phantoms between centers and ends() // XXX
    call: triple line([c])
  from: ANY
    call: breathe after(triple line([c]))

// see 'turn to a line' (c2)
def: single turn to a line
  ipart:
    from: TANDEM, FACING DANCERS, BACK-TO-BACK DANCERS
      call: _blend last(zig zag, _step thru preserve roll)
      call: roll

def: spin chain the line
  call: _maybe touch(_wave swing)
  call: _center 6(_center 2(trade, cast(3/4)))
  call: _from diamond(and(_smash diamond, _center 2(cast(3/4))))

def: swing the gamut but(c=cut the diamond)
  spoken: swing the gamut (but <c=anything>)?
  part:
    call: _maybe touch(_wave swing)
  part: 2
    call: the gamut but([c])

def: the gamut but(c=cut the diamond)
  spoken: the gamut (but <c=anything>)?
  call: _center 4(and(cast(3/4), slip, trade the wave), 2(circulate))
  call: [c]

def: travel thru
  call: pass thru
  call: as couples(quarter right)

def: left travel thru
  call: mirror(travel thru) // left shoulder pass

// this is tricky because we have to insert the phantoms simultaneous with
// recognizing which distorted diamond we have.  see plus '_from diamond'
// helper
def: triple diamond(c)
  spoken: triple diamond <c=anything>
  option: CONCEPT
  // breathing.  let's hope we're symmetric
  // xxx also asym diamonds?
  from: use phantoms(TRIPLE GENERAL DIAMONDS), \
        use phantoms(TRIPLE GENERAL TALL DIAMONDS), \
        use phantoms(TRIPLE GENERAL ASYM DIAMONDS), \
        use phantoms(TRIPLE POINT TO POINT GENERAL DIAMONDS), \
        use phantoms(TRIPLE POINT TO POINT GENERAL TALL DIAMONDS)
    call: _from diamond([c])
