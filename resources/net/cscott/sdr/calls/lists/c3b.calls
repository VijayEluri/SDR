program: c3b

/* concepts */
def: oddly(concept,call)
  option: METACONCEPT
  spoken: oddly <0=concept> <1=anything>
  from: condition(equal num(num parts([call]), 2))
    part:
      call: _apply([concept], _first part([call]))
    part: _subtract num(num parts([call]), 1)
      call: finish([call])
  from: condition(greater(num parts([call]), 2))
    part:
      call: _apply([concept], _first part([call]))
    part: _subtract num(num parts([call]), 1)
      call: evenly([concept], finish([call]))

def: evenly(concept,call)
  option: METACONCEPT
  spoken: evenly <0=concept> <1=anything>
  from: condition(equal num(num parts([call]), 2))
    part:
      call: _first part([call])
    part: _subtract num(num parts([call]), 1)
      call: _apply([concept], finish([call]))
  from: condition(greater(num parts([call]), 2))
    part:
      call: _first part([call])
    part: _subtract num(num parts([call]), 1)
      call: oddly([concept], finish([call]))


/* ... */

/*
def: _steps at a time(n)
  spoken: <n=number> steps at a time
  from: COLUMNS
  // lead dancers do an Nx(4-n) peel off, as-couples-on-N quarter in (3 parts)
  // other dancers circulate (n/2) times, trade, roll (3 parts)
*/

/* ... */


def: bingo
  from: RH BOX, LH BOX, 2x2
    select: LEADER
      call: 3/4 out
    select: TRAILER
      call: any shoulder wheel thru // XXX: any shoulder is a concept?
  example: bingo // from RH box
    before:
    !  A> a>
    ! <c <C
    after:
    ! ^ 
    ! C a
    ! ^ v
    ! c A
    !   v
  example: bingo // from t-boned setup
    before:
    ! A a>
    ! v ^
    !<c C
    after:
    ! <C a
    !  ^ v
    !  c A> 
  example: and roll(bingo)
    // ensure that we're going 3/4 out, not 1/4 in! (common cheat)
    before:
    ! <A <a
    !  c> C>
    after:
    ! <A <c
    !  a> C>
  example: 1/2(bingo), box counter rotate 1/8
    // check left shoulder pass & 45-off setups.
    before:
    ! <A <a
    !  c> C>
    after:
    !   A>
    !    ^
    !  a c
    !  v
    !  <C

def: boomerang
  from: TANDEM COUPLES
    select: LEADER
      call: zoom
    select: TRAILER
      call: circulate, trade
    //ends in: FACING COUPLES // not parsed yet, but helps in reversing calls.
  from: RH BOX, LH BOX, 2x2 // tandem couples should match first rule, not 2x2
    // should be fractionalizable into halves
    select: LEADER
      call: zoom
    select: TRAILER // "scoot back"
      call: extend
      call: trade
      call: extend
  example: boomerang // from tandem couples
    before:
    ! A> C>
    ! a> c>
    after:
    ! C><a
    ! c><A
  example: and roll(boomerang) // everyone can roll from tandem couples
    before:
    ! A> C>
    ! a> c>
    after:
    ! ^
    ! C a
    !   v
    !   ^
    ! c A
    ! v
  example: boomerang // from rh box
    before:
    ! A> a>
    !<c <C
    after:
    ! a> C>
    !<A <c
  example: 1/2(boomerang) // same as peel to a diamond!
    before:
    ! A> a>
    !<c <C
    after:
    ! <a
    ! ^
    ! C A
    !   v
    !  c>
  example: boomerang // from t-bone
    before:
    ! ^
    ! A <a
    ! c> C
    !    v
    after:
    ! <c C
    !  ^ v
    !  A a>
  example: 1/2(boomerang) // fractionalizable
    before:
    ! ^
    ! A <a
    ! c> C
    !    v
    after:
    !     ^ ^
    ! A a c C
    ! v v
  example: and roll(boomerang) // only leaders can roll.
    before:
    ! ^
    ! A <a
    ! c> C
    !    v
    after:
    ! <c C>
    ! <A a>

// XXX vic provides a more general definition which involves "make a compact
//     formation".  We're using the standard def.
def: busy(c)
  option: SUPERCALL
  spoken: busy <c=anything>
  ipart:
    call: _start busy, _finish busy([c])
  example: busy single wheel
    before:
    ! ^ ^
    ! A a B b
    ! ^ ^ v v
    ! d D c C
    !     v v
    after:
    ! ^   ^
    ! C d B a
    ! ^ v ^ v
    ! c D b A
    !   v   v
  example: busy mix
    before:
    ! ^ ^
    ! A a B b
    ! ^ ^ v v
    ! d D c C
    !     v v
    after:
    ! ^
    ! C ^ ^     a
    ! ^ B b d D v
    ! c     v v A
    !           v

def: _start busy
  from: PARALLEL LH TWO FACED LINES
    call: mirror(_start busy)
  from: PARALLEL RH TWO FACED LINES
    select: TRAILER
      prim: 0, 1, none
    select: and(LEADER, BEAU)
      prim: 4, 1, right
    select: and(LEADER, BELLE)
      prim: 0, 1, right, sashay-finish

def: _finish busy(c)
  from: CENTER HALF
    call: _concentric([c], counter rotate(1/4))

// XXX: allow "<anything> by golly"?
def: by golly
  // this alternate definition for by golly is borrowed by vic ceder
  // it's more general than the "standard" definition and allows by golly
  // following couple up, r&l thru, etc.
  from: FACING COUPLES
    // all selected dancers can roll right
    condition: MATCH(_ROLL PATTERN(), RRRR)
    ipart:
      call: veer left
      call: half tag
  from: FACING COUPLES
    // all selected dancers can roll left
    condition: MATCH(_ROLL PATTERN(), LLLL)
    ipart:
      call: veer right
      call: left(half tag)
  example: recycle, by golly
    before:
    ! ^   ^
    ! A a c C
    !   v   v
    after:
    ! C> c>
    !<a <A
  example: bend the line, by golly
    before:
    ! ^ ^
    ! A a c C
    !     v v
    after:
    ! ^
    ! c A
    ! ^ v
    ! C a
    !   v
  example: ferris wheel, centers(by golly)
    before:
    ! ^ ^
    ! A a c C
    ! ^ ^ v v
    ! B b d D
    !     v v
    after: // XXX haven't done the by golly yet
    ! a A
    ! v v
    ! b B
    ! v v
    ! ^ ^
    ! C c
    ! ^ ^
    ! D d

/* .... */

def: change lanes
  call: _blend(retain your lane, spread)

def: change the centers
  call: change the(slip)
def: change the wave
  call: change the(swing)

def: change the(c) // XXX NOL Vic Ceder 1992
  // XXX supercall disabled because it leads to a grammar conflict on
  //     "change the centers the difference".  It's not really on-list
  //     anyway.
  //option: SUPERCALL
  spoken: change the <c=anything>
  call: _maybe touch(_wave swing), slip, cross run(CENTER), [c]

/* .... */

def: cross cycle
  in: 4
  from: TWO FACED LINE
    ends in: formation(FACING COUPLES)
    call: bounce(CENTER)
    call: _box counter rotate(1/4)
    call: roll
  from: 2x2
    ends in: formation(TWO FACED LINE)
    // cheat so we can say "recycle has 3 parts", although facing recycle
    // is really indivisible
    ipart: 3
      call: box recycle, slither

/* .... */

def: explode the diamond
  from: TWIN DIAMONDS, TWIN FACING DIAMONDS
    //ends in: ENDS IN INVERTED LINES
    select: CENTER
      call: explode the wave
    select: END
      // strictly speaking, "in your phantom waves, circulate
      // and the lead end u-turn back"
      call: concentric(couple up)
  from: THREE QUARTER TAG
    select: CENTER
      call: explode the wave
    select: END
      call: trade // couple up (not actually concentric, like acey-deucey)
  // XXX: "from other applicable formations" (what might they be?)
    
/* .... */

def: reactivate
    from: QUARTER TAG, GENERAL QUARTER TAG
      call: _reactivate part 1
      call: _reactivate part 2
      call: _reactivate part 3
def: cross reactivate
    from: QUARTER TAG, GENERAL QUARTER TAG
      call: _cross reactivate part 1
      call: _reactivate part 2
      call: _reactivate part 3
def: _reactivate part 1
  from: QUARTER TAG, GENERAL QUARTER TAG
    from: allow unmatched(1x3) // ensures we're balanced after breathing
      from: allow unmatched(FACING DANCERS)
        call: pass thru
def: _cross reactivate part 1
  call: _blend(_ends sashay, \
               _blend(_reactivate part 1, _ends sashay))
def: _ends sashay
  from: GENERAL QUARTER TAG
    select: OUTSIDE 4
      prim: in 2, 0, none, sashay-start sashay-finish
    select: OTHERS
      prim: 0, 0, none
def: _reactivate part 2
  condition: equal num(NUM DANCERS(), 8)
  from: CENTER 6
    call: _quasi concentric(trade, counter rotate)
def: _reactivate part 3
  from: GENERAL SPINDLE
    select: VERY CENTER
      prim: out 2, 1, none
    select: END
      prim: in 3, 3, in
    select: OTHERS
      prim: 0, in 1, none

/* .... */
def: reset
  call: 1/2(zoom), hinge, 1/2(zoom), hinge
def: _reset(n)
  spoken: reset <n=number>
  call: _fractional([n], reset)
// cross replace the column (c4) is defined in terms of cross reset
def: _cross reset 1/4
  call: trail and(nothing) // XXX
def: cross reset
  call: _cross reset 1/4, hinge, _cross reset 1/4, hinge
def: _cross reset(n)
  spoken: cross reset <n=number>
  call: _fractional([n], cross reset)

/* .... */
def: reverse the pass
  from: TANDEM COUPLES
    //ends in: formation(TANDEM COUPLES) // XXX breaks fractionalization
    call: _with designated(LEADER, _designated leaders reverse the pass)
  example: reverse the pass
    before:
    ! ^ ^
    ! A a
    ! ^ ^
    ! C c
    after:
    ! c C
    ! v v
    ! a A
    ! v v
  example: 1/2(reverse the pass)
    before:
    ! ^ ^
    ! A a
    ! ^ ^
    ! C c
    after:
    ! ^   ^
    ! C a c A
    !   v   v

def: _designated leaders reverse the pass
  call: _anyone(DESIGNATED, trade)
  call: pass thru
  call: _anyone(not(DESIGNATED), trade)

def: reverse the top
  ends in: formation(or(RH OCEAN WAVE, LH OCEAN WAVE)) // XXX breaks fractionalization
  call: fan the top, _wave swing
  example: reverse the top
    before:
    ! A><c
    ! a><C
    after:
    ! ^   ^
    ! a C A c
    !   v   v

def: revolve to a wave
  // XXX: this is a cheat!
  from: 2x2 // XXX: non-T-bone 2x2
  ipart:
    call: leaders(twice(quarter right)) // XXX nothing if no leaders.
    call: facing recycle
  example: revolve to a wave
    before:
    ! ^ ^
    ! A c
    ! ^ ^
    ! a C
    after:
    ! ^   ^
    ! C a c A
    !   v   v
  example: revolve to a wave
    before:
    ! A c
    ! v v
    ! ^ ^
    ! a C
    after:
    ! ^   ^
    ! C a c A
    !   v   v
  example: revolve to a wave
    before:
    ! ^
    ! A c
    !   v
    !   ^
    ! a C
    ! v
    after:
    ! ^   ^
    ! C a c A
    !   v   v

def: rip off
  from: TANDEM COUPLES, BOX, INVERTED BOX, 2x2
    select: LEADER
      select: BEAU
        call: run
      select: BELLE
        call: zoom
    select: TRAILER
      call: walk others dodge(BEAU)
  example: rip off
    before:
    ! ^ ^
    ! A a
    ! ^ ^
    ! C c
    after:
    ! ^ ^
    ! C A
    ! ^ ^
    ! c a
  example: rip off
    before:
    ! ^  
    ! A c
    !   v
    !   ^
    ! a C
    ! v
    after:
    ! a A
    ! v v
    ! ^  
    ! C c
    !   v
  example: and roll(rip off)
    before:
    ! ^  
    ! A c
    !   v
    !   ^
    ! a C
    ! v
    after:
    !<a<A
    ! ^  
    ! C c
    !   v

/* ... */
def: scramble
  select: END
    call: ends bend // does this work from select?
    call: turn thru
  select: CENTER
    call: face in // does this work from select?
    call: cross trail thru
  example: scramble
    before:
    ! ^ ^ ^ ^
    ! A a D d
    ! b B c C
    ! v v v v
    after:
    ! <A d>
    ! <c B>
    ! <D a<
    ! <b C>
  example: scramble
    before:
    ! ^   ^ ^
    ! A a D d
    !   v ^
    ! b B c C
    ! v v   v
    after:
    ! <A d>
    ! <c B>
    ! <D a<
    ! <b C>
  example: 1/2(scramble)
    before:
    ! ^ ^ ^ ^
    ! A a D d
    ! b B c C
    ! v v v v
    after:
    !  A><d
    !  a><D
    !  B><c 
    !  b><C

/* ... */

/*sidetrack, single sidetrack, split sidetrack (different from single concept)*/

/* ... */

def: shake and rattle
  from: TANDEM COUPLES, FACING COUPLES, BACK TO BACK COUPLES, BOX, \
        INVERTED BOX, 2x2
    select: LEADER
      select: BEAU
        prim: 2, 0, right, sashay-finish
        prim: 0, 0, roll
        prim: 0, 0, roll
      select: BELLE
        prim: 0,-2, right, sashay-start
        prim: 0, 0, roll
        prim: 0, 0, roll
    select: TRAILER
      select: BEAU
        prim: 0, 2, none
        prim: 0, 0, left
        prim: 0, 0, none, preserve-roll preserve-sweep
      select: BELLE
        prim: -2, 0, none, sashay-start sashay-finish
        prim: 0, 0, left
        prim: 0, 0, none, preserve-roll preserve-sweep


/* ... */

/* track(n) is defined at Plus */

/* ... */

def: turn the key
  call: trade
  call: counter rotate // XXX: all 8 counter rotate
  call: hinge
  example: turn the key // 3 & 1 lines
    before:
    !       ^
    ! a A D d
    ! v v v
    !   ^ ^ ^
    ! b B C c
    ! v
    after:
    !   ^ ^
    ! D b a A
    ! v     v
    ! ^     ^
    ! C c d B
    !   v v
  example: turn the key // 1/4 tag
    before:
    !   d D
    !   v v
    ! ^   ^
    ! A a c C
    !   v   v
    !   ^ ^
    !   B b
    after:
    !     ^
    !     C a
    ! ^     v ^
    ! B d     b D
    !   v ^     v
    !     c A
    !       v

def: the key
  call: counter rotate // XXX: all 8 counter rotate
  call: hinge

def: split turn the key
  call: trade
  call: split counter rotate
  call: hinge

def: turnstyle
  spoken: turn style
  select: CENTER
    from: FACING DANCERS
      ipart:
        call: touch
        call: cast off 3/4
    from: COUPLE, MINIWAVE
      call: cast off 3/4
  select: END
    call: quarter right
  example: turnstyle
    before:
    ! A> a><c <C
    after:
    !   ^   ^
    ! A a c C
    ! v   v
  example: turnstyle
    before:
    !   ^ ^
    !   a d
    ! ^ ^
    ! A B D C
    !     v v
    !   b c
    !   v v
    after:
    ! a> d>
    ! A><D
    ! B><C
    !<b <c
  example: turnstyle
    before:
    ! A>a>B>b>
    !<d<D<c<C
    after:
    ! A         b
    ! v ^   ^   v
    !   a D B c
    ! ^   v   v ^
    ! d         C

def: wave the(sel)
  spoken: wave the <sel=anyone>
  ipart:
    call: press ahead
  ipart:
    select: OUTSIDE 4
      call: kickoff([sel])
    select: CENTER 4
      call: concentric(walk others dodge([sel]))
  example: wave the(BEAU)
    before:
    !   ^ ^
    ! A>B b<c
    ! a>d D<C
    !   v v
    after:
    ! <b <B
    !  a> A>
    ! <C <c
    !  D> d>
  example: wave the(BELLE)
    before:
    ! A><b D><c
    ! a><B d><C
    after:
    ! ^
    ! B<c<C d
    ! ^     v
    ! b A>a>D
    !       v
def: wave nobody
  call: wave the(NOBODY)
  example: wave nobody
    before:
    !   ^ ^
    ! A>B b<c
    ! a>d D<C
    !   v v
    after:
    ! <b  B>
    !  a><C
    !  A> <c
    ! <D  d>
def: wave everybody
  call: wave the(EVERYBODY)
  example: wave everybody
    before:
    ! c C
    ! v v
    ! ^ ^
    ! B b
    ! d D
    ! v v
    ! ^ ^
    ! A a
    after:
    ! b><B
    ! ^  ^
    ! A  a
    ! c  C
    ! v  v
    ! D><d

def: with confidence
  part:
    select: END
      call: nothing
    select: CENTER
      call: HINGE
  part:
    select: END
      call: 1/2(circulate)
    select: CENTER
      select: CENTER // very centers
        call: hinge
      select: END
        call: nothing
  part:
    // XXX: adjust to a thar,  couples 1/2 press ahead, miniwaves...
    call: _finish with confidence
  example: with confidence // very centers end up in couples
    before:
    ! ^   ^
    ! A a B b
    ! ^ v ^ v
    ! d D c C
    !   v   v
    after:
    ! ^ ^
    ! d c B A
    ! ^ ^ v v
    ! C D a b
    !     v v
  example: with confidence // very centers end up in miniwaves
    before:
    !     ^ ^
    ! A a B b
    ! v v ^ ^
    ! d D c C
    ! v v
    after:
    !<b <C
    !<B <a
    ! c> D>
    ! A> d>
