program: c4

def: _quarter cross(n)
  call: 2/3(_quarter mix([n]))
def: quarter cross
  option: LEFT
  call: _quarter cross(1/4)
def: three quarter cross
  option: LEFT
  call: _quarter cross(3/4)

def: brace yourself
  in: 4
  from: COUPLE
    condition: not(or(ALL(BOY), ALL(GIRL))),\
               "Must have one boy and one girl in each couple"
    from: condition(match(_selection pattern(BOY), "x_"))
      call: _courtesy turn(1/2)
    from: condition(match(_selection pattern(BOY), "_x"))
      call: u turn back

def: buckle and(call)
  option: SUPERCALL
  spoken: buckle and <call=anything>
  from: CENTER HALF
    call: _o concentric([call], _buckle)
def: _buckle
  in: 6
  ipart:
    from: use phantoms(PARALLEL GENERAL LINES)
      select: and(END, MATCH(_INOUT PATTERN(), "o")) // "LEADER"
        prim: in 2, 2, in                // cross fold
        prim: 0, 2, in, sashay-finish
        prim: 0, 0, none, preserve-roll
      select: and(END, MATCH(_INOUT PATTERN(), "i")) // "TRAILER"
        prim: 0, 2, none                 // circulate
        prim: in 2, 2, in                // fold
        prim: 0, 0, in
      select: OTHERS
        prim: 0, 0, none
        prim: 0, 0, none
        prim: 0, 0, none


def: cross breed thru
  call: right pull by, _finish cross breed thru
def: _finish cross breed thru
  from: COUPLE
    condition: not(or(ALL(BOY), ALL(GIRL))),\
               "Must have one boy and one girl in each couple"
    from: condition(match(_selection pattern(BOY), "x_"))
      call: left(partner tag)
    from: condition(match(_selection pattern(BOY), "_x"))
      call: quarter out

def: curlique
  in: 4
  from: RH MINIWAVE
    condition: not(or(all(BOY), all(GIRL))), "Same sex curlique!"
    select: BOY
      prim: 1, 1, right
    select: GIRL
      prim: 1, 1, left, sashay-finish
      prim: 0, 0, left
      prim: 0, 0, left
  from: ANY
    call: _mixed touch, curlique

def: retain your lane
  from: CENTER HALF
    call: _quasi concentric(remake, 2(circulate))

def: nicely
  call: and cross(hinge)

def: hot foot spin
  call: fan the top, anyone while others(VERY CENTER, trade), spin the top

def: echo(concept, call)
  option: METACONCEPT
  spoken: echo <0=concept> <1=anything>
  part:
    call: _apply([concept], [call])
  part:
    call: [call]

def: reverse echo(concept, call)
  option: METACONCEPT
  spoken: reverse echo <0=concept> <1=anything>
  part:
    call: [call]
  part:
    call: _apply([concept], [call])

def: piecewise(concept, call)
  option: METACONCEPT
  spoken: piecewise <0=concept> <1=anything>
  from: condition(equal num(num parts([call]), 1))
    part:
      call: _apply([concept], [call])
  from: condition(greater(num parts([call]), 1))
    part:
      call: _apply([concept], _first part([call]))
    part: _subtract num(num parts([call]), 1)
      call: piecewise([concept], finish([call]))

def: trail and peel
  call: _in(2, _trail and step)
  call: _in(2, _centers(and roll(face out)))

def: trail the top
  in: 6
    call: _in(2, _trail and step)
    call: _in(4, fan the top)

def: you all
  from: CENTER HALF
    call: _quasi concentric(hinge, u turn back)

// see 'in roll circulate' (a2)
def: zoom roll circulate
  in: 4 // to match timing of 'zoom'
  from: PARALLEL_WAVES, PARALLEL_TWO_FACED_LINES, PARALLEL_GENERAL_LINES
    condition: equal num(NUM DANCERS(and(END,LEADER)), 2), \
      "Exactly one end in each line must be facing out."
    from: condition(MATCH(_SELECTION PATTERN(and(END,LEADER)), "X_+X"),\
                    PARALLEL GENERAL LINES)
      select: and(LEADER,END)
        ipart:
          prim: 0,0,out
          prim: in 1, 1, roll
        ipart:
          prim: in 1, 1, roll
          prim: 0,0,roll
      select: TRAILER
        ipart:
          prim: 0, 0, none
          prim: 1, 0, right
        ipart:
          prim: 0, 1, roll
          prim: 0, 0, none, preserve-roll preserve-sweep
      select: OTHERS
        ipart:
          prim: 0, 0, none
          prim: -1, 0, left
        ipart:
          prim: 0, 1, roll
          prim: 0, 0, none, preserve-roll preserve-sweep
    from: condition(MATCH(_SELECTION PATTERN(and(END,LEADER)), "_+XX_+"))
      call: mirror(zoom roll circulate)

// C4 class teaching order

// week 1
def: settle back
  call: 1/2(reset), _finish settle back
def: _finish settle back
  from: CENTER HALF
    call: _o concentric(cross back, 2(_phantom o circulate))
def: _phantom o circulate
  from: use phantoms(GENERAL O)
    call: o(column circulate)

def: stack the wheel
  call: _roll(couples hinge)

def: hammerlane
  from: FACING COUPLES
    ipart:
      call: cross cycle

def: clear out
  call: circulate
  call: _finish clear out
def: _finish clear out
  from: CENTER HALF
    call: _quasi concentric(couple up, _like a couple up)

def: step lively
  call: detour
  call: slim down
  call: circulate

def: tag the star(m=1/2,n=1)
  //XXX should this be "half tag the star"?
  spoken: tag the star <n=fraction>? (but turn the star <m=fraction>)?
  call: _tag(_tag the star([m]), [n])
def: _tag the star(n=1/2)
  from: FACING COUPLES
    call: 1/2(reverse(swap around))
    call: counter rotate([n]) // or whatever 'star turn' amount is indicated
    call: _start drop in      // "points face in"
def: _start drop in
  call: _from diamond(_quasi concentric(nothing, face in))

/* slim down defined in C4List.java */

/*
def: the action
def: turntable
def: bridge the gap
def: walk out to a column
def: spin tag the deucey
*/

def: advance to a column(sel)
  spoken: <sel=anyone> advance to a column
  call: walk others dodge([sel])
  call: column circulate
  call: anyone while others(CENTER, trade, nothing)
  call: column circulate

/*
def: fractional twosome // concept
*/

// c4 class week 2
def: follow the yellow brick road
  call: follow the yellow bricking(wheel and deal)

def: follow the yellow bricking(c)
  option: SUPERCALL
  spoken: follow the yellow bricking <c=anything>
  call: and slither(and spread(follow your neighbor))
  call: _quasi concentric(and spread(follow your neighbor), \
                          _fractional(1 1/2, circulate))
  call: _finish fascinating([c])

def: _atc the yellow brick road(atc)
  // XXX: 'spoken'
  call: _tag([atc], 1/2)
  call: follow the yellow brick road
def: _atc the yellow bricking(atc, c)
  // XXX: 'spoken'
  call: _tag([atc], 1/2)
  call: follow the yellow bricking([c])

def: _atc flow(atc)
  // xxx: spoken: <atc=atc> ers flow
  call: _atc generic flow([atc], _finish flow)
def: _atc cross flow(atc)
  // xxx: spoken: <atc=atc> ers flow but cross it
  call: _atc generic flow([atc], _finish cross flow)
def: _atc criss cross flow(atc)
  // xxx: spoken: <atc=atc> ers flow but criss cross it
  call: _atc generic flow([atc], _finish criss cross flow)
def: _atc generic flow(atc, finish)
  call: _tag([atc], 1/2)
  call: [finish]
def: _finish flow
  call: tandem(trade)
  call: slip
def: _finish cross flow
  call: tandem(cross roll)
  call: slip
def: _finish criss cross flow
  call: tandem(trade the wave)
  call: slip

def: replace the column
  call: replace the column but(2/3(recycle))
def: replace the column but(c)
  option: SUPERCALL
  spoken: replace the column but <c=anything>
  call: invert the column(1/2)
  call: _quasi concentric(_finish replace the column([c]), counter rotate(1/4))
def: _finish replace the column(c)
  call: 1/4(reset)
  call: [c]
def: cross replace the column
  call: cross replace the column but(2/3(cross cycle))
def: cross replace the column but(c)
  option: SUPERCALL
  spoken: cross replace the column but <c=anything>
  call: cross invert the column(1/2)
  call: _quasi concentric(_finish cross replace the column([c]), counter rotate(1/4))
def: _finish cross replace the column(c)
  call: 1/4(cross reset) // trippy
  call: [c]

def: presto
  ipart:
    call: _quasi concentric(scoot back, tandem(cross fold))
    call: press ahead

def: jam thru
  from: EIGHT CHAIN THRU
    call: pass thru
    call: cross clover and(_centers finish jam thru)
def: _centers finish jam thru
  call: pass thru, quarter in, pass thru

/*
def: roll out the barrel
*/
def: walk the plank
  call: circulate, the plank
def: the plank
  // XXX: might need a 'from' in ends part to establish LEADER
  // XXX: maybe 'from: COLUMNS' and 'run(NUMBER_1)' ?
  call: _quasi concentric(walk and dodge, run(LEADER))

def: connect the diamond
  from: RH DIAMOND, LH DIAMOND // cheat!
    call: drop in, counter rotate(1/4)
  from: ANY
    call: _from diamond(centers(hinge)), _finish connect the diamond
def: _finish connect the diamond
  from: OCEAN WAVE
    call: step and fold
  from: TWO FACED LINE
    call: step and cross fold

/*
def: three by three
def: generalized jays
def: like a
def: finish
def: interlocked phantom setups
def: quadruple setups
*/

// week 3

def: _atc to a diamond(atc)
  ipart:
    call: _tag([atc], 3/4)
    call: _finish atc to a diamond
    // do we need a quarter-tag-to-diamond adjustment here?

def: _atc to an interlocked diamond(atc)
  ipart:
    call: _atc to a diamond([atc])
    call: _centers(slither)
def: _atc to an hourglass(atc)
  ipart:
    call: _atc to a diamond([atc])
    call: anyone while others(VERY CENTER, snake)
def: _finish atc to a diamond
  from: RH THREE QUARTER TAG
    select: END
      call: quarter right
    select: OTHERS
      call: nothing
  from: LH THREE QUARTER TAG
    select: END
      call: quarter left
    select: OTHERS
      call: nothing
def: _atc to a z(atc)
  ipart:
    call: _blend last(_atc to a diamond([atc]), _from diamond(_diamond to z))
def: _diamond to z
  from: GENERAL DIAMOND
    select: POINT
      prim: 0,1,in
    select: OTHERS
      prim: 0,0,none

def: snake
  from: RH_MINIWAVE
    call: quarter in, left(touch)
  from: LH_MINIWAVE
    call: quarter in, touch

def: quick wrap
  ipart:
    call: _start quick wrap, _finish quick wrap
def: magic quick wrap
  ipart:
    call: _start magic quick wrap, _finish quick wrap
def: _finish quick wrap
  call: _centers(1/2(reset))
def: _start quick wrap
  from: GENERAL COLUMNS
    select: NUMBER 1, NUMBER 2
      call: split counter rotate
    select: NUMBER 3, NUMBER 4
      call: circulate
def: _start magic quick wrap
  from: GENERAL COLUMNS
    select: NUMBER 1
      call: split counter rotate
    select: NUMBER 2
      call: magic circulate, face in
    select: NUMBER 3, NUMBER 4
      call: magic circulate

/*
def: gravitate
*/

def: ride the tide
  call: cross trail thru, clover and(square thru(2)), slide thru

def: star to a wave(n=1/2)
  spoken: star to a wave (but turn the star <n=fraction>)?
  from: FACING COUPLES
    call: 1/2(reverse(swap around))
    call: counter rotate([n])
    call: flip the diamond

def: the difference
  call: cast(3/4), slip, cast(3/4)
def: _anything the difference(c)
  spoken: <c=anything> the difference
  part:
    call: [c]
  part: 3
    call: the difference
def: split the difference
  call: _anything the difference(split circulate)
def: split trade the difference
  call: _anything the difference(split trade circulate)

def: transaction
  call: trans(chain reaction)
def: transactivate
  call: trans(reactivate)
def: trans(c)
  option: SUPERCALL
  spoken: trans <c=anything>
  call: transfer and(cast(3/4))
  call: [c]

/*
def: <atc> ers flow but criss cross it
*/
def: the alter(n)
  spoken: <n=fraction> the alter
  call: quarter the alter([n], [n], [n])

def: quarter the alter(i, j, k)
  spoken: <i=fraction> <j=fraction> <k=fraction> the alter
  call: 1/2(_any hand quarter thru([i]))
  call: anyone while others(CENTER, cast([j]), u turn back)
  call: _the alter part three([k])
  call: flip the diamond
def: _the alter part three(n)
  call: _from diamond(counter rotate([n])) // "turn the star"

def: the alter and circulate(n)
  spoken: <n=fraction> the alter and circulate
  call: quarter the alter and circulate([n], [n], [n])

def: quarter the alter and circulate(i, j, k)
  spoken: <i=fraction> <j=fraction> <k=fraction> the alter and circulate
  call: 1/2(_any hand quarter thru([i]))
  call: anyone while others(CENTER, cast([j]), u turn back)
  call: anyone while others(CENTER, _center(trade), circulate)
  call: _the alter part three([k])
  call: flip the diamond

/*
def: double down
*/

def: contour the line
  call: hinge, split circulate, split circulate, hinge

/*
def: chase back // XXX this is C3B now.
*/

def: push off
  call: zip code(1)
  call: _finish push off
def: _finish push off
  from: 2x4
    call: _quasi concentric(and(fan the top, hinge), touch(3/4))

def: counteract
  call: _counteract part 1, _counteract part 2
def: _counteract part 1
  from: 2x4
    call: _quasi concentric(counter rotate, trade)
def: _counteract part 2
  from: 2x4
    select: END
      call: split counter rotate
    select: and(CENTER, LEADER)
      prim: in 2, 2, in
      prim: in 2, 2, in
    select: and(CENTER, TRAILER)
      // divide this so that 1/2 of the centers part works out correctly
      prim: 0, 0, in
      prim: 0, 0, out

/*
def: multiple setups working together
def: phantom tandem / phantom as couples concepts (including twosome)
def: phantom boxes / phantom diamonds (like phantom lines/columns)
def: yoyo concept
*/

// week 4

def: bits and pieces
  call: _bits and pieces part 1
  call: _bits and pieces part 2
def: _bits and pieces part 1
  from: CENTER HALF
    call: _o concentric(_flexible peel and trail, 2(_phantom o circulate))
def: _bits and pieces part 2
  from: CENTER HALF
    call: _quasi concentric(ah so, trade)

// like peel and trail, but can also be done from couples facing or couples
// back to back
def: _flexible peel and trail
  ipart:
    from: FACING COUPLES
      in: 6
        call: touch, lockit, lockit
    from: BACK-TO-BACK COUPLES
      in: 6
        call: u turn back, touch
    from: ANY
      call: peel and trail

def: counterpoint
  call: concentric(recycle, counter rotate)
def: cross counterpoint
  call: concentric(cross cycle, counter rotate)

def: dixie spin
  call: dixie style
  call: fan the top

def: double the wave
  call: 2/3(hot foot spin)

def: make a pass
  call: make a pass but(cast(3/4))
def: make a pass but(c)
  spoken: make a pass but <c=anything>
  call: _chain reaction part 1
  call: _finish make a pass([c])
def: cross make a pass
  call: cross make a pass but(cast(3/4))
def: cross make a pass but(c)
  spoken: cross make a pass but <c=anything>
  call: _cross chain reaction part 1
  call: _finish make a pass([c])
def: _finish make a pass(c)
  from: GENERAL QUARTER TAG
    call: _quasi concentric([c], and roll(trade))

def: outpost
  call: _outpost part 1
  call: _outpost part 2
  call: _outpost part 3
def: _outpost part 1
  from: ANY // "one end looking out"
    call: 1/2(out roll circulate)
  from: ANY // "both ends looking out"
    call: 1/2(here comes the judge)
def: _outpost part 2
  call: _center 6(trade)
def: _outpost part 3
  from: GENERAL QUARTER TAG, CENTER 4
    call: _o concentric(ah so, 2(_phantom o circulate))

// XXX test example in bill's book which ends in a collision to form clumps
def: roll out to a column
  from: GENERAL COLUMN
    select: END
      call: right anchor(1/4), roll, press ahead
    select: CENTER
      call: quarter right, counter rotate, press ahead

// XXX write test to ensure that we do 1/4 and 3/4 run wild correctly.
def: run wild
  call: 2(cross roll)

//def: shove off

def: turn on
  call: split counter rotate
  call: extend

// -------------

def: quick change
  from: CENTER HALF
    call: _quasi concentric(and(trade, roll), and(circulate, face in))

// Richard Tuck C4 Teach Order

// 4.1

def: cooperate
  call: circulate
  call: 1/2(circulate)
  call: _cooperate part 3
  call: centers(drop in)

def: _cooperate part 3
  from: CENTER 6
    call: _quasi concentric(invert the column(2/3), nothing)

def: snap
  call: partner tag

def: relay your pleasure
  call: trade
  call: _relay your pleasure part 2
  call: _relay your pleasure part 3
def: _relay your pleasure part 2
  from: CENTER 6
    call: _quasi concentric(cast(3/4), isolate) // XXX isolate is space invader
def: _relay your pleasure part 3
  from: CENTER 6
    call: _quasi concentric(_relay your pleasure centers part 3, press in)
def: _relay your pleasure centers part 3
  from: CENTER 2
    call: _quasi concentric(spread, _like a couple up) // XXX spread is space invader

def: change-o
  spoken: change o
  from: GENERAL COLUMNS
    select: NUMBER 1, NUMBER 2
      call: column circulate
    select: NUMBER 3, NUMBER 4
      call: crossover circulate

def: reverse change-o
  spoken: reverse change o
  from: GENERAL COLUMNS
    select: NUMBER 1, NUMBER 4
      call: column circulate
    select: NUMBER 2, NUMBER 3
      call: crossover circulate

def: shadow to a diamond // XXX breathing?
  from: CENTER HALF
    call: _quasi concentric(peel and trail, _ends part cast a shadow) // XXX

// xxx cross shadow to a diamond, criss cross shadow to a diamond

def: lead the way
  call: _lead the way part 1
  call: _lead the way part 2
def: _lead the way part 1
  from: CENTER HALF
    call: _quasi concentric(peel off, trade)
def: _lead the way part 2
  from: CENTER HALF
    call: _quasi concentric(bend the line, roll)

// one of the reasons why we can't add "and" to the grammar!
// also, single hinge and trade will be problematic if we define the
// "single" concept.  It's not the only call with a 'single' prefix, though.
// Iin general we should define a preprocessing step such that
// an explicit 'single hinge and trade' definition always overrides
// single(hinge and trade) -- basically preprocess the production
// 'single <anything>' into 'single <anything except hinge and trade>'
def: hinge and trade
  call: as couples(single hinge and trade)

// XXX from a 4-dancer setup
def: single hinge and trade // xxx see above
  call: hinge
  call: _four person call(_center 2(trade, _nothing preserve roll))
  call: roll

// 4.2

/*
(Cross) Reactivate to a Diamond
Explosion
Diamond Recycle (from Diamonds to facing couples)
Cooperate But …
Mini Pleasure
Scamper
Square the Barge
4.3
Short & Sweet
Lead the Class
Press for Time
use Hinge and Trade <====
Diamond Inlet
Continue to Invert the Column
Pair the Line
Cross Mini Pleasure <====
4.4
Diamond Recycle (from Box to Diamonds)
Coordinate to a Diamond
Siamese Breakdown
Diamond Outlet
Cut Across
Triple Cast
4.5
Swivel (and Cross Swivel) <====
Pop
Shove Off <=====
Spin/Fan Back
Cross Pair the Line
Continue to Cross Invert <====
Stroll & Cycle
Turn & Weave (box & column)
4.6
Spin Chain the Star
Straight Away
Chip Off
Turn & Weave (1/4 tag)
Splash
Centers Cut Out
Beep Beep
*/

// 4.7

def: deuces wild
  from: CENTER 4
    call: _quasi concentric(trade, zoom)

/*
Cross Sashay
Clean Sweep
Divi Up
Roll 'Em
Veer & Turn
Fan Chain the Star
Set Back
Cross Straight Away
Deuces Wild
Cloverflow
Tag Circulate
Ends Cut In
Nice & Easy
*/

// 5.1

// keep this in sync with 'spin chain the gears' (plus)
def: spin chain and circulate the gears(n=3/4)
  // allocate an extra 4 beats over spin chain the gears for the final circ.
  // (2 for each circulate)
  spoken: spin chain and circulate the gears (but turn the star <n=fraction>)?
  part:
    call: _maybe touch(_wave swing) // 3 beats
  xpart:
    call: _in(4, _from(GENERAL LINE, _quasi concentric(cast(3/4), u turn back)))
    call: _in(4, _from(CENTER 4, _quasi concentric(\
                 _from(CENTER 2, _quasi concentric(trade, nothing)),\
                       circulate)))
    call: _fractional(_multiply num(4,[n]), diamond circulate)  // 3 beats/qtr
    call: _in(2, _from(CENTER 2, _quasi concentric(trade, nothing)))
    call: _in(6, _from(CENTER 4, _quasi concentric(cast(3/4), and(u turn back, circulate))))

def: cross to a diamond
  ipart:
    from: PARALLEL GENERAL LINES
      call: _cross concentric(box circulate, hinge)
    from: ANY
      call: _from two diamonds(_cross to a diamond from diamonds)
def: _cross to a diamond from diamonds
  from: POINT-TO-POINT GENERAL DIAMONDS
    call: _blend first(_smash diamond, _center 4(hinge, circulate))

def: cross to an hourglass
  call: _blend last(cross to a diamond, _center 2(snake))
def: cross to an interlocked diamond
  call: _blend last(cross to a diamond, _very centers sashay)
def: cross to a z
  call: _blend last(cross to a diamond, _from diamond(_diamond to z))

def: reverse the diamond
  from: CENTER 4
    call: _quasi concentric(trade the wave, u turn back)

def: push open the gate
  from: EIGHT CHAIN THRU
    part: 1
      call: centers in
    part: 2
      call: push open the gate
  from: INVERTED LINES
    part:
      call: cast(3/4)
    xpart:
      call: _push open the gate middle part
      call: _ends(slide thru)
def: _push open the gate middle part
  from: CENTER HALF
    call: _o concentric(pass thru,\
                        _from(use phantoms(LINES FACING OUT), ends bend))

def: clear the centers(call)
  option: SUPERCALL
  spoken: clear the centers for (a|an)? <call=anything>
  call: _clear the centers part 1
  call: _clear the centers part 2([call])
def: _clear the centers part 1
  ipart:
    from: CENTER 4
      call: _quasi concentric(and(hinge,box circulate), nothing)
def: _clear the centers part 2(call)
  // "tandem u turn back" isn't the best animation, but it gets the
  // dancers to the correct spots.
  ipart:
    from: 2x4
      condition: MATCH(_FACING PATTERN(CENTER), "[v^]+")
      call: _cross concentric(tandem(u turn back), [call])
    from: 2x4
      condition: MATCH(_FACING PATTERN(CENTER), "[<>]+")
      call: slim down
      call: _from(CENTER 4, _quasi concentric([call], tandem(u turn back)))

def: cross clear the centers(call)
  option: SUPERCALL
  spoken: ( cross clear the centers | clear the centers but cross it ) \
          for (a|an)? <call=anything>
  call: _clear the centers part 1
  call: _cross clear the centers part 2([call])
def: _cross clear the centers part 2(call)
  // "cross concentric" isn't the best animation, but it gets the
  // dancers to the correct spots.
  ipart:
    from: 2x4
      condition: MATCH(_FACING PATTERN(CENTER), "[v^]+")
      call: _cross concentric(2(box circulate), [call])
    from: 2x4
      condition: MATCH(_FACING PATTERN(CENTER), "[<>]+")
      call: slim down
      call: _from(CENTER 4, _quasi concentric([call], 2(box circulate)))

def: dixie chain
  from: FACING COUPLES
    ipart:
      call: _blend first(_start dixie chain, _centers(right pull by))
    part: 2
      call: _finish dixie chain
def: _start dixie chain
  from: FACING COUPLES
    select: BELLE
      prim: in 1, 0, none, sashay-start sashay-finish
    select: BEAU
      prim: in 1, -2, none, sashay-finish
def: _finish dixie chain
  from: GENERAL COLUMN
    call: left pull by
    call: _centers(right pull by)

def: split dixie chain
  part:
    call: _centers(_blend last(right pull by,face out))
  part: 2
    call: _finish dixie chain


def: cheerio
  call: _cheerio part 1
  call: press ahead
  call: _ends(face in)
def: _cheerio part 1
  from: COLUMN, GENERAL COLUMNS
    call: _quasi concentric(partner tag, _cheerio run)
def: _cheerio run
  from: 2x2
    call: _with designated(LEADER, _designees run)
def: _cheerio designees run
  from: mixed(COUPLE, RH MINIWAVE, LH MINIWAVE)
    from: condition(match(_selection pattern(DESIGNATED), "XX"))
      call: trade
    from: condition(match(_selection pattern(DESIGNATED), "__"))
      call: nothing // don't sashay!
    from: ANY
      call: _designees run

def: trixie
  in: 2
  from: 2x2
    select: LEADER
      prim: 0, 0, in
    select: TRAILER
      prim: 0, 0, out

/*
5.2
Right On & Left On <====
Bail Out
n/4 Chain & Circulate In
Spin a Wheel
Straightfire
Cross & Divide
Ship Ahoy
Cross Linear Cycle
5.3
Round Off <=====
Out Roll to a Wave
Cross to an Interlocked Diamond | Hourglass
Turn By
Curve Right | Left
Swing Chain the Line
Right | Left Anchor
Straight Connect
5.4
Flare the Star
Dixie Daisy
Round the Horn
Erase
Swing Chain the Gears & other Swing Chain calls
Clover the Wave
Remember the Alamo
Break the Alamo
Tap
5.5
Mix the Line
Triple Turn
Turn & Left Thru
Reciprocate
Touch Tone
Cloverleaf Turn
Trim a Web
Criss Cross the Diamond
Roll the Wave
*/

// 5.6

// XXX define derby

def: dixie derby
  call: dixie style to a wave
  call: derby

def: trixie spin
  call: trixie
  call: cast(3/4)
  call: cross run(CENTER)

/*
In Roll to a Wave
Rip the Line
Convert the Triangle
Clover the Horn
Mesh
5.7
ATC-eroo also use Switcheroo <==
Sashay Thru
Cross Town Roll
Snap the Diamond
Shuttle dir | call
Spin Chain & Circulate In
*/
