program: c4

def: brace yourself
  from: COUPLE
    condition: not(or(ALL(BOY), ALL(GIRL))),\
               "Must have one boy and one girl in each couple"
    from: ANY
      condition: match(_selection pattern(BOY), "x_")
      call: courtesy turn(1/2)
    from: ANY
      condition: match(_selection pattern(BOY), "_x")
      call: u turn back

def: cross breed thru
  call: right pull by, _finish cross breed thru
def: _finish cross breed thru
  from: COUPLE
    condition: not(or(ALL(BOY), ALL(GIRL))),\
               "Must have one boy and one girl in each couple"
    from: ANY
      condition: match(_selection pattern(BOY), "x_")
      call: left(partner tag)
    from: ANY
      condition: match(_selection pattern(BOY), "_x")
      call: quarter out

def: curlique
  in: 4
  from: RH MINIWAVE
    condition: not(or(all(BOY), all(GIRL))), "Same sex curlique!"
    select: BOY
      prim: 1, 1, right
    select: GIRL
      prim: 1, 1, left, sashay-finish
      prim: 0, 0, left
      prim: 0, 0, left
  from: ANY
    call: _mixed touch, curlique

def: retain your lane
  from: CENTER HALF
    call: _quasi concentric(remake, 2(circulate))

def: nicely
  call: and cross(hinge)

def: hot foot spin
  call: fan the top, anyone while others(VERY CENTER, trade), spin the top

def: transaction
  call: transfer and(cast off(3/4)), chain reaction

def: echo(concept, call)
  spoken: echo <0=concept> <1=anything>
  part:
    call: _apply([concept], [call])
  part:
    call: [call]

def: reverse echo(concept, call)
  spoken: reverse echo <0=concept> <1=anything>
  part:
    call: [call]
  part:
    call: _apply([concept], [call])

// C4 class teaching order

// week 1
def: settle back
  call: 1/2(reset), _finish settle back
def: _finish settle back
  from: CENTER HALF
    call: _quasi concentric(cross back, 2(o circulate))

def: stack the wheel
  call: _roll(couples hinge)

def: hammerlane
  from: FACING COUPLES
    call: cross cycle

def: clear out
  call: circulate
  call: _finish clear out
def: _finish clear out
  from: CENTER HALF
    call: _quasi concentric(couple up, _finish couple up)

def: step lively
  call: detour
  call: slim down
  call: circulate

def: tag the star(m=1/2,n=1)
  //XXX should this be "half tag the star"?
  spoken: tag the star <n=fraction>? (but turn the star <m=fraction>)?
  call: _tag(_tag the star([m]), [n])
def: _tag the star(n=1/2)
  from: FACING COUPLES
    call: 1/2(reverse(swap around))
    call: counter rotate([n]) // "or whatever 'star turn' amount is indicated
    call: _start drop in      // "points face in"
def: _start drop in
  from: GENERAL DIAMOND
    call: _quasi concentric(nothing, face in)

/* slim down defined in C4List.java */

/*
def: the action
def: turntable
def: bridge the gap
def: walk out to a column
def: spin tag the deucey
*/

def: advance to a column(sel)
  spoken: <sel=anyone> advance to a column
  call: walk others dodge([sel])
  call: column circulate
  call: anyone while others(CENTER, trade, nothing)
  call: column circulate

/*
def: fractional twosome // concept
*/

// c4 class week 2
def: follow the yellow brick road
  call: follow the yellow bricking(wheel and deal)

def: follow the yellow bricking(c)
  spoken: follow the yellow bricking <c=anything>
  call: and slither(and spread(follow your neighbor))
  call: _quasi concentric(and spread(follow your neighbor), \
                          _fractional(1 1/2, circulate))
  call: _finish fascinating([c])

def: _atc the yellow brick road(atc)
  // XXX: 'spoken'
  call: _tag([atc], 1/2)
  call: follow the yellow brick road
def: _atc the yellow bricking(atc, c)
  // XXX: 'spoken'
  call: _tag([atc], 1/2)
  call: follow the yellow bricking([c])

def: _atc flow(atc)
  // xxx: spoken: <atc=atc> ers flow
  call: _atc generic flow([atc], _finish flow)
def: _atc cross flow(atc)
  // xxx: spoken: <atc=atc> ers flow but cross it
  call: _atc generic flow([atc], _finish cross flow)
def: _atc criss cross flow(atc)
  // xxx: spoken: <atc=atc> ers flow but criss cross it
  call: _atc generic flow([atc], _finish criss cross flow)
def: _atc generic flow(atc, finish)
  call: _tag([atc], 1/2)
  call: [finish]
def: _finish flow
  call: tandem(trade)
  call: slip
def: _finish cross flow
  call: tandem(cross roll)
  call: slip
def: _finish criss cross flow
  call: tandem(trade the wave)
  call: slip

def: replace the column
  call: replace the column but(2/3(recycle))
def: replace the column but(c)
  spoken: replace the column but <c=anything>
  call: invert the column(1/2)
  call: _quasi concentric(_finish replace the column([c]), counter rotate(1/4))
def: _finish replace the column(c)
  call: 1/4(reset)
  call: [c]
def: cross replace the column
  call: cross replace the column but(2/3(cross cycle))
def: cross replace the column but(c)
  spoken: cross replace the column but <c=anything>
  call: cross invert the column(1/2)
  call: _quasi concentric(_finish cross replace the column([c]), counter rotate(1/4))
def: _finish cross replace the column(c)
  call: 1/4(cross reset) // trippy
  call: [c]

def: presto
  ipart:
    call: _quasi concentric(scoot back, tandem(cross fold))
    call: press ahead

def: jam thru
  from: EIGHT CHAIN THRU
    call: pass thru
    call: cross clover and(_centers finish jam thru)
def: _centers finish jam thru
  call: pass thru, quarter in, pass thru

/*
def: roll out the barrel
*/
def: walk the plank
  call: circulate, the plank
def: the plank
  // XXX: might need a 'from' in ends part to establish LEADER
  // XXX: maybe 'from: COLUMNS' and 'run(NUMBER_1)' ?
  call: _quasi concentric(walk and dodge, run(LEADER))

def: connect the diamond
  from: RH DIAMOND, LH DIAMOND // cheat!
    call: drop in, counter rotate(1/4)
  from: GENERAL DIAMOND
    call: centers(hinge), _finish connect the diamond
def: _finish connect the diamond
  from: OCEAN WAVE
    call: step and fold
  from: TWO FACED LINE
    call: step and cross fold

/*
def: three by three
def: generalized jays
def: like a
def: finish
def: interlocked phantom setups
def: quadruple setups

// week 3
def: <atc> to a diamond
def: <atc> to an interlocked diamond
def: <atc> to an hourglass
def: quick wrap
def: gravitate
def: ride the tide
def: star to a wave
def: the difference

*/
