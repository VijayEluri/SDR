program: mainstream

// callerlab #52: CLOVERLEAF
// XXX: missing 4-person variant
def: cloverleaf
  in: 8
  call: tandem(_single cloverleaf)

def: _single cloverleaf
  from: BACK TO BACK COUPLES // XXX suppress breathing
    ipart:
      prim: 0, 1, none    // 1,1,n -> 2,1,n "first step forward"
      prim: out 1, 1, out // 2,1,n -> 3,2,e
      prim: in 1, 1, in   // 3,2,e -> 2,3,s
      prim: in 1, 1, in   // 2,3,s -> 1,2,w
      prim: 0, 1, none    // 1,2,w -> 1,1,w

// callerlab #53: TURN THRU

def: turn thru
  optional: LEFT
  in: 4
  from: RH MINIWAVE
    call: right arm turn(1/2), step thru
  from: ANY
    call: _mixed touch, turn thru

// callerlab #54: EIGHT CHAIN THRU / EIGHT CHAIN 1, 2, 3
def: eight chain thru
  call: eight chain(8)

def: eight chain(n)
  spoken: eight chain <n=number>
  in: _multiply num([n], 20/8)
  call: _fractional(_divide num([n], 2), _eight chain 2)

def: _eight chain 2
  call: _eight chain odd, _eight chain even

def: _eight chain odd
  // XXX removed ends in, because it interferes with fractionalization
  //ends in: formation(TRADE BY), "Can't Eight Chain from here"
  condition: EQUAL NUM(NUM DANCERS(), 8)
  call: right pull by

def: _eight chain even
  in: 3
  from: TRADE BY
    call: _quasi concentric(_in(3, left pull by), _in(3, courtesy turn(1/2)))

// callerlab #55: PASS TO THE CENTER
def: pass to the center
  optional: LEFT
  call: pass thru
  call: _finish pass to the center

def: _finish pass to the center
  condition: EQUAL NUM(NUM DANCERS(), 8)
  // very generous definition here, but note that I don't use
  // quasi-concentric; I want 'outsides', not "ends of lines"
  from: CENTER HALF
    select: CENTER
      call: nothing
    select: OTHERS
      call: trade

// callerlab #56: SINGLE HINGE / COUPLES HINGE

def: _hinge
  in: 2
  call: 1/2(trade)
def: hinge
  from: mixed(RH MINIWAVE, LH MINIWAVE)
    call: _hinge
  from: mixed(RH MINIWAVE, LH MINIWAVE, COUPLE)
    condition: PROGRAM AT LEAST(A1), "Partner hinge not allowed below A1"
    call: _hinge
def: left hinge
  from: mixed(LH MINIWAVE, COUPLE)
    call: mirror(_hinge)

def: couples hinge
  in: 3
  call: as couples(_hinge)

def: couples left hinge
  call: left(couples hinge)

// callerlab #57: CENTERS IN
def: centers in
  spoken: (put)? centers in
  in: 2
  call: _with designated(MATCH(_INOUT PATTERN(), "o"), _designees in)

def: _designees in
  in: 2
  from: 2x2
    condition: equal num(2, NUM DANCERS(and(DESIGNATED, TRAILER))), \
               "The centers must be a couple"
    from: 2x2
      condition: MATCH(_FACING PATTERN(DESIGNATED, TRAILER), "[<>]+"), "EW"
      select: and(DESIGNATED, TRAILER)
        prim: 0, 2, none
      select: MATCH(_FACING PATTERN(), "[<>]") // same as designees
        prim: out 2, 0, none, sashay-start sashay-finish
      select: MATCH(_FACING PATTERN(), "[v^]") // t-boned to designees
        prim: 0, out 2, none
    from: 2x2
      condition: MATCH(_FACING PATTERN(DESIGNATED, TRAILER), "[v^]+"), "NS"
      select: and(DESIGNATED, TRAILER)
        prim: 0, 2, none
      select: MATCH(_FACING PATTERN(), "[v^]") // same as designees
        prim: out 2, 0, none, sashay-start sashay-finish
      select: MATCH(_FACING PATTERN(), "[<>]") // t-boned to designees
        prim: 0, out 2, none

// callerlab #58: CAST OFF THREE QUARTERS

// cast 3/4 is mainstream -- what level is "cast 1/4"
// and/or "cast 1/2"?  We'll follow SD in calling these
// mainstream as well.
def: cast(n)
  spoken: cast (off)? <n=fraction>
  from: ANY
    condition: formation(mixed(GENERAL LINE, RH MINIWAVE, LH MINIWAVE)), \
               "Need to be in miniwave or line of 4"
    from: ANY
      condition: equal num(_fraction(_multiply num([n], 4)), 0)
      call: _fractional([n], _cast 4/4)
    from: ANY
      condition: greater(1/4, [n])
      call: _fractional(_multiply num(2, _fraction(_multiply num([n], 4))), \
                        _cast 1/8)
    from: ANY
      // cast off some number of 1/4s, plus an extra 1/8 (or portion) at the end
      // if needed
      call: _fractional(_divide num(_floor(_multiply num([n], 4)), 4), \
                        _cast 4/4)
      call: _fractional(_multiply num(2, _fraction(_multiply num([n], 4))), \
                        _cast 1/8)

def: _cast 1/8
  in: 1
  from: MINIWAVE, mixed(GENERAL LINE, RH MINIWAVE, LH MINIWAVE)
    from: MINIWAVE
      call: _miniwave cast 1/8
    from: GENERAL LINE
      call: _with designated(END, _designated end cast 1/8)
// 1/8 casts breathe better on a 1-unit grid, rather than a 2-unit grid
def: _miniwave cast 1/8
  in: 1
  from: MINIWAVE
    prim: in 1/2, 1/2, in 1/8
def: _beau cast 1/8
  in: 1
  from: COUPLE
    select: BEAU // pivot
      prim: 0, 0, left 1/8
    select: BELLE // pusher
      prim: -1, 1, left 1/8
def: _designated end cast 1/8
  in: 1
  from: mixed(RH MINIWAVE, LH MINIWAVE, COUPLE)
    from: MINIWAVE
      call: _miniwave cast 1/8
    from: COUPLE
      condition: ARE(DESIGNATED, BEAU)
      call: _beau cast 1/8
    from: COUPLE
      condition: ARE(DESIGNATED, BELLE)
      call: mirror(_beau cast 1/8)

def: _cast 4/4
  from: MINIWAVE, mixed(GENERAL LINE, RH MINIWAVE, LH MINIWAVE)
    from: MINIWAVE
      call: _miniwave cast 4/4
    from: GENERAL LINE
      call: _with designated(END, _designated end cast 4/4)
def: _miniwave cast 4/4
  in: 8
  from: MINIWAVE
    prim: in 1,1,in
    prim: in 1,1,in
    prim: in 1,1,in
    prim: in 1,1,in
def: _beau cast 4/4
  in: 8
  from: COUPLE
    select: BEAU // pivot
      prim: 0,0,left
      prim: 0,0,left
      prim: 0,0,left
      prim: 0,0,left
    select: BELLE // pusher
      prim: -2,2,left
      prim: -2,2,left
      prim: -2,2,left
      prim: -2,2,left
def: _designated end cast 4/4
  in: 8
  from: mixed(RH MINIWAVE, LH MINIWAVE, COUPLE)
    from: MINIWAVE
      call: _miniwave cast 4/4
    from: COUPLE
      condition: ARE(DESIGNATED, BEAU)
      call: _beau cast 4/4
    from: COUPLE
      condition: ARE(DESIGNATED, BELLE)
      call: mirror(_beau cast 4/4)

// callerlab #59: SPIN THE TOP
def: spin the top
  optional: LEFT
  in: 8 // from wave
  call: _maybe touch(_wave swing), fan the top

// callerlab #60: WALK AND DODGE
def: walk and dodge
  in: 4
  call: walk others dodge(TRAILER)

def: walk others dodge(sel)
  spoken: <sel=anyone> walk (others|<anyone>) dodge
  in: 4
  from: 2x2
    condition: ARE([sel], TRAILER), "Named dancers can't walk!"
    select: [sel]
      prim: 0,1,none
      prim: 0,1,none
    select: OTHERS
      select: BEAU
        prim: 1,0,none,sashay-start sashay-finish
        prim: 1,0,none,sashay-start sashay-finish
      select: BELLE
        prim: -1,0,none,sashay-start sashay-finish
        prim: -1,0,none,sashay-start sashay-finish

// callerlab #61: SLIDE THRU

// I've seen 1/2 slide thru, and 'finish a slide thru' called, so
// pretend that slide thru has two parts.
def: slide thru
  in: 4
  part:
    call: pass thru
  part:
    select: BOY
      call: face right
    select: GIRL
      call: face left

// callerlab #62: FOLD FAMILY
// XXX: see notes; definition says we can fold from anyplace where we've
//      got a shoulder to another dancer.  we probably want to implement
//      this as 'from: [ALLOW UNMATCHED] GENERAL COUPLE' with some way
//      to make the breathing of 'ends fold' from parallel waves work right.
def: fold(sel)
  spoken: <sel=anyone> fold
  in: 2
  from: GENERAL LINE, COUPLE, MINIWAVE
    // line 'run', we do a line select so that 'centers fold' works right
    call: _with designated([sel], _designees fold)
def: _designees fold
  from: GENERAL LINE, COUPLE, MINIWAVE
    select: DESIGNATED
      select: BEAU
        prim: 1,3,right
        prim: 1,1,right
      select: BELLE
        prim: -1,3,left
        prim: -1,1,left
    select: OTHERS
      prim: 0,0,none

def: cross fold(sel)
  spoken: <sel=anyone> cross fold
  in: 4
  from: GENERAL LINE
    call: _with designated([sel], _designees cross fold)
def: _designees cross fold
  from: GENERAL LINE
    select: DESIGNATED
      select: BEAU
        prim: 2, 3, right
        prim: 1, 2, right
      select: BELLE
        prim: -2, 3, left
        prim: -1, 2, left
    select: OTHERS
      prim: 0,0,none

// callerlab #63: DIXIE STYLE TO AN OCEAN WAVE
def: dixie style
  optional: REVERSE
  spoken: dixie style (to a wave)?
  in: 6
  ipart:
    from: SINGLE DOUBLE PASS THRU
      call: _centers(right pull by)
      call: left(_touch(1/4))
    from: ANY
      call: _in(2, _start dixie style), _in(4, dixie style)

// "The right hand dancer steps forward and to the left to become the lead
//  dancer in a tandem"
def: _start dixie style
  from: FACING COUPLES
    ends in: formation(SINGLE DOUBLE PASS THRU)
    select: BELLE
      prim: in 1, 0, none, sashay-start sashay-finish
    select: BEAU
      prim: in 1, -2, none, sashay-finish

// callerlab #64: SPIN CHAIN THRU
def: spin chain thru
  in: 16
  // "native" timing: 3+6+3+6=18.  Reduce to 16 by shortening swing/slip.
  part:
    call: _in(2, _maybe touch(_wave swing))
  part: 3
    call: _in(14, _centers(and(cast(3/4), _in(2, slip), cast(3/4))))

// callerlab #65: TAG THE LINE

def: _tag(atc, n)
  ipart:
    call: [atc], _finish_tag([n])
def: _finish_tag(n)
  from: SINGLE DOUBLE PASS THRU
    condition: EQUAL NUM([n], 0)
    call: nothing
  from: SINGLE DOUBLE PASS THRU
    condition: GREATER([n], 0)
    call: _fractional(_multiply num(4,[n]), _extend)
// or else: n=0->atc; else fractional(n, part(atc,extend), part(extend), part(extend), part(extend))

def: _atc tag
  in: 2
  from: GENERAL LINE
    prim: 0, 0, in

// half tag = mainstream
// 3/4 tag = plus
def: tag the line
  optional: LEFT
  spoken: tag the line (all the way (through)?)?
  in: 6 // xxx ?
  call: _tag(_atc tag, 1)
def: _tag the line(n)
  optional: LEFT
  spoken: tag the line <n=fraction>
  condition: GREATER(1, [n])
  call: _tag(_atc tag, [n])

def: tag the line in
  spoken: tag the line (face)? in
  call: tag the line, face in
def: tag the line out
  spoken: tag the line (face)? out
  call: tag the line, face out
def: tag the line right
  spoken: tag the line (face)? right
  call: tag the line, face right
def: tag the line left
  spoken: tag the line (face)? left
  call: tag the line, face left

// callerlab #66: HALF TAG

def: half tag
  optional: LEFT
  call: _tag the line(1/2)

// callerlab #67: SCOOT BACK

def: scoot back
  optional: LEFT
  in: 6
  from: BOX, 2x2
    condition: or(PROGRAM AT LEAST(c1), NOT(TBONED(ALL))), \
               "T-boned formations not allowed below C1"
    condition: MATCH(_SELECTION PATTERN(TRAILER), "x__x|_xx_"), \
               "Must have diagonal trailers"
    select: TRAILER
      ipart:
        prim: 0,1,none
        prim: in 1,1,in
      ipart:
        prim: in 1,1,in
        prim: 0,1,none
    select: LEADER
      ipart:
        prim: in 1,2,in
      ipart:
        prim: in 2,1,in
  from: SINGLE QUARTER TAG, QUARTER TAG
    call: _extend, trade, _extend

// callerlab #68: RECYCLE

def: _wave recycle
  in: 4
  from: ANY
    ipart: // CHEAT DEFINITION
      call: hinge, _box circulate, _recycle face in // CHEAT DEFINITION
  from: ANY // REAL DEFINITION
    condition: PROGRAM AT LEAST(C1), "Fractional recycle not allowed below C1"
    call: _start wave recycle, _box counter rotate(1/4), roll

def: _start wave recycle
  in: 2
  ipart:
    from: OCEAN_WAVE
      select: CENTER
        prim: 0, 1, out
        prim: 0, 0, in // "in roll direction"
      select: OTHERS
        prim: in 2, 1, none
        prim: 0, 0, none

def: _recycle face in // used in recycle cheat
  in: 2
  from: 2x2
   prim: 0, 0, in, preserve-sweep

def: recycle
  from: ANY
    call: _wave recycle
  from: ANY
    condition: PROGRAM AT LEAST(A2), "Facing recycle not allowed below A2"
    call: _facing recycle

////////// end of mainstream list //////////////
